<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>实验ensp 路由引入导致的环路问题</title>
      <link href="/2022-12-03-shi-yan-ensp-lu-you-yin-ru-dao-zhi-de-huan-lu-wen-ti.html"/>
      <url>/2022-12-03-shi-yan-ensp-lu-you-yin-ru-dao-zhi-de-huan-lu-wen-ti.html</url>
      
        <content type="html"><![CDATA[<h1 id="路由引入导致的环路问题"><a href="#路由引入导致的环路问题" class="headerlink" title="路由引入导致的环路问题"></a><center>路由引入导致的环路问题</center></h1><h2 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h2><p><img src="https://img-blog.csdnimg.cn/1554f20d1860496ea2ceafd71b8538b9.png"></p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p><strong>实验需求：</strong></p><p>1.按照图上标记的路由协议配置路由器，在AR4上将两条静态路由引入OSPF</p><p>2.在R2上将OSPF引入ISIS</p><p><strong>实验中会产生环路，请思考破环方法：</strong></p><p>1.修改优先级，让ISIS的优先级低于外部引入的OSPF优先级，让OSPF加表</p><p>2.通过filter-policy，使得AR1拒绝来自AR3传来的路由条目。</p><p>3.通过在AR2上将引入ISIS的路由条目添加TAG标签，AR1在接收来自ISIS的路由后，对携带这个标签的路由进行过滤</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>1.完成实验需求内容</p><pre class="line-numbers language-none"><code class="language-none">R1：interface GigabitEthernet0/0/0 ip address 12.1.1.1 255.255.255.0 #interface GigabitEthernet0/0/1 ip address 14.1.1.1 255.255.255.0 #interface GigabitEthernet0/0/2 ip address 13.1.1.1 255.255.255.0  isis enable 1#ospf 1 router-id 1.1.1.1  area 0.0.0.0   network 12.1.1.1 0.0.0.0   network 14.1.1.1 0.0.0.0   R2：isis 1 is-level level-2 network-entity 49.0001.0000.0000.0002.00 import-route ospf 1 #interface GigabitEthernet0/0/0 ip address 12.1.1.2 255.255.255.0 #interface GigabitEthernet0/0/1 ip address 23.1.1.2 255.255.255.0  isis enable 1#ospf 1 router-id 2.2.2.2  area 0.0.0.0   network 12.1.1.2 0.0.0.0 R3：isis 1 is-level level-2 network-entity 49.0001.0000.0000.0003.00#interface GigabitEthernet0/0/0 ip address 13.1.1.3 255.255.255.0  isis enable 1#interface GigabitEthernet0/0/1 ip address 23.1.1.3 255.255.255.0  isis enable 1  R4： interface GigabitEthernet0/0/0 ip address 14.1.1.4 255.255.255.0 #ospf 1 router-id 4.4.4.4  import-route static area 0.0.0.0   network 14.1.1.4 0.0.0.0 #ip route-static 192.168.1.0 255.255.255.0 NULL0ip route-static 192.168.2.0 255.255.255.0 NULL0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在AR1上tracert192.168.1.1,可以发现环路产生。</p><img src="https://img-blog.csdnimg.cn/72b7a2574a0c454bbfb9b1cbcec4dc2d.png" style="zoom:33%;"><p>产生环路的原因是AR2将OSPF中的192.168.1.0 和2.0外部路由引入ISIS，从而在ISIS中的AR3会学习到这些路由，AR3又会将学习到的路由发送给AR1，这样AR1上就同时拥有了来自OSPF和ISIS的两种不同的路由。而OSPF外部路由优先级为150远大于ISIS的优先级15.所以当去往192.168.1.0和2.0的路由经过AR1后不会直接转发给AR4，而是先发送给AR3，AR3查看路由表后再发送给AR2，AR2又发给AR1，这样环路就产生了。</p><p><img src="https://img-blog.csdnimg.cn/72329a0d36964d7284c8a6d68379fa7b.png"></p><p>3.解决方法</p><blockquote><p>修改优先级，让ISIS的优先级低于外部引入的OSPF优先级，让OSPF加表</p><p>在AR1上修改ospf外部路由优先级为14，高于isis</p></blockquote><pre class="line-numbers language-none"><code class="language-none">R1：ospf 1 router-id 1.1.1.1  preference ase 14 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在AR1上tracert192.18.1.1，可以看到***，因为没有下一条地址。但是环路问题已经解决，查看去往192.168.1.0的路由表，下一条是AR4.    </p><img src="https://img-blog.csdnimg.cn/eb3a371740c544bca107b51bb6a9d7e2.png" style="zoom:50%;"><blockquote><p>通过filter-policy，使得AR1拒绝来自AR3传来的路由条目。</p></blockquote><p>通过前缀列表过滤192.0618.1.0和2.0</p><pre class="line-numbers language-none"><code class="language-none">[AR1]ip ip-prefix XXXX deny 192.168.1.0 24#拒绝192.168.1.0[AR1]ip ip-prefix XXXX deny 192.168.2.0 24#拒绝192.168.2.0[AR1]ip ip-prefix XXXX permit 0.0.0.0 0 less-equal 32#前缀列表默认拒绝所有，所有添加一条规则放行其他不匹配路由<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建filter-policy,现在环路问题已经被解决。</p><pre class="line-numbers language-none"><code class="language-none">[AR1-isis-1]filter-policy ip-prefix XXXX import <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/c38368b2bd814d23bd8b3726caa7ec8f.png"></p>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由引入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp PBR</title>
      <link href="/2022-12-01-shi-yan-ensp-pbr.html"/>
      <url>/2022-12-01-shi-yan-ensp-pbr.html</url>
      
        <content type="html"><![CDATA[<h1 id="PBR"><a href="#PBR" class="headerlink" title="PBR"></a><center>PBR<center></center></center></h1><h2 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h2><p><img src="https://img-blog.csdnimg.cn/d8bb53c79ce34bb5bbaa3a90aa462efb.png"></p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>使用PBR调整路由选路，在缺省情况下PC1、PC2在OSPF的路由计算下前往8.8.8.8的路径都是从AR2走。这样就导致上半段线路压力大，而下半段链路空闲。现在需要强制让PC2访问8.8.8.8，选择从AR3走，而其他路由还是通过路由表进行选路。那么我们需要怎样配置接口PBR策略路由来实现呢？</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><strong>1.实现全网路由互通</strong></p><p>S1：</p><pre class="line-numbers language-none"><code class="language-none">vlan batch 10 20 30#interface Vlanif10 ip address 192.168.1.2 255.255.255.0#interface Vlanif20 ip address 192.168.2.2 255.255.255.0#interface Vlanif30 ip address 192.168.3.1 255.255.255.0#interface GigabitEthernet0/0/1 port link-type access port default vlan 10#interface GigabitEthernet0/0/2 port link-type access port default vlan 20#interface GigabitEthernet0/0/3 port link-type access port default vlan 30#ospf 1  area 0.0.0.0   network 0.0.0.0 255.255.255.255 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>R1:</p><pre class="line-numbers language-none"><code class="language-none">interface GigabitEthernet0/0/0 ip address 192.168.3.2 255.255.255.0 #interface GigabitEthernet0/0/1 ip address 10.0.12.1 255.255.255.0 #interface GigabitEthernet0/0/2 ip address 10.0.13.1 255.255.255.0  ospf cost 1000#ospf 1 router-id 1.1.1.1  area 0.0.0.0   network 0.0.0.0 255.255.255.255 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>R2:</p><pre class="line-numbers language-none"><code class="language-none">interface GigabitEthernet0/0/0 ip address 10.0.12.2 255.255.255.0 #interface GigabitEthernet0/0/1 ip address 10.0.24.2 255.255.255.0 #interface NULL0#ospf 1 router-id 2.2.2.2  area 0.0.0.0   network 0.0.0.0 255.255.255.255 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>R3:</p><pre class="line-numbers language-none"><code class="language-none">interface GigabitEthernet0/0/0 ip address 10.0.13.3 255.255.255.0 #interface GigabitEthernet0/0/1 ip address 10.0.34.3 255.255.255.0 #interface GigabitEthernet0/0/2#interface NULL0#ospf 1 router-id 3.3.3.3  area 0.0.0.0   network 0.0.0.0 255.255.255.255 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>R4:</p><pre class="line-numbers language-none"><code class="language-none">interface GigabitEthernet0/0/0 ip address 10.0.24.4 255.255.255.0 #interface GigabitEthernet0/0/1 ip address 10.0.34.4 255.255.255.0 #interface GigabitEthernet0/0/2#interface NULL0#interface LoopBack0 ip address 8.8.8.8 255.255.255.255 #ospf 1 router-id 4.4.4.4  area 0.0.0.0   network 0.0.0.0 255.255.255.255 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.将R1到R3的OSPF链路COST修改为1000，从而影响路由选路</strong></p><pre class="line-numbers language-none"><code class="language-none">interface GigabitEthernet0/0/2 ospf cost 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>3.配置PBR，使得PC2去往8.8.8.8的路由从R3转发</strong></p><p>ACL</p><pre class="line-numbers language-none"><code class="language-none">acl number 3000   rule 5 permit ip source 192.168.2.0 0.0.0.255 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：这里ACL 3000匹配的是源ip为192.168.2.0的路由，所以不管PC2访问8.8.8.8还是其他网段，在PBR影响下都会强制从R3过。</p><p>这样是有问题的，所以可以将ACL 3000改为</p><pre class="line-numbers language-none"><code class="language-none">acl number 3000   rule permit ip source 192.168.2.0 0.0.0.255 destination 8.8.8.8 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>流分类PC2</p><pre class="line-numbers language-none"><code class="language-none">traffic classifier PC2 operator or#华为设备缺省情况下为or，可以改为and if-match acl 3000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>流行为R3</p><pre class="line-numbers language-none"><code class="language-none">traffic behavior AR3 redirect ip-nexthop 10.0.13.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>流策略PBR</p><pre class="line-numbers language-none"><code class="language-none">traffic policy PBR classifier PC2 behavior AR3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接口调用PBR</p><pre class="line-numbers language-none"><code class="language-none">interface GigabitEthernet0/0/0 traffic-policy PBR inbound #未来当流量进入G0/0/0后，会执行PBR匹配，若匹配上了就按照流行为去执行，若匹配不上，则该PBR对该流量报文无效，报文将继续执行路由表转发规则。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.PC2上tracert 8.8.8.8,可以看见PC2发往8.8.8.8的报文是从R3转发出去的。</p><p><img src="https://img-blog.csdnimg.cn/39e4ccc2b4ad4fec97edadbae68a6dff.png"></p><h6 id="现在让我们思考一下，PC2发往8-8-8-8后，8-8-8-8会选择从那条路径给PC2回包呢？"><a href="#现在让我们思考一下，PC2发往8-8-8-8后，8-8-8-8会选择从那条路径给PC2回包呢？" class="headerlink" title="现在让我们思考一下，PC2发往8.8.8.8后，8.8.8.8会选择从那条路径给PC2回包呢？"></a>现在让我们思考一下，PC2发往8.8.8.8后，8.8.8.8会选择从那条路径给PC2回包呢？</h6><p>在R4上tracertPC2看看，可以看到还是从R3回包的。</p><p><img src="https://img-blog.csdnimg.cn/9e776098545c4cb59e8355ae93c04c47.png"></p><h2 id="实验拓展"><a href="#实验拓展" class="headerlink" title="实验拓展"></a>实验拓展</h2><p>在现实中路由器和路由器之间一般不会直接相连，中间会有像交换机、光猫等设备相连。那么我们来模拟一下实际情况。在R1和R3间加上一台交换机。</p><p><img src="https://img-blog.csdnimg.cn/211245b43d72422c8f709eafd3240d4d.png"></p><p>1.shutdown掉R3的G0/0/0接口</p><pre class="line-numbers language-none"><code class="language-none">[R3-GigabitEthernet0/0/0]shutdown <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.可以看见虽然交换机和R3之间的链路断了，但R1和交换机的链路还是正常的。</p><img src="https://img-blog.csdnimg.cn/3e3772672f6c47daa70ae12b5c29dbbc.png" style="zoom:67%;"><p>现在PC2上tracert8.8.8.8看看。</p><p><strong>发现PC2访问8.8.8.8还是走的R3，那么现在就出现了路由黑洞。</strong></p><p><img src="https://img-blog.csdnimg.cn/1406806912e645738d91bd57e30cadfa.png"></p><h2 id="有什么解决方法呢？"><a href="#有什么解决方法呢？" class="headerlink" title="有什么解决方法呢？"></a>有什么解决方法呢？</h2><p>先让我们分析一下，现在R3与交换机之间的链路已经断开了，但是PC2依旧还是通过PBR规则向R3转发流量。我们需要的就是在PC2执行PBR规则时能够检测链路的连通性。</p><p>解决方法：在流行为上挂载NQA链路检测，检测链路到达R3的10.0.13.3连通性。</p><p>1.NQA配置</p><p>R1：</p><pre class="line-numbers language-none"><code class="language-none">[R1]nqa test-instance test icmp#创建一个叫test基于ICMP的NQA检测[R1-nqa-test-icmp]test-type icmp#检测类型icmp[R1-nqa-test-icmp]destination-address ipv4 10.0.13.3#检测目的ipv4地址[R1-nqa-test-icmp]frequency 3#检测间隔3s[R1-nqa-test-icmp]start now <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在PBR流行为上挂载NQA</p><pre class="line-numbers language-none"><code class="language-none">[R1-behavior-R3]traffic behavior AR3[R1-behavior-AR3]redirect ip-nexthop 10.0.13.3 track nqa test icmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.现在tracert，可以看见PC2已经从R2走了。</p><p><img src="https://img-blog.csdnimg.cn/0b5f1745441444c2807a7525d6e27c39.png"></p><h1 id="本地始发PBR"><a href="#本地始发PBR" class="headerlink" title="本地始发PBR"></a>本地始发PBR</h1><p>上面的实验我们配的是一个接口PBR，是在R1的g0/0/0口是上配置的。</p><p>现在我们尝试配置一个本地始发的PBR</p><p>1.ACL2000，匹配R1上的环回地址1.1.1.1</p><pre class="line-numbers language-none"><code class="language-none">[R1]acl 2000[R1-acl-basic-2000]rule permit source 1.1.1.1 0.0.0.0#匹配R1上的1.1.1.1为源IP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.在R1上配置PBR</p><pre class="line-numbers language-none"><code class="language-none">[R1]policy-based-route PBR-2 permit node 10[R1-policy-based-route-PBR-2-10]if-match acl 2000#匹配ACL2000[R1-policy-based-route-PBR-2-10]apply ip-address next-hop 10.0.13.3#强制下一条ip为10.0.13.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.在R1上挂载本地始发的PBR</p><pre class="line-numbers language-none"><code class="language-none">[R1]ip local policy-based-route PBR-2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.现在本地始发的PBR-2就实现了，我们在R1上尝试tracert -a 1.1.1.1 8.8.8.8，可以看见走的是10.0.13.3。</p><p><img src="https://img-blog.csdnimg.cn/76251d208a7d4280adf20c356c4bbf55.png"></p><p>5.但是当我们把PBR-2删除后，1.1.1.1到8.8.8.8的选路就会变成从R2走。因为R2的cost小。</p>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PBR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 21-Route-Policy、Filter-Policy、ip-prefix</title>
      <link href="/2022-11-26-shu-tong-21-route-policy-filter-policy-ip-prefix.html"/>
      <url>/2022-11-26-shu-tong-21-route-policy-filter-policy-ip-prefix.html</url>
      
        <content type="html"><![CDATA[<h1 id="Route-Policy、Filter-Policy、ip-prefix"><a href="#Route-Policy、Filter-Policy、ip-prefix" class="headerlink" title="Route-Policy、Filter-Policy、ip-prefix"></a><center>Route-Policy、Filter-Policy、ip-prefix</center></h1><h2 id="工具类型"><a href="#工具类型" class="headerlink" title="工具类型"></a>工具类型</h2><p><strong>调用工具</strong>——过滤策略、路由引入（调用工具可以调用策略工具和条件工具）</p><p><strong>策略工具</strong>——路由策略（策略工具可以调用条件工具）</p><p><strong>条件工具</strong>——前缀列表、A    C    L</p><p>路由筛选工具有两个一个route-policy，另一个是filter-policy，首先路由策略一般用在路由重分布当中，而过滤策略一般使用在路由间的消息传递之间，比如我要限制其他路由器传播路由信息到本机路由器上，又或是限制本机路由器传播路由信息到其他的路由器上。</p><h2 id="路由策略（Route-Policy）"><a href="#路由策略（Route-Policy）" class="headerlink" title="路由策略（Route-Policy）"></a>路由策略（Route-Policy）</h2><p>Route—policy（路由策略）：既能够匹配路由信息，也能够对路由的某些属性做出修改。</p><h4 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h4><ol><li><p>常用于路由引入时进行过滤或者对路由的属性进行修改。</p></li><li><p>BGP协议实施策略最主要的工具。</p></li><li><p>可以作为filter-policy的匹配条件。</p></li></ol><h4 id="Route-Policy配置命令："><a href="#Route-Policy配置命令：" class="headerlink" title="Route-Policy配置命令："></a>Route-Policy配置命令：</h4><blockquote><p><strong>route-policy</strong>  <em>[route-policy-name]</em>  {<strong>permit</strong>|<strong>deny</strong>}  <strong>node</strong>  <em>[node]</em></p><p><strong>if-match</strong> <em>[匹配条件]</em>    acl 、ip-prefix…</p><p><strong>apply</strong> <em>[执行动作]</em>   cost、tag、preference…</p></blockquote><h4 id="Route-Policy的组成部分："><a href="#Route-Policy的组成部分：" class="headerlink" title="Route-Policy的组成部分："></a>Route-Policy的组成部分：</h4><ol><li><p>名字(route-policy-name)：用于标识唯一的一个route—policy。</p></li><li><p>匹配模式(<strong>permit</strong>|<strong>deny</strong>)：</p><p>​        permit：当路由匹配permit的节点，将会被允许，并且将会执行apply语句。</p><p>​        deny：当路由匹配deny的节点，将会被拒绝，不执行apply语句。</p></li><li><p>节点号:一个route-policy由多个节点号进行组成，每个节点叫做一个node，配置route-policy的时候 必须携带节点号，执行策略的时候按照节点号大小，从小到大依次进行。</p></li><li><p>匹配语句：if—match，用于定义一些条件，满足条件即代表匹配。一个node中可以定义多个if—match语句，多个if—match语句之间是逻辑“与”的关系，代表都需要满足；一个node里也可以不配置if—match语句，如果不匹配，则代表匹配所有。</p></li><li><p>执行语句：apply用于执行某个动作，设备按照apply语句的动作对路由信息进行修改，一个node可以存在多个apply语句，如果存在多个，则都执行修改，也可以不存在apply语句，如果不存在apply语句，只代表匹配，而不修改属性。</p></li></ol><blockquote><p>＠多个node之间是逻辑“或”的关系，即路由匹配那个node，就会执行该node的apply动作。</p><p>＠顺序匹配：当路由满足多个node的时候，按照node号从小到大依次进行匹配。</p><p>＠唯一匹配：当路由匹配一个node之后，不会向下再次匹配。</p><p>＠默认拒绝；当路由不满足任何node之后，将会被拒绝。</p></blockquote><p>当使用路由策略修改指定路由属性后，其他路由因为不满足任何node将会被拒绝，所以需要再添加一条node保证其他不匹配路由的正常使用。</p><p>route-policy name permit node 2，没有if-match和apply，其他属性默认即可</p><p>type 2      cost 1    tag  1（默认）</p><h6 id="使用if-match添加条件，我们可以看到其中就包括了ACL、ip-prefix等，这也说明了策略工具可以调用条件工具实现路由过滤。"><a href="#使用if-match添加条件，我们可以看到其中就包括了ACL、ip-prefix等，这也说明了策略工具可以调用条件工具实现路由过滤。" class="headerlink" title="使用if-match添加条件，我们可以看到其中就包括了ACL、ip-prefix等，这也说明了策略工具可以调用条件工具实现路由过滤。"></a>使用if-match添加条件，我们可以看到其中就包括了ACL、ip-prefix等，这也说明了策略工具可以调用条件工具实现路由过滤。</h6><img src="https://img-blog.csdnimg.cn/65c6eb39970c4d65bf17a5a0f063fc53.png" style="zoom: 80%;"><h2 id="前缀列表（ip-prefix）"><a href="#前缀列表（ip-prefix）" class="headerlink" title="前缀列表（ip-prefix）"></a>前缀列表（ip-prefix）</h2><h4 id="ACL和前缀列表的区别"><a href="#ACL和前缀列表的区别" class="headerlink" title="ACL和前缀列表的区别"></a>ACL和前缀列表的区别</h4><p>ACL的局限性体现在，ACL只能抓取路由的前缀，没有办法匹配路由的掩码信息。如果有两条路由前缀相同，使用ACL没有办法实现精确的过滤。</p><p>前缀列表的优势在于既能够匹配路由的前缀信息，也能够匹配路由的掩码信息。</p><p><font color="red"><strong>注意：前缀列表不能用于流量过滤。</strong></font></p><h4 id="前缀列表的组成："><a href="#前缀列表的组成：" class="headerlink" title="前缀列表的组成："></a>前缀列表的组成：</h4><ol><li>name：名字，用于标识一条唯一的前缀列表。</li><li>index：索引号，与ACL的rule编号类似，匹配顺序为从小到大依次匹配。（默认步长为10） </li><li>permit／deny：行为，允许或者拒绝。</li><li>lenght：长度，即用于定义网络前缀的长度。 </li><li>Ge：大于等于的意思。</li><li>Le：小于等于的意思。</li></ol><p>注意：配置前缀列表需要满足Lenght≤Ge≤Le. </p><h4 id="前缀列表的使用："><a href="#前缀列表的使用：" class="headerlink" title="前缀列表的使用："></a>前缀列表的使用：</h4><hr><p>ip ip-prefix test permit 192.168.1.0 24                         匹配单条路由 </p><hr><p>ip ip-prefix test permit 192.168.1.0 24 ge 25              前24bit固定，匹配掩码在25～32之间的路由</p><hr><p>ip ip-prefix test permit 192.168.1.0 24 le 32                前24bit固定，匹配掩码在24～32之间的路由 </p><hr><p>ip ip-prefix test permit 192.168.1.0 24 ge 26 le 30     前24bit固定，匹配掩码在26～30之间的路由</p><hr><p>ip ip-prefix test permit 0.0.0.0 0                                    匹配默认路由 </p><hr><p>ip ip-prefix test permit 0.0.0.0 0 le 32                           匹配所有路由</p><hr><p>ip ip-prefix test permit 0.0.0.0 0 ge 32                           匹配所有主机路由 </p><hr><p>ip ip-prefix test permit 0.0.0.0 0 ge 24 le 24                 匹配所有掩码等于24位的路由。 </p><hr>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由策略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISIS为啥支持DIS的抢占？</title>
      <link href="/2022-11-21-isis-wei-sha-zhi-chi-dis-de-qiang-zhan.html"/>
      <url>/2022-11-21-isis-wei-sha-zhi-chi-dis-de-qiang-zhan.html</url>
      
        <content type="html"><![CDATA[<h1 id="ISIS里面DIs为什么支持抢占？DR不支持？"><a href="#ISIS里面DIs为什么支持抢占？DR不支持？" class="headerlink" title="ISIS里面DIs为什么支持抢占？DR不支持？"></a>ISIS里面DIs为什么支持抢占？DR不支持？</h1><p>邻居状态角度：</p><p>1、 OSPF Drother之间只有2—way的邻居关系，一旦DR支持被强占，邻居状态将发生大幅度震荡。</p><p>2、ISIS DIS和所有的路由器都是UP的邻居关系，DIS一旦被强占，不会发生邻居关系的震荡。</p><p>算法角度：</p><p>1、OSPF DR产生2类LSA描述MA网络的拓扑和路由信息，如果DR支持被强占，将为算法带来不稳定的现象。</p><p>2、ISIS DIS产生伪节点描述MA网络的拓扑，如果DIS支持被强占，将为算法带来不稳定的现象。</p><p>路由交互角度：</p><p>1、ISIS相对于OSPF在路由交互方面没有这么复杂。</p><p>2、ISIS运行在数据链路层，不受上层协议影响。而OSPF直接运行在IP协议上，有IPv4和V6等较多不稳定因素。同样在设备割接方面没有ISIS那么平滑，这也是网络运营商在骨干网运行ISIS的原因之一。</p><h1 id="为啥OSPF邻居建立要求网段和掩码一致，而ISIS邻居建立只要求网段一致，不要求掩码一致？"><a href="#为啥OSPF邻居建立要求网段和掩码一致，而ISIS邻居建立只要求网段一致，不要求掩码一致？" class="headerlink" title="为啥OSPF邻居建立要求网段和掩码一致，而ISIS邻居建立只要求网段一致，不要求掩码一致？"></a>为啥OSPF邻居建立要求网段和掩码一致，而ISIS邻居建立只要求网段一致，不要求掩码一致？</h1><p>判断是否在同一个网段的关键在于收到对方的Hello报文，查看对方接口IP地址，是否在本端收包接口的子网范围内。</p><p><img src="https://img-blog.csdnimg.cn/475898c5dcba4d05baf0afde5351eece.png"></p><blockquote><p>在ISIS同一个广播网内，路由器设置相同网段、掩码不同的IP地址。</p><p>查看每台路由器的LSDB对其自身接口网段的描述，再查看与这三台路由器相连的R1LSDB下，存在这三台路由器不同掩码的路由信息</p></blockquote><p><img src="https://img-blog.csdnimg.cn/1ab13cc86ee647028c8b0c7f74bfef7d.png"></p><p>原因：ISIS的LSP信息是由网络中每台实节点设备单独发出的，故不受掩码影响。而OSPF中的LSDB由DR产生，会受到掩码不一致的影响。</p><h1 id="骨干区域如何访问非骨干区域？"><a href="#骨干区域如何访问非骨干区域？" class="headerlink" title="骨干区域如何访问非骨干区域？"></a>骨干区域如何访问非骨干区域？</h1><p>L1/2的路由器会将L1的路由当做叶子信息放入L2的LSP中注入骨干区域，骨干区域的路由器收到这一LSP，会将该路由当做L1/2路由器的叶子信息。</p><h1 id="非骨干区域如何访问骨干区域呢？"><a href="#非骨干区域如何访问骨干区域呢？" class="headerlink" title="非骨干区域如何访问骨干区域呢？"></a>非骨干区域如何访问骨干区域呢？</h1><p>非骨干区域内部的路由器，通过缺省路由访问骨干区域。</p><h1 id="非骨干区域的缺省如何产生呢？"><a href="#非骨干区域的缺省如何产生呢？" class="headerlink" title="非骨干区域的缺省如何产生呢？"></a>非骨干区域的缺省如何产生呢？</h1><p>由L1／2的路由器，在产生的L1的LSP中，将ATT BIT置位为1．此时只建立L1邻居的路由器，将会根据ATT bit置1的LSP，自身产生条指向该路由器的缺省路由。</p><p>ATT（骨干区域连接符）：用于表明L1／2的路由器与骨干区域连接着，用于指导非骨干区域访问骨干区域。</p><p>ATT BIT的特点：</p><blockquote><p>＠L1／2的路由器，至少存在一个不再相同区域的L2的邻居，Att bit才会置1．</p><p>＠ATTbit只在L1的LSP中才会置1．</p><p>＠如果在骨干区域没有L2的邻居，将不会产生ATT bit置1，此ATT bit也不具备指导报文访问骨干区域。</p></blockquote><p>缺省路由的特点：</p><blockquote><p>＠L1的路由器可以通过ATT置1发现本区域的L1／2的路由器存在。</p><p>＠缺省路由是L1的路由器自己产生，而不是L1／2的路由器通告给L1的路由。</p><p>＠缺省路由的下一跳地址，是自身去往该LSP产生者最短路径的下一跳。</p><p>＠缺省路由的Cost值，是自身去往该LSP产生着的最短路径树的cost。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/3ba18ccd30604e2e8c7277b0ee450b54.png"></p><p>注意：L1/2路由器默认开启attached-bit avoid-learning,目的是为了防止环路的产生。</p><p>如果出现L1/2路由器在骨干区域没有L2的邻居，Att比特位就无法置1，L1/2路由器就会取消该命令自动生成一条缺省到达最近的Att为1的路由器路由。</p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ISIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp IS-IS基础配置</title>
      <link href="/2022-11-21-shi-yan-ensp-is-is-ji-chu-pei-zhi.html"/>
      <url>/2022-11-21-shi-yan-ensp-is-is-ji-chu-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<h1 id="IS-IS基础配置"><a href="#IS-IS基础配置" class="headerlink" title="IS-IS基础配置"></a><center>IS-IS基础配置</center></h1><h2 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h2><p><img src="https://img-blog.csdnimg.cn/5ccfe10aed564fe19596450718cd319e.png"></p><table><thead><tr><th align="center">设备名</th><th align="center">区域号</th><th align="center">路由器等级</th></tr></thead><tbody><tr><td align="center">R1</td><td align="center">49.0123</td><td align="center">L1/L2</td></tr><tr><td align="center">R2</td><td align="center">49.0123</td><td align="center">L1/L2</td></tr><tr><td align="center">R3</td><td align="center">49.0123</td><td align="center">L1</td></tr><tr><td align="center">R4</td><td align="center">49.0045</td><td align="center">L2</td></tr><tr><td align="center">R5</td><td align="center">49.0045</td><td align="center">L2</td></tr></tbody></table><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>R1：</p><pre class="line-numbers language-none"><code class="language-none">[R1]isis 1#1为isis进程号[R1-isis-1]network-entity 49.0123.0000.0000.0001.00#配置NET地址[R1-isis-1]is-name R1#设置R1为动态主机名，没有配置动态主机名时，相应的位置就是系统ID[R1-isis-1]is-level level-1-2#华为路由器在启用isis时默认为level-1-2，故该条命令可以不配[R1]int GigabitEthernet 0/0/0[R1-GigabitEthernet0/0/0]ip address 10.1.13.1 255.255.255.0 [R1-GigabitEthernet0/0/0]isis enable 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>R2、R3、R4、R5配置命令与R1大致相同，这里不做展示。</p><p>使用<code>display isis peer</code>,查看邻居关系的建立情况，这里以R3为例。</p><p><img src="https://img-blog.csdnimg.cn/3dc90c48284e4af0a0339c733b8006db.png" alt="img"></p><blockquote><p>R3与相邻路由器ISIS邻居关系建立成功，由于R3作为L1路由器存在网络中，故与R1\R2建立L1邻接关系。</p></blockquote><p>使用<code>display isis lsdb</code>,查看设备LSDB。</p><p>R3:</p><p><img src="https://img-blog.csdnimg.cn/b2217571646743ea87970fb21a6445ba.png" alt="img"></p><blockquote><p>LSPID由system ID（6字节）、伪节点ID（1字节）、分片号（1字节）<br>   <code>系统ID--XX-YY</code><br>       <font color="red"><strong>XX标志为节点LSP，XX=00表示为实节点，XX不为零表示为伪节点，具体数值为伪节点所在的实节点路由器的端口ID</strong></font></p><p>由上图可以看出Level-1的LSPID 为R3.01.00*的LSP,这就是Level-1 PSN LSP，同时说明R3为L1的DIS。 *号代表这是由本设备自身发出的LSP。</p><p>Seq Num：0x00000022，数字越大越新，Sequence Num更新的时候+1。</p><p>Checksum（校验和）：0x69ff，如果校验和不通过该LSP将会失效。</p><p>Holdtime（幸存时间）：ISIS Age与OSPF相反，Age初始1200秒，并递减。为0时LSP失效。</p><p>Length：LSP长度</p><p><strong>ATT：当L1\L2路由器在连接L1区域时，它自己产生的L1-LSP的ATT比特位置1。</strong></p><p><strong>OL：过载位，一般ISIS设备产生的LSP中该比特位置0，如果该比特位置1，说明自己已经过载。</strong>其他收到该LSP的ISIS设备在进行路由计算时，只会计算到达该LSP始发设备的直连路由，而不会计算穿越该设备、到达远端目的网段的路由。</p></blockquote><p>R4:</p><p><img src="https://img-blog.csdnimg.cn/af8870aa6b494e008378217b053fcc3b.png"></p><blockquote><p>上图对伪节点比特位的解释是有问题的，这里进行修改。01、02、03只是广播网不同伪节点的编号。伪节点标识是为了将自己在不同链路上的伪节点进行区分。</p><p>在一个广播链路下只能有一个DIS。</p></blockquote><h4 id="笔记写到这里，为了防止以后回顾时忘记DIS是什么，这里先复习一下ISIS的DIS选举规则。"><a href="#笔记写到这里，为了防止以后回顾时忘记DIS是什么，这里先复习一下ISIS的DIS选举规则。" class="headerlink" title="笔记写到这里，为了防止以后回顾时忘记DIS是什么，这里先复习一下ISIS的DIS选举规则。"></a><font color="red"><strong>笔记写到这里，为了防止以后回顾时忘记DIS是什么，这里先复习一下ISIS的DIS选举规则。</strong></font></h4><p>ISIS  DIS选举规则：</p><blockquote><ol><li>Level-1和Level-2的DIS是分别选举的，用户可以为不同级别的DIS选举设置不同的优先级。DIS优先级数值最大的被选为DIS。如果优先级数值最大的路由器有多台，则其中MAC地址最大的路由器会被选中。不同级别的DIS可以是同一台路由器，也可以是不同的路由器。</li><li>与OSPF的不同点：<br> a)   优先级为0的路由器也参与DIS的选举；<br> b)   当有新的路由器加入，并符合成为DIS的条件时，这个路由器会被选中成为新的DIS，原有的伪节点被删除。此更改会引起一组新的LSP泛洪。</li></ol></blockquote><h6 id="修改DIS优先级来控制DIS选举结果"><a href="#修改DIS优先级来控制DIS选举结果" class="headerlink" title="修改DIS优先级来控制DIS选举结果"></a>修改DIS优先级来控制DIS选举结果</h6><pre class="line-numbers language-none"><code class="language-none">[R2-GigabitEthernet0/0/0]isis dis-priority 127 level-2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在R2上使用命令<code>display isis interface g0/0/0 verbose</code>查看G0/0/0接口的ISIS协议详细信息。</p><p><img src="https://img-blog.csdnimg.cn/db948583c94442758da99d4d5904668c.png"></p><blockquote><p>可以看到，R2的G0/0/0接口的Level-2DIS优先级的值已经改为了127，Level-1 DIS还是64，接口属性也变为NO/Yes.说明R2现在是Level-2 DIS。<br>他与OSPF协议不同，DIS优先级修改之后，优先级更高的路由器会迅速抢占DIS的角色。</p></blockquote><h6 id="注意：华为设备DIS优先级缺省情况下为64"><a href="#注意：华为设备DIS优先级缺省情况下为64" class="headerlink" title="注意：华为设备DIS优先级缺省情况下为64"></a>注意：华为设备DIS优先级缺省情况下为64</h6><p>使用<code>dis isis interfacce verbose</code>，查看详细接口信息</p><p><img src="https://img-blog.csdnimg.cn/a77add1a4bae422c8eedd456def86c7e.png"></p><h6 id="ISIS协议会将广播网络本身抽象成伪节点，伪节点不实际存在，是一个逻辑概念，广播型网络中路由器都认为自己和伪节点存在邻接关系，并通过产生相应的LSP来描述自己和这个伪节点之间的链路状态。广播型网络中的DIS充当了伪节点角色并代伪节点的职责；DIS会代替抽象的伪节点产生PSN-LSP（伪节点LSP），用来描述那些路由器与伪节点相连。PSN-LSP和OSPF的Type-2-LSA很相似。"><a href="#ISIS协议会将广播网络本身抽象成伪节点，伪节点不实际存在，是一个逻辑概念，广播型网络中路由器都认为自己和伪节点存在邻接关系，并通过产生相应的LSP来描述自己和这个伪节点之间的链路状态。广播型网络中的DIS充当了伪节点角色并代伪节点的职责；DIS会代替抽象的伪节点产生PSN-LSP（伪节点LSP），用来描述那些路由器与伪节点相连。PSN-LSP和OSPF的Type-2-LSA很相似。" class="headerlink" title="ISIS协议会将广播网络本身抽象成伪节点，伪节点不实际存在，是一个逻辑概念，广播型网络中路由器都认为自己和伪节点存在邻接关系，并通过产生相应的LSP来描述自己和这个伪节点之间的链路状态。广播型网络中的DIS充当了伪节点角色并代伪节点的职责；DIS会代替抽象的伪节点产生PSN LSP（伪节点LSP），用来描述那些路由器与伪节点相连。PSN LSP和OSPF的Type-2 LSA很相似。"></a>ISIS协议会将广播网络本身抽象成伪节点，伪节点不实际存在，是一个逻辑概念，广播型网络中路由器都认为自己和伪节点存在邻接关系，并通过产生相应的LSP来描述自己和这个伪节点之间的链路状态。广播型网络中的DIS充当了伪节点角色并代伪节点的职责；DIS会代替抽象的伪节点产生PSN LSP（伪节点LSP），用来描述那些路由器与伪节点相连。PSN LSP和OSPF的Type-2 LSA很相似。</h6><p>使用<code>display isis lsdb is-name R4 verbose</code>，查看R4生成的LSP详细信息。</p><p><img src="https://img-blog.csdnimg.cn/ea79cc909bfe478483e09aa906c6ebbc.png"></p><h6 id="上面图中描述的是广播网络的lsdb详细信息，下图是P2p网络的LSDB详细信息。可以看出P2P网络设备的伪节点标识符一定是00，因为P2P网络没有DIS。"><a href="#上面图中描述的是广播网络的lsdb详细信息，下图是P2p网络的LSDB详细信息。可以看出P2P网络设备的伪节点标识符一定是00，因为P2P网络没有DIS。" class="headerlink" title="上面图中描述的是广播网络的lsdb详细信息，下图是P2p网络的LSDB详细信息。可以看出P2P网络设备的伪节点标识符一定是00，因为P2P网络没有DIS。"></a>上面图中描述的是广播网络的lsdb详细信息，下图是P2p网络的LSDB详细信息。可以看出P2P网络设备的伪节点标识符一定是00，因为P2P网络没有DIS。</h6><p>伪节点LSDB只描述拓扑信息，实节点LSDB中有路由信息（网络号和掩码）</p><p><img src="https://img-blog.csdnimg.cn/18ef25d5f8eb4790a742a8ab99edad06.png"></p><p>在本网络中R5既不是L1的DIS，也不是L2的DIS，查看R5的详细LSP信息。</p><p>可以看见，在R5上只描述了自己以及与伪节点R4.03的关系。</p><p><img src="C:\Users\Okra\AppData\Roaming\Typora\typora-user-images\image-20221121215905653.png" alt="image-20221121215905653"></p><h2 id="ISIS路由渗透"><a href="#ISIS路由渗透" class="headerlink" title="ISIS路由渗透"></a>ISIS路由渗透</h2><p>在上面的实验中，R3是无法通过ISIS学习到R5上5.5.5.5/24的路由的，因为Level-1-2路由器R1及R2并不会在它们向Area49.0123下发的L1-LSP中描述关于该网段的可达信息。</p><p>即便如此R3也可以访问5.5.5.5/24路由，当其转发到达5.5.5.5的报文时哦，将使用路由表中的ISIS默认路由。</p><p>我们也可以使用路由渗透，将Level-2中的路由信息渗透到Level-1中，使得Level-1中的设备学习到5.5.5.5/24的路由。</p><p>R1：</p><pre class="line-numbers language-none"><code class="language-none">[R1]isis 1[R1-isis-1]import-route isis level-2 into level-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在R1上完成上述配置，R1会将Level-2的路由引入Level-1区域。</p><p><img src="https://img-blog.csdnimg.cn/8cef4fd98dfd471090f44d291f335d15.png"></p><p>如果我们只希望引入5.5.5.5，不包括10.1.45.0/24的路由。那我们可以将5.5.5.5/24放入ip前缀列表<code>ip-prefix</code>，使用过滤策略<code>filter-policy</code>对路由进行过滤，具体命令如下</p><pre class="line-numbers language-none"><code class="language-none">[R1]ip ip-prefix 1 permit 5.5.5.5 24[R1]isis 1[R1-isis-1]import-route isis level-2 into level-1 filter-policy ip-prefix 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IS-IS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 20-IS-IS</title>
      <link href="/2022-11-18-shu-tong-20-is-is.html"/>
      <url>/2022-11-18-shu-tong-20-is-is.html</url>
      
        <content type="html"><![CDATA[<h1 id="IS-IS"><a href="#IS-IS" class="headerlink" title="IS-IS"></a><center>IS-IS</center></h1><h2 id="IS-IS基本概念"><a href="#IS-IS基本概念" class="headerlink" title="IS-IS基本概念"></a>IS-IS基本概念</h2><h3 id="IS-IS概述"><a href="#IS-IS概述" class="headerlink" title="IS-IS概述"></a>IS-IS概述</h3><p>IS-IS最初是由ISO为它的无连接网络协议设计的一种动态路由协议。IETF对IS-IS进行了扩充和修改，使它能够同时应用在TCP/IP和OSI环境中，称为集成化IS-IS。IS-IS属于IGP，是一种链路状态型路由协议，使用SPF算法进行路由计算。</p><p>IS-IS协议可支持大中型网络，路由收敛速度快，可以作为除了OSPF协议外的另一选择。网络运营商一般会采用IS-IS作为其网络的IGP路由协议，主要因为集成IS-IS能够同时支持CLNP和IP，易于从早期的OSI网络平滑过渡到IP网络。</p><h3 id="OSI和TCP-IP"><a href="#OSI和TCP-IP" class="headerlink" title="OSI和TCP/IP"></a>OSI和TCP/IP</h3><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/01.PNG" alt="OSI和TCP/IP参考模型"></p><blockquote><ul><li>CLNP（Connectionless Network Protocol，无连接网络协议）：OSI中的网络层协议， 类似于TCP／IP协议的IP协议。</li><li>CLNS（Connectionless Network Service，无连接网络服务）：类似于IP所提供的“尽 力而为”的服务，OSI就是通过CLNP来完成CLNS的。</li><li>NPDU（Network Protocol Data Unit，网络协议数据单元）：是OSI中的网络层协议 报文，相当于TCP／IP中的IP报文。</li><li>NSAP（Network Service Access Point，网络服务接入点）：即OSI中网络层的地址， 用来标识一个抽象的网络服务访问点，描述OSI模型的网络地址结构。</li></ul></blockquote><h3 id="IS-IS基本术语"><a href="#IS-IS基本术语" class="headerlink" title="IS-IS基本术语"></a>IS-IS基本术语</h3><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/02.PNG"></p><blockquote><ul><li>IS（Intermediate System，中间系统）：相当于TCP／IP中的路由器，是IS-IS协议中 生成路由和传播路由信息的基本单元。</li><li>ES（End System，终端系统）：相当于TCP／IP中的主机系统。ES不参与IS-IS路由 协议的处理，ISO使用专门的ES—IS协议定义终端系统与中间系统间的通信。</li><li>RD（Routing Domain，路由域）：在一个路由域中多个IS通过相同的路由协议来交换路由信息。</li><li>Area（区域）：路由域的细分单元，类似于OSPF，IS—IS允许将整个路由域划分为多个区域</li><li>ES-IS （End System to Intermediate System Routing Exchange Protocol，终端系统 到中间系统路由选择交换协议）：负责ES与IS之间的通信。</li></ul></blockquote><p>在路由域中，路由器与终端系统间使用ES—IS协议来进行主机和网关发现；而路由器之间使用IS—IS来进行邻居关系建立及路由信息交换。</p><p>在ES-IS中，ES通过发送ESH（End System Hello）来告诉IS自己的存在，同时IS通过监听ESH来确定本网段是否存在ES；IS通过发送ISH （Intermediate System Hello）来通知ES自己的存在。ES通过监听ISH确定网络中存在的IS，并选择其中一个IS作为自己的网关。如果ES要发送报文到另外一个ES，需要先把报文发送给网关IS，IS再负责报文转发。</p><p>在IS-IS中，路由器间通过IIH（IS-to-IS Hello PDUs）来建立邻居关系。每一个IS都会生成LSPDU（Link State Protocol Data Unit，链路状态协议数据单元，简称LSP），此LSP包含了本IS的所有链路状态信息。通过在IS—IS邻居间交换LSP，网络中的每一个IS都生成LSDB（Link State DataBase，链路状态数据库），且所有IS的LSDB中所包含的链路状态 信息都是相同的。</p><h3 id="IS-IS分层网络"><a href="#IS-IS分层网络" class="headerlink" title="IS-IS分层网络"></a>IS-IS分层网络</h3><h4 id="OSI路由分级"><a href="#OSI路由分级" class="headerlink" title="OSI路由分级"></a>OSI路由分级</h4><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/03.PNG"></p><p>OSI给路由定义了4个路由级别，分别从Level—0到Level—3。</p><ul><li>Level-0路由</li></ul><blockquote><p>Level-0路由存在于ES和IS之间，由ES-IS来完成。在ES发现最近的IS后，主要完成的任务有，确定相连的区域地址、在ES和IS之间建立邻居以及完成网络地址到数据链路层地址的转换。</p></blockquote><ul><li>Level-1路由</li></ul><blockquote><p>Level-1路由存在于同一区域内的不同IS间，所以又称为区域内路由。当IS要发送报文到另外一个IS时，查看报文中的目的地址，发现其位于区域内的不同子网，则IS会选择最优的路径进行转发；如果目的地址不在同一区域，则IS把数据转发到本区域内最近的Level-1-2路由器上，然后由Level-1-2路由器负责数据转发。</p></blockquote><ul><li>Level-2路由</li></ul><blockquote><p>Level-2路由存在于同一路由域内的区域间，所以又称为区域间路由。当目的地位于不同区域时，IS发送报文到最近的一个Level-2 IS，由Level-2 IS负责将其转发到另一个区域。</p></blockquote><ul><li>Level-3路由</li></ul><blockquote><p>Level-3路由存在于路由域间。每个路由域就相当于一个自治系统，彼此间通过IDRP（Interdomain Routing Protocol，域间路由协议）相连接。</p></blockquote><h4 id="IS-IS路由器角色"><a href="#IS-IS路由器角色" class="headerlink" title="IS-IS路由器角色"></a>IS-IS路由器角色</h4><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/04.PNG"></p><p>IS-IS协议涉及到Level-1和Level-2路由。为了支持大规模网络的路由，IS-IS在路由域内采用两级的分层结构，一个大的路由域通常被分成多个区域，区域内的路由通过Level-1路由器管理，区域间的路由通过Level-2路由器管理。</p><ul><li>Level-1路由器</li></ul><blockquote><p>Level-1路由器负责区域内的路由，它只维护一个Level-1的LSDB，该LSDB包含本区域的路由信息，到区域外的报文转发给最近的Level-1-2路由器。</p></blockquote><ul><li>Level-2路由器</li></ul><blockquote><p>Level-2路由器负责区域间的路由，它维护一个Level-2的LSDB，该LSDB包含区域间的路由信息。所有Level-2路由器和Level-1-2路由器组成路由域的骨干网，负责在不同区域间通信，骨干网必须是物理连续的。</p></blockquote><ul><li>Level-1-2路由器</li></ul><blockquote><p>同时属于Level-1和Level-2的路由器称为Level-1-2路由器，Level-1-2路由器维护两个LSDB，Level-1的LSDB用于区域内路由，Level-2的LSDB用于区域间路由。</p></blockquote><h4 id="集成化IS-IS分层网络"><a href="#集成化IS-IS分层网络" class="headerlink" title="集成化IS-IS分层网络"></a>集成化IS-IS分层网络</h4><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/05.PNG"></p><p>集成化IS—IS可以支持以下3种形式的路由域：</p><ul><li><p>纯OSI </p></li><li><p>纯IP</p></li><li><p>IP和OSI的混合</p></li></ul><blockquote><p>在IP网络中，集成化IS—IS仍然使用CLNS的方式构造报文，建立IS-IS邻居关系，进行IP可达信息的传递等等。</p><p>在IP网络中，主机与路由器之间不运行ES-IS，取而代之以ICMP、ARP、DHCP等。Level-0路由的作用由ARP等协议取代，主机和路由器之间通过ARP地址解析协议完成网络地址到链路层地址的转换。Level-3路由的作用由BGP路由协议取代，不同自治系统之间的路由学习由BGP路由协议完成。</p></blockquote><p>由于目前的主流网络都运行了TCP／IP协议，所以通常在这些网络中运行的是集成化IS-IS。</p><h3 id="IS-IS与OSPF的比较"><a href="#IS-IS与OSPF的比较" class="headerlink" title="IS-IS与OSPF的比较"></a>IS-IS与OSPF的比较</h3><h4 id="区域设计比较"><a href="#区域设计比较" class="headerlink" title="区域设计比较"></a>区域设计比较</h4><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/06.PNG"></p><p>IS-IS与OSPF都采用两级的分层结构，将自治系统划分出不同的区域，但它们之间还是有区别的。</p><ul><li>区域边界不同</li></ul><blockquote><p>在OSPF中，区域的分界点在路由器上，一个路由器的不同接口可属于不同区域；用来连接骨干区域和非骨干区域的路由器称为ABR（Area Border Router，区域边界路由器）。<br>而在集成化IS-IS中，区域的分界点在链路上，一个路由器只能属于一个区域；没有ABR的概念。</p></blockquote><ul><li>骨干区域不同</li></ul><blockquote><p>在OSPF中，只有Area0是骨干区域，其它区域均为非骨干区域，所有非骨干区域必须直接连接到骨干区域；骨干区域必须是连续的。<br>而在集成化IS-IS中，并没有规定哪个区域是骨干区域。所有Level-2路由器和Level-1-2路由器构成了IS-IS的骨干网，他们可以属于不同的区域，但必须是物理连续的。</p></blockquote><h4 id="协议应用比较"><a href="#协议应用比较" class="headerlink" title="协议应用比较"></a>协议应用比较</h4><blockquote><p>集成IS-IS和OSPF有很多相似点，比如它们都是基于链路状态的动态路由协议，它们的工作机制相似（LSA的通告、同步LSDB、老化等等），它们的收敛速度都较快，它们都有区域分层的概念，它们都是应用较成功的路由协议等等。</p><p>但它们之间也有一些细微区别。集成化IS-IS可同时支持IP和OSI，这样在多协议网络中有优势；而OSPF是专为IP而设计的协议。集成化IS-IS的协议报文采用了TLV格式，易于扩展而支持新的特性如IPv6等；而OSPF与IP结合非常紧密，扩展性要差一些。当然，OSPF应用非常广泛，技术文档与经验积累较多，也为广大网络管理员所熟知，这是OSPF最大的优势。</p></blockquote><h2 id="IS-IS协议原理"><a href="#IS-IS协议原理" class="headerlink" title="IS-IS协议原理"></a>IS-IS协议原理</h2><h3 id="OSI地址"><a href="#OSI地址" class="headerlink" title="OSI地址"></a>OSI地址</h3><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/07.PNG"></p><p>在OSI体系结构中，使用OSI地址标识网络设备，建立拓扑信息。</p><p>OSI地址采用NSAP地址格式，它的作用相当于IP网络中的IP地址和上层协议号的组合，用于标识设备和设备所启用的服务。</p><h3 id="NSAP地址格式"><a href="#NSAP地址格式" class="headerlink" title="NSAP地址格式"></a>NSAP地址格式</h3><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/08.PNG"></p><p>NSAP(Network Service Access Point，网络服务接入点)：即OSI中网络层的地址，用来标识一个抽象的网络服务访问点，描述OSI模型的网络地址结构。NSAP的主要作用是提供网络层和上层应用之间的接口。相当于IP网络中的IP地址和协议号。</p><p>如上图所示，NSAP由IDP(Inital Domain Part)和DSP(Domain Specific Part)组成。IDP相当于IP地址中的主网络号，DSP相当于IP地址中的子网号和主机地址。</p><p>IDP部分是ISO规定的，它由AFI(Authority and Format Identifier)与IDI(Initial Domain Identifier)组成，AFI表示地址分配机构和地址格式，IDI用来标识域。常见的一些AFI值及相关地址域如下表所示：</p><table><thead><tr><th align="center">AFI值</th><th align="center">地址域</th></tr></thead><tbody><tr><td align="center">39</td><td align="center">ISO Data Country Code（DCC）</td></tr><tr><td align="center">45</td><td align="center">E.164</td></tr><tr><td align="center">47</td><td align="center">ISO 6523 International Code Designator（ICD）</td></tr><tr><td align="center">49</td><td align="center">Locally administered（private）</td></tr></tbody></table><p>DSP 由 HO-DSP（High Order Part of DSP）、System ID和SEL三个部分组成。HO- DSP用来分割区域，System ID用来区分主机，SEL指示服务类型。</p><p>IDP和DSP的长度都是可变的，NSAP总长最多是20个字节，最少8个字节。</p><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/09.PNG"></p><blockquote><p>IS-IS中的NSAP地址由下列三部分组成：</p><ul><li>区域地址：长度可变，为1～13个字节。</li><li>System ID：系统ID，用来唯一标识区域内的IS，长度固定为6个字节。一般System ID由Router ID或者MAC地址转换而成。</li><li>NSEL：服务类型选择符，长度为1个字节。作用类似IP中的“协议标识符”，不同的传输协议对应不同的NSEL。<strong>在IP中，NSEL均为00</strong>。</li></ul></blockquote><h3 id="NET地址"><a href="#NET地址" class="headerlink" title="NET地址"></a>NET地址</h3><p>NET（Network Entity Title，网络实体名称）指示的是IS本身的网络层信息，不包括传输层信息，可以看作是一类特殊的NSAP，即SEL为0的NSAP地址。因此，NET的长度与NSAP的相同，最多为20个字节，最少为8个字节。</p><p>通常情况下，一台路由器配置一个NET即可，当区域需要重新划分时，例如将多个区域合并，或者将一个区域划分为多个区域，这种情况下配置多个NET可以在重新配置时仍然能够保证路由的正确性。由于一台路由器最多可配置3个区域地址，所以最多也只能配置3个NET。在配置多个NET时，必须保证它们的 System ID都相同。</p><p><strong>例如，若NET为ab．cdef．1234.5678.9abc．00，则其中Area为ab．cdef，System ID为 1234.5678.9abc，NSEL为00。</strong></p><h4 id="NET地址生成方法"><a href="#NET地址生成方法" class="headerlink" title="NET地址生成方法"></a>NET地址生成方法</h4><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/10.PNG"></p><p>NET地址除了由 Router ID生成外，还可以根据MAC地址生成，比如一台设备某个接口的MAC地址为00e0-fc00-3100，可以将其直接映射为System ID：00e0．fe00.3100。假设其 所在的区域为0100，那么它所对应的NET地址为0100.00e0．fe00.3100.00。</p><p>这样看起来，由MAC地址生成NET 比使用 Router ID更方便，因为MAC地址的长度与System—ID的长度相同都是六个字节。但是MAC地址不像IP地址一样可以随意改变且具有全局性，管理不方便，所以一般还是使用Router ID来进行 System ID的映射。</p><p>通过 Router ID或MAC地址生成System ID的最大的好处是易于维护和管理，并且可以保证网络中System ID的唯一性。如果在分配System ID没有统一规划，可能会造成网络中System ID冲突，并且不易被发现。</p><h4 id="NET规划注意事项"><a href="#NET规划注意事项" class="headerlink" title="NET规划注意事项"></a>NET规划注意事项</h4><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/11.PNG"></p><p>因为在同一区域内，IS使用System ID标识不同的设备，构造拓扑数据库，因此其<br>System ID必须唯一；而IS使用区域地址来进行路由转发的判断，所以同一区域中IS的区域地址需要相同。</p><p>因为所有Level-2路由器和Level-1-2路由器组成路由域的骨干网，所以它们的SystemID也不能相同。</p><p>另外，还有一点需要注意，因为IS-IS路由域中可能存在区域合并和区域迁移的情况，因此在不同的区域中，System ID也尽量不要相同。否则可能会给将来的区域重新划分造成困难。</p><h3 id="IS-IS协议报文"><a href="#IS-IS协议报文" class="headerlink" title="IS-IS协议报文"></a>IS-IS协议报文</h3><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/12.PNG"></p><p>在IS-IS协议中定义了IS—IS所使用的协议报文，这些报文直接封装在数据链路层的帧中，称为PDU（Protocol Data Unit，协议数据单元）。</p><p>PDU可以分为两个部分，报文头和变长字段部分。其中报文头又可分为通用报头和专用报头。对于所有PDU来说，通用报头都是相同的，但专用报头根据PDU类型不同而有所差别。</p><p>在链路层头部中定义了所使用的MAC地址为0180-c200-0014（Level-1报文）和0180-c200-0015（Level-2报文），在链路层上IS-IS报文的协议号为0x83。</p><h4 id="IS-IS协议报文类型"><a href="#IS-IS协议报文类型" class="headerlink" title="IS-IS协议报文类型"></a>IS-IS协议报文类型</h4><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/13.PNG"></p><blockquote><ul><li>Hello报文:</li></ul><blockquote><p>用于建立和维持邻居关系，也称为IIH（IS-to-IS Hello PDUs）。其中，广播网 中的Level-1路由器使用Level-1 LAN IIH，广播网中的Level-2路由器使用Level-2 LAN IIH，点到点网络中的路由器则使用P2P IIH。</p></blockquote><ul><li>LSP:</li></ul><blockquote><p>用于交换链路状态信息。LSP分为两种：Level-1 LSP和Level-2 LSP。Level-1路 由器传送Level-1 LSP，Level-2路由器传送Level-2LSP，Level-1-2路由器则可传送以上两 种LSP。</p></blockquote><ul><li>时序报文 SNP（Sequence Number PDUs）:</li></ul><blockquote><p>用于确认邻居之间最新接收的LSP，作用类 似于确认（Acknowledge）报文，但更有效。</p></blockquote><ul><li>SNP:</li></ul><blockquote><p>包括CSNP（Complete SNP，全时序报文）和PSNP（Partial SNP，部分时序报 文），进一步又可分为Level-1 CSNP、Level-2 CSNP、Level-1 PSNP和Level-2 PSNP。</p></blockquote></blockquote><h4 id="IS-IS协议报文中的CLV"><a href="#IS-IS协议报文中的CLV" class="headerlink" title="IS-IS协议报文中的CLV"></a>IS-IS协议报文中的CLV</h4><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/14.PNG"></p><p>PDU中的变长字段部分是多个CLV（Code-Length-Value）三元组。CLV的作用主要是 传递协议报文中所包含的各种属性，包括网络中的链路信息，拓扑信息和前缀信息等。</p><table><thead><tr><th align="center">CLV Code</th><th align="center">名称</th><th align="center">PDU类型</th><th align="center">CLV的作用</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">Area Addresses</td><td align="center">IIH、LSP</td><td align="center">区域地址CLV在IIH报文中主要作用是判断同网段的IS是否在相同的区域，如果区域相同建立L1或L2邻居，否则只能建立L2邻居。</td></tr><tr><td align="center">2</td><td align="center">IS Neighbors(LSP)</td><td align="center">LSP</td><td align="center">IS邻居CLV主要应用在LSP报文中描述网络拓扑，value字段中填写的是邻居的System ID＋00或者DIS ID。</td></tr><tr><td align="center">6</td><td align="center">IS Neighbors(MAC Address)</td><td align="center">LAN IIH</td><td align="center">该CLV主要用在广播网上邻居建立过程中，通过它确认邻居之间的双向关系，Value字段中填写的是对端邻居接口的MAC地址。</td></tr><tr><td align="center">128</td><td align="center">IP Internal Reachability Information</td><td align="center">LSP</td><td align="center">该CLV主要用于在LSP报文中携带IP前缀信息，包括使能了IS-IS的所有接口的IP地址。</td></tr><tr><td align="center">132</td><td align="center">IP Interface Address</td><td align="center">IIH、LSP</td><td align="center">该CLV的主要作用是在邻居建立过程中，检查对端地址是否在同一网段：还可以通过该字段获得路由下一跳的地址。</td></tr></tbody></table><h3 id="IS-IS网络类型"><a href="#IS-IS网络类型" class="headerlink" title="IS-IS网络类型"></a>IS-IS网络类型</h3><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/15.PNG"></p><p>与OSPF不同，IS—IS只支持两种类型的网络，可分为：</p><ul><li><p>广播型网络</p></li><li><p>点到点网络</p></li></ul><p>缺省情况下，路由器接口网络类型根据物理链路决定。在广播型的链路如 Ethernet、Token-Ring上，接口缺省网络类型为广播网络；而在点对点链路如PPP、HDLC上，接口缺省网络类型为点对点。对于NBMA（Non-Broadcast Multi-Access）网络，如ATM，需对其配 置子接口，并将子接口类型配置为点到点网络或广播网络。IS—IS不能在点到多点（Point to MultiPoint，P2MP）链路上运行。</p><p>接口网络类型不同，其工作机制也略微不同。例如当网络类型为广播网时，需要选举DIS、通过泛洪CSNP报文来实现LSDB同步；当网络类型为P2P时，不需要选举DIS，LSDB同步机制也不同。</p><p>当只有两台路由器接入到同一个广播网时，通过将接口网络类型配置为P2P可以使IS-IS按照P2P而不是广播网的工作机制运行，避免DIS选举以及CSNP的泛洪，既可以节省网络带宽，又可以加快网络的收敛速度。</p><h3 id="IS-IS邻居的建立"><a href="#IS-IS邻居的建立" class="headerlink" title="IS-IS邻居的建立"></a>IS-IS邻居的建立</h3><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/16.PNG"></p><p>在IS-IS中，路由器类型有Level-1、Level-2和Level-1-2等3种，所能够建立的邻居关系有Level-1和Level-2两种。属于不同区域的Level-1路由器不能形成邻居关系，而Level-2路由器是否形成邻居关系则与区域无关。</p><p>在点对点网络上，当IS的端口物理层UP后，邻居的初始状态为init。当收到对端发出的P2P IIH报文后，IS检查报文中的相关参数，如果参数一致，则邻居状态会转化为UP。</p><p>在广播网络上，邻居关系建立需要三方握手过程。具体过程如上图所示：</p><blockquote><ul><li>RTA的物理端口UP后，发送LAN IIH报文，报文中的Neighbor字段为空；</li><li>RTB收到RTA的Hello 报文后，将RTA的MAC地址放在邻居字段中，发送出去，邻居状态变为Init；</li><li>RTA收到RTB的Hello 报文后发现自己的MAC地址在邻居列表中，双向关系确认，邻居状态变为UP，并将RTB的接口MAC地址放在邻居列表中发送出去：RTB收到该Hello报文后，发现自己的MAC地址在邻居列表中，双向关系确认，邻居状态变为UP。</li></ul></blockquote><p>在IS-IS中，只要邻居关系建立，则意味着邻接关系同时建立了，邻居之间可以进行LSP的交换，达到LSDB的同步。</p><h4 id="点对点网络中的邻接关系"><a href="#点对点网络中的邻接关系" class="headerlink" title="点对点网络中的邻接关系"></a>点对点网络中的邻接关系</h4><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/17.PNG"></p><p>Level-1路由器负责区域内的路由，它只与属于同一区域的Level-1和Level-1-2路由器形成邻接关系。分属不同区域间的Level-1路由器之间不会形成邻接关系，而同一区域中的Level-1和Level-2路由器间也不会形成邻接关系。</p><p>Level-2路由器负责区域间的路由，可以与同一区域或者其它区域的Level-2和Level-1-2路由器形成邻接关系。</p><p>Level-1-2路由器可以与同一区域的Level-1和Level-1-2路由器形成Level-1 邻接关系，也可以与同一区域或者其他区域的Level-2和Level-1-2路由器形成 Level-2的邻接关系。</p><h4 id="广播网络上的邻接关系"><a href="#广播网络上的邻接关系" class="headerlink" title="广播网络上的邻接关系"></a>广播网络上的邻接关系</h4><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/18.PNG"></p><p>在广播网络中，如果所有IS之间均交换路由信息将导致路由信息的重复传播。因此，在广播网络中，IS-IS需要在所有的路由器中选举一个路由器作为DIS（Designated IS，指定中间系统），它负责来创建和更新伪节点（Pseudo nodes），并负责生成伪节点的LSP，用来描述这个网络上有哪些路由器。所有其它路由器都只与此路由器进行路由信息交换。</p><p><strong>与OSPF不同的是，IS-IS只要求选举一台DIS，不需要备份，而且允许抢占。</strong></p><p>伪节点是用来模拟广播网络的一个虚拟节点，并非真实的路由器。在IS-IS中，伪节点用DIS的System ID和一个字节的Circuit ID（非0值）标识。使用伪节点可以简化网络拓扑，减少SPF的资源消耗。</p><p>Level-1和Level-2的DIS是分别选举的，用户可以为不同级别的DIS选举设置不同的优先级。DIS优先级数值越高，被选中的可能性就越大。如果优先级最高的路由器有多台，则其中SNPA（Subnetwork Point of Attachment，子网连接点）地址（广播网络中的SNPA地址 是MAC地址）最大的路由器会被选中。不同级别的DIS可以是同一台路由器，也可以是不同的路由器。</p><p>在IS-IS广播网中，同一链路上的同一级别的路由器之间都会形成邻接关系，包括所有的非DIS路由器之间也会形成邻接关系。</p><h4 id="两种网络上邻居建立过程比较"><a href="#两种网络上邻居建立过程比较" class="headerlink" title="两种网络上邻居建立过程比较"></a>两种网络上邻居建立过程比较</h4><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/19.PNG"></p><p>上图总结了在点到点网络上与在广播网络上建立邻居关系过程中的异同。</p><blockquote><ul><li>广播网络中的Level-1路由器使用Level-1 LAN IIH来建立邻居关系，广播网络中的Level-2路由器使用Level-2 LAN IIH，而点到点网络中的路由器则使用P2PIIH。</li><li>在广播网络上，Hello 报文以组播形式发送。Level-1 LAN IIH 报文的组播地址是0180．C200.0014，Level-2LAN IIH报文的组播地址是0180．C200.0015。而在点到点网络上，IIH报文是以单播形式发送的。</li><li>Hello Timer定时器都是一样的，默认为10s，与网络类型无关。但在广播网络中，DIS的Hello Timer只有其它IS的1／3，这样可以更快的探测到DIS失效，加快网络收敛。在广播网络上，使用DIS来创建和更新伪节点，以简化网络拓扑，减少SPF的资源消耗。而在点到点网络上没有DIS机制。</li><li>在广播网络上，所有同一级别的IS之间都形成邻接关系，总的邻接关系数量为n（n-1）／2。而在点到点网络上，相邻的同一级别IS间只建立一个邻接关系。</li></ul></blockquote><h3 id="LSDB的同步"><a href="#LSDB的同步" class="headerlink" title="LSDB的同步"></a>LSDB的同步</h3><h4 id="LSDB的同步-LSP与SNP报文"><a href="#LSDB的同步-LSP与SNP报文" class="headerlink" title="LSDB的同步-LSP与SNP报文"></a>LSDB的同步-LSP与SNP报文</h4><p>邻接关系建立后，邻居IS间进行LSDB的同步。同步过程主要由邻居间交互LSP和SNP协议报文完成的。</p><p>LSP用于描述链路状态信息。每一个IS产生一个（或多个）LSP来描述它与周围邻居IS的连接； LSP报文中包含了发送者的System ID和序列号。如果LSP中包含的链路信息量太多，报文太大，则可以进行分片。Level-1路由器产生Level-1 LSP，仅在区域内传播： Level-2路由器产生Level-2 LSP，在骨干网内传播。</p><p>SNP用于描述LSDB中LSP的摘要信息，并对邻居之间最新接收的LSP进行确认。<br>SNP包括CSNP （Complete SNP，全时序报文）和PSNP （Partial SNP，部分时序报文），进一步又可分为Level-1 CSNP， Level-2 CSNP， Level-1 PSNP和 Level-2 PSNP。</p><p>CSNP包括LSDB中所有LSP的摘要信息，从而可以在相邻路由器间保持LSDB的同步。在广播网络上， CSNP由DIS定期发送（缺省的发送周期为10秒）；在点到点链路上，CSNP只在第一次建立邻接关系时发送。</p><p>PSNP只列举最近收到的一个或多个LSP的序号，它能够一次对多个LSP进行确认。</p><h4 id="LSDB的同步-广播网络"><a href="#LSDB的同步-广播网络" class="headerlink" title="LSDB的同步-广播网络"></a>LSDB的同步-广播网络</h4><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/20.PNG"></p><h4 id="LSDB的同步-P2P网络"><a href="#LSDB的同步-P2P网络" class="headerlink" title="LSDB的同步-P2P网络"></a>LSDB的同步-P2P网络</h4><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/21.PNG"></p><h3 id="拓扑计算与IP路由的生成"><a href="#拓扑计算与IP路由的生成" class="headerlink" title="拓扑计算与IP路由的生成"></a>拓扑计算与IP路由的生成</h3><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/22.PNG"></p><p>在集成化IS-IS中，最终IP路由的生成需要经过两个步骤：</p><p>第1步：根据LSDB中的LSP信息，通过SPF 算法计算出到达拓扑中所有节点的路径和开销；</p><p>第2步：根据LSP中携带的IP可达性信息，通过执行PRC（Partial Route Computing），得出IP路由转发信息表。</p><p>在计算拓扑信息时，IS-IS与OSPF的区别有以下几点：</p><blockquote><ul><li>Level-1和Level-2路由器分别构建了自己的LSDB，所以在Level-1-2路由器上，SPF 算法要针对不同的LSDB而执行两次；</li><li>IS-IS 使用NET 来标识路由器，所以拓扑数据库中的目的地址是NET地址，而非像OSPF中的IP；</li><li>对于广播网络，DIS到所有IS邻居的开销值为0。</li></ul></blockquote><p>在上图中，RTA和RTB是Level-1路由器，属于Area1；RTC和RTD是Level-1-2路由 器。RTC经过SPF 计算后，得出到达RTB的最小开销是20，到达RTC的最小开销是20＋10＝30，到达RTD的最小开销是10。</p><h3 id="IP路由的形成"><a href="#IP路由的形成" class="headerlink" title="IP路由的形成"></a>IP路由的形成</h3><p><img src="https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/23.PNG"></p><p>IS-IS路由器接口启动IP协议后，相关的IP路由信息作为CLV附在LSP中，以叶节点的形式传递。IP信息的变化不会影响到网络拓扑。</p><p>如果链路新增加了IP地址，相关的LSP传播到区域中后，所有路由器只需要执行RPC，将计算出的路由插入到路由表中，不需要重新执行SPF运算。这可以降低网络变化对设备CPU的影响，是IS—IS 相比 OSPF的优点。但是如果拓扑信息发生变化，则需要重新计算到达特定网段的路径和开销。</p><p>IS-IS会分别生成 Level-1和Level-2路由，放于IS-IS协议路由表中。对于Level-1-2链路来说，链路上的IP路由会同时生成Level-1和Level-2路由， Level-1路由优先。如果路由器上同时运行了多路由协议，则经过路由优先级比较后，IS-IS协议路由表中的路由才会进入IP路由表中，作为有效路由指导IP报文转发。</p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IS-IS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp OSPF多进程</title>
      <link href="/2022-11-15-shi-yan-ensp-ospf-duo-jin-cheng.html"/>
      <url>/2022-11-15-shi-yan-ensp-ospf-duo-jin-cheng.html</url>
      
        <content type="html"><![CDATA[<h1 id="OSPF-多进程"><a href="#OSPF-多进程" class="headerlink" title="OSPF 多进程"></a><center>OSPF 多进程</center></h1><h2 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h2><p><img src="https://img-blog.csdnimg.cn/955309d6105e4eed9b68e01d92b4a813.png"></p><p>实验目的</p><p>在实验中虽然R2已经学习到了到达10.1.1.0/24和10.2.2.0/24的路由，但是R1是无法得知到达10.2.2.0/24的路由的。因为在缺省情况下R2并不会将OPSF进程200中的LSA注入到进程100中，反之亦然。对于R2来说，它分别为OSPF进程100和200分别维护着一张OSPF路由表。想要让两个网段互访，就需要在R2的这两个进程之间进行路由重分发。即将OSPF进程100的路由添加进进程200中。</p><p>实验过程</p><p>R1：</p><pre class="line-numbers language-none"><code class="language-none">[AR1]ospf 1 router-id 1.1.1.1[AR1-ospf-1]area 0[AR1-ospf-1-area-0.0.0.0]network 10.1.12.0 0.0.0.255[AR1-ospf-1-area-0.0.0.0]area 1[AR1-ospf-1-area-0.0.0.1]network 10.1.1.0 0.0.0.255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>R2:</p><pre class="line-numbers language-none"><code class="language-none">[AR2]ospf 100 router-id 2.2.2.2[AR2-ospf-100]area 0[AR2-ospf-100-area-0.0.0.0]network 10.1.12.0 0.0.0.255[AR2-ospf-100-area-0.0.0.0]q[AR2-ospf-100]ospf 200[AR2-ospf-200]area 0[AR2-ospf-200-area-0.0.0.0]network 10.1.23.0 0.0.0.255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>R3:</p><pre class="line-numbers language-none"><code class="language-none">[AR3]ospf 1 router-id 3.3.3.3 [AR3-ospf-1]area 0[AR3-ospf-1-area-0.0.0.0]network  10.1.23.0 0.0.0.255[AR3-ospf-1-area-0.0.0.0]area 1[AR3-ospf-1-area-0.0.0.1]network 10.2.2.0 0.0.0.255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>路由重分发</p><p>R2：</p><pre class="line-numbers language-none"><code class="language-none">[AR2]ospf 100[AR2-ospf-100]import-route ospf 200[AR2-ospf-100]ospf 200[AR2-ospf-200]import-route ospf 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看R1的lsdb表，可以看见已经有到10.2.2.0/24的路由</p><p><img src="https://img-blog.csdnimg.cn/647fd3eecb194d81bcf608bdbf886d97.png"></p>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp OSPF报文认证</title>
      <link href="/2022-11-14-shi-yan-ensp-ospf-bao-wen-ren-zheng.html"/>
      <url>/2022-11-14-shi-yan-ensp-ospf-bao-wen-ren-zheng.html</url>
      
        <content type="html"><![CDATA[<h1 id="OSPF报文认证"><a href="#OSPF报文认证" class="headerlink" title="OSPF报文认证"></a><center>OSPF报文认证</center></h1><h2 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h2><p><img src="https://img-blog.csdnimg.cn/a0d8cd29a21f4e1ca1017b5ddcb8a5e3.png"></p><p>实验目的：为保证Area0的安全性，需要在Area0开启区域认证，使用MD5的验证方式，密码为Huawei123.R3和R4之间开启接口认证，使用明文的认证方式，密码为HWArea1。</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>在Area0配置视图下使用<strong>authentication-mode md5 1 cipher Huawei123</strong>命令，将区域内设备激活OSPF的MD5认证。在该命令中，数值1为Key-ID，Huawei123为口令。</p><p>R1:</p><pre class="line-numbers language-none"><code class="language-none">[R1]ospf 1[R1-ospf-1]area 0[R1-ospf-1-area-0.0.0.0]authentication-mode md5 1 cipher Huawei123#MD5认证方式#1Key-ID#cipher密文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>R2:</p><pre class="line-numbers language-none"><code class="language-none">[R2]ospf 1[R2-ospf-1]area 0[R2-ospf-1-area-0.0.0.0]authentication-mode md5 1 cipher Huawei123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>R3:</p><pre class="line-numbers language-none"><code class="language-none">[R3]ospf 1[R3-ospf-1]area 0[R3-ospf-1-area-0.0.0.0]authentication-mode md5 1 cipher Huawei123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Wireshark抓包</p><p><img src="https://img-blog.csdnimg.cn/5963400511094ef797c2dd7325ae4474.png"></p><p>接下来配置R3和R4之间的接口认证，接口认证方式用于在直连的设备之间实现OSPF报文认证，它的优先级高于区域认证方式。</p><p>R3：</p><pre class="line-numbers language-none"><code class="language-none">[R3]interface GigabitEthernet 0/0/1[R3-GigabitEthernet0/0/1]ospf authentication-mode simple cipher HWArea1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>R4:</p><pre class="line-numbers language-none"><code class="language-none">[R4]interface GigabitEthernet 0/0/1[R4-GigabitEthernet0/0/1]ospf authentication-mode simple cipher HWArea1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Wireshark抓包</p><p><img src="https://img-blog.csdnimg.cn/d8a314fad6fa49a0b8d40a6ee0446c90.png"></p>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报文认证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp Virtual Link的配置(二)</title>
      <link href="/2022-11-14-shi-yan-ensp-virtual-link-de-pei-zhi-er.html"/>
      <url>/2022-11-14-shi-yan-ensp-virtual-link-de-pei-zhi-er.html</url>
      
        <content type="html"><![CDATA[<h1 id="Virtual-Link的配置-二"><a href="#Virtual-Link的配置-二" class="headerlink" title="Virtual Link的配置(二)"></a><center>Virtual Link的配置(二)</center></h1><h2 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h2><p><img src="https://img-blog.csdnimg.cn/9b0366e4490d453e8e1876be0143a398.png" alt="img"></p><p>在这个网络中，R4并没有与Area0直接相连，<font color="red">因此R3并非实际意义上的ABR</font>,所以它无法向Area1中注入用来描述区域间路由的Type-3 LSA，同时R3也无法向Area2内注入到达Area0及Area1的内网段路由Type-3 LSA。Area相对于整个OSPF域来说就是一个孤岛。</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>1.实现OSPF基础配置，使用display ospf routing查看R4的OSPF路由表，可以看见R4的OSPF路由表是空的。而位于Area0和Area1的路由器的OSPF表是可以看到路由信息的。</p><p><img src="https://img-blog.csdnimg.cn/474444a5f9f6423e99c663813af3cb83.png"></p><img src="https://img-blog.csdnimg.cn/7721471929e84188ba7aa93f8ed5f963.png" style="zoom:80%;"><p>因为R3无法向Area1中注入用来描述区域间路由的Type-3 LSA，同时R3也无法向Area2内注入到达Area0及Area1的内网段路由Type-3 LSA。位于其他区域的路由器当然就不知道去往Area2的路由了。</p><p>2.解决方法就是在R2和R3之间创建一条Vritual Link，实现Area2与Area0之间的连接。</p><blockquote><p>Virtual Link将作为Area0的一段延伸，R2和R3相当于建立了一条隐形的通道，在链路两端建立邻接关系，且会保持Hello包周期性的发送，已确定链路双方的存活情况。</p><p>当Virtual Link创建完毕后，R3就变成了具有实际意义的ABR，这个时候R3就可以完成Type-3 LSA向其他区域的注入，以及向Area2注入用于描述到达Area0和Area1的Type-3 LSA。</p></blockquote><p>R2:</p><pre class="line-numbers language-none"><code class="language-none">[R2]ospf 1[R2-ospf-1]area 1[R2-ospf-1-area-0.0.0.1]vlink-peer 3.3.3.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>R3:</p><pre class="line-numbers language-none"><code class="language-none">[R3]ospf 1[R3-ospf-1]area 1[R3-ospf-1-area-0.0.0.1]vlink-peer 2.2.2.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.使用display ospf vlink，查看Virtual link连接状态</p><p><img src="https://img-blog.csdnimg.cn/f6e716f6904140b3aa4cbe9aa1b0f608.png"></p><p>4.测试R4与R1之间的连通性</p><p>正常来说应该是可以ping通 的，这里不知道为什么这里不行</p><p><img src="https://img-blog.csdnimg.cn/9e4ef03a95d94bf281a5d23c04d6a0cf.png"></p><p>5.查看R3和R2上的OSPF路由表，可以看见R2上去往192.168.34.0网段的路由类型为Inter-area。</p><p><img src="https://img-blog.csdnimg.cn/7a4cb32438124206b1cb0d658817e813.png"></p><p><img src="https://img-blog.csdnimg.cn/761325d5ca174a20a22c0b056ac194b6.png"></p><p>6.查看R4上的路由表，发现并没有前往R1的路由。不知道原因，应该是哪里命令错误了。</p><p><img src="https://img-blog.csdnimg.cn/49645bcaa3534d37b3140a1cb13d515a.png"></p><p>7.重新创建一个新的拓扑</p><p><img src="https://img-blog.csdnimg.cn/f77849835f5040c2b58a96614924612b.png"></p><p>R11：</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;sys[Huawei]un in en[Huawei]int g0/0/0[Huawei-GigabitEthernet0/0/0]ip add 192.168.12.1 24[Huawei-GigabitEthernet0/0/0]q[Huawei]ospf 1 router-id 1.1.1.1[Huawei-ospf-1]area 0[Huawei-ospf-1-area-0.0.0.0]net 192.168.12.1 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>R12:</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;sys[Huawei]un in en[Huawei]int g0/0/0[Huawei-GigabitEthernet0/0/0]ip add 192.168.12.2 24[Huawei-GigabitEthernet0/0/0]int g0/0/1[Huawei-GigabitEthernet0/0/1]ip add 192.168.23.2 24[Huawei-GigabitEthernet0/0/1]q[Huawei]ospf 1 router-id 2.2.2.2[Huawei-ospf-1]area 0[Huawei-ospf-1-area-0.0.0.0]net 192.168.12.2 0.0.0.0[Huawei-ospf-1-area-0.0.0.0]area 1[Huawei-ospf-1-area-0.0.0.1]net 192.168.23.2 0.0.0.0[Huawei-ospf-1-area-0.0.0.1]vlink-peer 3.3.3.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>R13：</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;sys[Huawei]un in en[Huawei]int g0/0/0[Huawei-GigabitEthernet0/0/0]ip add 192.168.23.3 24[Huawei-GigabitEthernet0/0/0]int g0/0/1[Huawei-GigabitEthernet0/0/1]ip add 192.168.34.3 24[Huawei-GigabitEthernet0/0/1]q[Huawei]ospf 1 router-id 3.3.3.3[Huawei-ospf-1]area 1[Huawei-ospf-1-area-0.0.0.1]net 192.168.23.3 0.0.0.0[Huawei-ospf-1-area-0.0.0.1]area 2[Huawei-ospf-1-area-0.0.0.2]net 192.168.34.3 0.0.0.0[Huawei-ospf-1-area-0.0.0.2]area 1[Huawei-ospf-1-area-0.0.0.1]vlink-peer 2.2.2.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>R14:</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;sys[Huawei]un in en[Huawei]int g0/0/0[Huawei-GigabitEthernet0/0/0]ip add 192.168.34.4 24[Huawei-GigabitEthernet0/0/0]q[Huawei]ospf 1 router-id 4.4.4.4[Huawei-ospf-1]area 2[Huawei-ospf-1-area-0.0.0.2]net 192.168.34.4 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.再次ping成功，查看R2上的OSPF路由表</p><p><img src="https://img-blog.csdnimg.cn/8b19fb316bb44d9d9c9b02584e60b311.png"></p><p><img src="https://img-blog.csdnimg.cn/93a72206da5544a2b12456361e5f3f37.png"></p>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Virtual Link </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp Virtual Link的配置(一)</title>
      <link href="/2022-11-14-shi-yan-ensp-virtual-link-de-pei-zhi-yi.html"/>
      <url>/2022-11-14-shi-yan-ensp-virtual-link-de-pei-zhi-yi.html</url>
      
        <content type="html"><![CDATA[<h1 id="Virtual-Link的配置-一"><a href="#Virtual-Link的配置-一" class="headerlink" title="Virtual Link的配置(一)"></a><center>Virtual Link的配置(一)</center></h1><h2 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h2><img src="https://img-blog.csdnimg.cn/41f5d37971e84e61a919c2141686ba96.png" alt="img" style="zoom:67%;"><p>在图中，R1、R2及R3三台路由器运行了OSPF，网络中规划了两个区域，其中R2及R3在Area23中建立了邻接关系。现在R2将直连接口 GE0/0/0在Area0 中激活OSPF，这样R2在Area0中泛洪Type-1 LSA将包含描述其直连接口GE0/0/0的信息。R3可以通过Area0内泛洪的Type-1、Type-2 LSA计算出到达192.168.2.0/24的区域内路由。另一方面，R2作为ABR，也会描述区域间路由192.168.2.0/24的Type-3 LSA注入Area23。那么R3就会通过该Type-3 LSA计算出到达192.168.2.0/24的区域间路由，且该路由比R3在Area0中计算出到达192.168.2.0/24的路由Cost要更优。</p><p>此时R3的OSPF路由表</p><p><img src="https://img-blog.csdnimg.cn/2b6b229e2b794984ab9564a1ad4d31a2.png" alt="img"></p><p>但是，R3同样是一台ABR，他不能够使用自己在非0区域中收到的Type-3 LSA来计算区域间路由，因此无论路径的Cost如何，R3都会选择从R1到达192.168.2.0/24.</p><p>实验目的：通过配置V-Link解决OSPF的次优路径选择问题，在R2和R3之间跨越Area23建立一条Virtual Link，使得R2能借助这一条Virtual link直接将Type-1 LSA发送给R3，而不是Area0中经过R1的Type-1 LSA。</p><blockquote><p>问题：</p><ol><li>虚链路中报文的目的IP地址如何判断呢？</li></ol><p>  ​    以虚链路邻居为根节点，构建出SPF树，在SPF树中到达自身最短路径的出接口IP地址，即自身向虚链路邻居发送报文的目的IP。</p><ol start="2"><li>虚链路中报文源IP地址如何判断？</li></ol><p>  ​    自身去往目的IP的出接口地址，即为虚链路中报文源IP地址。</p></blockquote><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>1.建立Virtual-Link邻居</p><p>R2：</p><pre class="line-numbers language-none"><code class="language-none">[R2]ospf 1[R2-ospf-1]area 23[R2-ospf-1-area-0.0.0.23]vlink-peer 3.3.3.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>R3:</p><pre class="line-numbers language-none"><code class="language-none">[R3]ospf 1[R3-ospf-1]area 23[R3-ospf-1-area-0.0.0.23]vlink-peer 2.2.2.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.使用display ospf vlink 命令查看关于Virtual Link的相关信息。</p><p><img src="https://img-blog.csdnimg.cn/d26846c36e0b4378bce0fa49648a4966.png" alt="img"></p><p>从图片可以看出，R2与R3之间已经建立了一条Virtual Link线路，状态为Full，而且Cost为1.</p><p>3.使用display ospf routing命令，查看ospf路由表</p><img src="C:\Users\Okra\AppData\Roaming\Typora\typora-user-images\image-20221114102622900.png" alt="image-20221114102622900" style="zoom: 80%;"><p>现在我们可以发现，R3到达192.168.2.0/24的路由下一条已经变成了R2的192.168.23.2/24接口，即使用高带宽链路转发去往目标网段的流量。</p>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Virtual Link </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 19-OSPF协议特性</title>
      <link href="/2022-11-12-shu-tong-19-ospf-xie-yi-te-xing.html"/>
      <url>/2022-11-12-shu-tong-19-ospf-xie-yi-te-xing.html</url>
      
        <content type="html"><![CDATA[<h1 id="OSPF协议特性"><a href="#OSPF协议特性" class="headerlink" title="OSPF协议特性"></a><center>OSPF协议特性</center></h1><h2 id="1-路由汇总"><a href="#1-路由汇总" class="headerlink" title="1.路由汇总"></a>1.路由汇总</h2><h3 id="1-1-在ABR上部署路由汇总"><a href="#1-1-在ABR上部署路由汇总" class="headerlink" title="1.1 在ABR上部署路由汇总"></a>1.1 在ABR上部署路由汇总</h3><img src="https://img-blog.csdnimg.cn/20210110154946936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc5Mzc4Mg==,size_16,color_FFFFFF,t_70" style="zoom:67%;"><p>例如在Area 1的ABR-GS-R1上,对Area 1内的路由进行汇总,将站点1内的明细路由汇总成192.168.0.0/19并只将这条汇总路由通告到Area 0,这样Area 0内的CO以及GS-R2将只会学习到这条汇总路由,而不会学习到站点1内的明细路由。</p><p>缺省时,汇总路由的Cost值等于被汇总的明细路由的Cost值中最大的那个。</p><h3 id="1-2-在ASBR上部署路由汇总"><a href="#1-2-在ASBR上部署路由汇总" class="headerlink" title="1.2 在ASBR上部署路由汇总"></a>1.2 在ASBR上部署路由汇总</h3><img src="https://img-blog.csdnimg.cn/20210110155907791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc5Mzc4Mg==,size_16,color_FFFFFF,t_70" style="zoom:67%;"><p>原理和ABR汇总一样，不同的是如果被汇总的明细路由的度量值类型为Metric-Type-2,那么汇总路由的Cost等于明细路由的Cost 中的最大值加1.</p><h2 id="2-Virtual-Link"><a href="#2-Virtual-Link" class="headerlink" title="2.Virtual Link"></a>2.Virtual Link</h2><p>OSPF Virtual Link（虚链路）是一种虚拟的、逻辑的链路,被部署在两台OSPF路由器之间,它穿越某个非骨干区域,用于实现另一个非骨干区域与Areao的连接。Virtual Link被视为Area0的一段延伸,当我们在两台路由器上穿越一个非骨干区域建立虚链路后,这两·台路由器即开始在这条Virtual Link上尝试建立邻接关系,当基于Virtual Link的邻接关系建立起来后, Virtual Link两端的路由器会在其产生的Type-1 LSA中描述这条Virtual Link,在Type-1 LSA中, Virtual Link采用类型4的Link来描述。需要强调的是, VirtualLink不能被部署在Stub区域内。</p><blockquote><p>问题：</p><ol><li>虚链路中报文的目的IP地址如何判断呢？</li></ol><p>  ​    以虚链路邻居为根节点，构建出SPF树，在SPF树中到达自身最短路径的出接口IP地址，即自身向虚链路邻居发送报文的目的IP。</p><ol start="2"><li>虚链路中报文源IP地址如何判断？</li></ol><p>  ​    自身去往目的IP的出接口地址，即为虚链路中报文源IP地址。</p><ol start="3"><li>使用Router-ID建立虚链路邻居的优势在哪里？</li></ol><p>  ​    更加稳定，当区域内存在多条冗余路径的时候，当某条路径出现故障，只要区域内SPF树不会断开，那么虚链路邻居也不会断开。</p><ol start="4"><li><p>虚链路的建立，只能跨越一个常规的非骨干区域。</p></li><li><p>虚链路的邻居是如何进行维护？</p></li></ol><ul><li><p>​    华为设备中，虚链路邻居之间，会周期性的发送Hello报文，默认10s一次，dead time 40s。</p></li><li><p>​    当和虚链路邻居之间的SPF树断开之后，虚链路邻居将会立刻断开。</p></li></ul></blockquote><h3 id="2-1虚链路环路的产生"><a href="#2-1虚链路环路的产生" class="headerlink" title="2.1虚链路环路的产生"></a>2.1虚链路环路的产生</h3><img src="https://img-blog.csdnimg.cn/d5d0fc388855475597967cad7ac18eb2.png" style="zoom: 80%;"><blockquote><p>在上图的网络中，Area1的AR2和AR4之间建立了虚链路。此时AR4就是一台ABR，它会将AR5上的loopback 5.5.5.5以Type-1 LSA转换为Type-3 LSA注入到Area0中。AR2在收到这条LSA后会将其传递给AR1，对于AR3来说，它就通过Area0学到了到达5.5.5.5的区域间路由。同时AR4会将这一条LSA告诉Area1中的AR3，AR3也知道了到达5.5.5.5的LSA，但是AR3不会使用来自非骨干区域的区域间LSA计算去往5.5.5.5的路由，而是使用来自Area0的LSA。所以AR3去往5.5.5.5的下一条是AR1，而AR1上去往5.5.5.5的下一条是AR2。而AR2到达AR4的虚连接实际上还是使用了AR2——AR3——AR4的真实链路，故而，在AR2上去往5.5.5.5的下一条是AR3.这样就形成了一个环路。</p><p>如下图所示。</p></blockquote><img src="https://img-blog.csdnimg.cn/689b2ea3542d4ff6846de0368a188d4c.png" style="zoom:67%;"><blockquote><p>在实际工作中很少使用虚链路，原因就是非常容易产生环路。</p><p>上面产生环路的原因就是，虚链路的选择出现问题，在AR3和AR4之间建立虚链路就可以避免产生环路。</p></blockquote><h2 id="3-默认路由"><a href="#3-默认路由" class="headerlink" title="3.默认路由"></a>3.默认路由</h2><p>默认路由( Default Route),也被称为缺省路由,指的是目的网络地址及网络掩码都为0的路由,通常是作为路由器的“最后求助对象”,当去往某个目的网络找不到匹配的具体路由时,如果设备的路由表中存在默认路由,那么该设备将使用默认路由来转发数据。</p><h3 id="3-1-在常规区域中发布默认路由"><a href="#3-1-在常规区域中发布默认路由" class="headerlink" title="3.1 在常规区域中发布默认路由"></a>3.1 在常规区域中发布默认路由</h3><p>缺省情况下,常规区域中的路由器是不会发布OSPF默认路由的,即使它的路由表·中存在一条默认路由(该默认路由可能是路由器通过其他协议发现的,例如RIP等),也需要通过相应的配置才能使得路由器将默认路由发布到OSPF网络中。<br><img src="https://img-blog.csdnimg.cn/20210110161857313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc5Mzc4Mg==,size_16,color_FFFFFF,t_70" style="zoom:67%;"></p><p>OSPF定义了专门的命令用于引入默认路由,譬如现在要在OR上,将默认路由引入OSPF,则OR的配置如下:Default-route-advertise cost 10 type 2</p><p><strong>Default-route-advertise cost 10 type 2</strong>这条命令用于向OSPF域发布一条默认路由,这条默认路由采用Type-5 LSA来描述,因此实际上是一条外部路由。在该命令中, cost 关键字用于指定该默认路由的cost值, type关键字用于指定路由的Metric-Type,需要强调的是使用这种方式向OSPF发布默认路由的前提是OR的路由表中必须已经存在一条默认路由,这条默认路由可以是静态的,也可以是从其他动态路由协议(或者其他OSPF进程)学习到的,只有满足这个条件,默认路由才会被顺利下发到该OSPF域。如果在default-route-advertise命令中增加always关键字,则无论OR的路由表中是否已经存在默认路由,它都将始终向OSPF网络下发默认路由。</p><h3 id="3-2-在Stub区域中发布默认路由"><a href="#3-2-在Stub区域中发布默认路由" class="headerlink" title="3.2 在Stub区域中发布默认路由"></a>3.2 在Stub区域中发布默认路由</h3><p>当一个OSPF区域被配置为Stub区域时,该区域内将不再允许Type-5 LSA进行泛洪,而该区域内部的路由器也就无法学习到OSPF域外的路由,那么这些路由器如何访问域外的网络呢?</p><p>Stub区域的ABR会自动向该区域下发一条默认路由(Type-3 LSA),这样Stub区域内的路由器就能够通过这条默认路由将访问域外的流量送达ABR,再由ABR将流量转发出去。</p><p>缺省时,这条默认路由的Cost为1,可以在这个Stub区域的ABR的OSPF区域配置视图下使用default-cost命令修改这个Cost值。</p><h3 id="3-3-在Totally-Stub区域中发布默认路由"><a href="#3-3-在Totally-Stub区域中发布默认路由" class="headerlink" title="3.3 在Totally Stub区域中发布默认路由"></a>3.3 在Totally Stub区域中发布默认路由</h3><p>Totally Stub区域在Stub区域的基础上进一步禁止其他区域的Type-3 LSA在该区域内泛洪,该区域内的路由器无法学习到OSPF域外的路由以及其他OSPF区域的路由, Totally Stub区域的ABR会自动向该区域发布一条默认路由(Type-3 LSA),这样一来区域内部的路由器就能够通过ABR到达其他区域以及OSPF域外。</p><p>缺省时,这条默认路由的Cost为1,可以在这个Totally Stub区域的ABR的OSPF区域配置视图下使用default-cost命令修改这个cost值。</p><h3 id="3-4-在NSSA中发布默认路由"><a href="#3-4-在NSSA中发布默认路由" class="headerlink" title="3.4 在NSSA中发布默认路由"></a>3.4 在NSSA中发布默认路由</h3><img src="https://img-blog.csdnimg.cn/20210110163723694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc5Mzc4Mg==,size_16,color_FFFFFF,t_70" style="zoom:67%;"><p>当一个区域被配置为NSSA时,该区域将不再允许Type-4 LSA及Type-5 LSA进入,另一方面, NSSA允许在区域本地引入少量的外部路由,这意味着NSSA内的路由器将不会学习到该区域之外引入的外部路由, NSSA的ABR会自动向该NSSA下发一条默认路由(使用Type-7 LSA描述)。</p><p>当然我们可能会面对另一种需求,就是NSSA内的路由器希望通过本区域的ASBR (R2)来下发默认路由,那么就需要手工在R2上进行相关配置。R2的关键配置如下：nssa default-route-advertise</p><p>完成配置后, R2会向NSSA中注入一条使用Type-7 LSA描述的默认路由,这条默认路由只会在NSSA内传播,不会被ABR转换成Type-5 LSA进入Area 0。值得注意的是,仅当NSSA的ASBR在自己的路由表中已经存在一条默认路由时,使用上述命令才能够向NSSA注入默认路由,否则默认路由将不会被注入。</p><h3 id="3-5-在Totally-NSSA中发布默认路由"><a href="#3-5-在Totally-NSSA中发布默认路由" class="headerlink" title="3.5 在Totally NSSA中发布默认路由"></a>3.5 在Totally NSSA中发布默认路由</h3><p>Totally NSSA禁止Type-3, Type-4及Type-5 LSA在该区域中泛洪,同时该区域的ABR向该区域中自动下发一条默认路由 (Tуре-3 LSA), 这样NSSA的路由器可以通过这条默认路由到达其他区域或者域外的网络。</p><h2 id="4-报文认证"><a href="#4-报文认证" class="headerlink" title="4.报文认证"></a>4.报文认证</h2><p>OSPF支持三种类型的认证方式,分别是<strong>空认证(Null Authentication)、简单口令认证(Simple Password)、密文认证(Ctyptograhpic Authentication)</strong>,这三种认证方式对应的“认证类型”字段值分别为0、1和2。</p><h3 id="4-1-空认证"><a href="#4-1-空认证" class="headerlink" title="4.1 空认证"></a>4.1 空认证</h3><p>缺省情况下，OSPF的接口上使用的认证方式为空认证，这意味着对接口的OSPF报文不做认证，此时的认证类型字段值为0.</p><h3 id="4-2-简单口令认证"><a href="#4-2-简单口令认证" class="headerlink" title="4.2 简单口令认证"></a>4.2 简单口令认证</h3><p>简单口令认证又被称为明文认证,一个明文的口令被包含在认证数据字段中用于认证OSPF的报文收发,因此实际上这种认证方式并不安全,只要网络环境有条件进行报文窥探,即可对捕获下来的报文做分析,攻击者就能够直接看到包含在其中的明文口令。<br><img src="https://img-blog.csdnimg.cn/20210110183110598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc5Mzc4Mg==,size_16,color_FFFFFF,t_70" style="zoom:67%;"></p><h3 id="4-3-密文认证"><a href="#4-3-密文认证" class="headerlink" title="4.3 密文认证"></a>4.3 密文认证</h3><p>与简单口令认证不同,采用密文认证时, OSPF报文中并不直接包含用于认证的明文形式的口令,而是包含一个哈希(Hash)值,这个哈希值是将用户配置的口令等内容经过MD5算法计算得到的结果。</p><p>MD5算法是一种理论上不可逆的散列算法,因此即使OSPF报文被捕获,也无法通过报文中包含的哈希值反推得到明文口令,所以这种认证方式显然要比简单口令认证更加安全。</p><img src="https://img-blog.csdnimg.cn/2021011018322863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc5Mzc4Mg==,size_16,color_FFFFFF,t_70" style="zoom:67%;"><table><thead><tr><th align="center">字段</th><th align="center">大小</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">Key-ID (Key-Identification)</td><td align="center">8比特</td><td align="center">口令标识。两台直连的OSPF路由器如果都激活了报文认证,那么双方的Key-ID及口令必须一致。</td></tr><tr><td align="center">认证数据长度(Authentication Data Length)</td><td align="center">8比特</td><td align="center">将口令经过散列算法(例如MD5)计算后得到的数据是追加在OSPF报文尾部的(不在OSPF报文头部中),它并不被当作是OSPF协议报文的一部分,所以OSPF报文头部中的“报文长度”字段所显示的值并不将认证数据纳入长度计算。“认证数据长度”字段显示了这个认证数据的长度。</td></tr><tr><td align="center">密码序列号(Cryptographic Sequence Number)</td><td align="center">32比特</td><td align="center">一个持续保持递增的序列号,用于OSPF报文的防重放攻击。由于这个字段的值是只增不减的,因此当收到OSPF报文的密码序列号等于或小于目前的序列号时,路由器认为此报文为重放攻击报文,于是将其丢弃。</td></tr></tbody></table><h2 id="5-转发地址-FA"><a href="#5-转发地址-FA" class="headerlink" title="5.转发地址-FA"></a>5.转发地址-FA</h2><p>在OSPF的Type-5 LSA及Type-7 LSA中包含着一个特别的字段—<strong>转发地址(Forwarding Address, FA</strong>), FA的引入使得OSPF在某些特殊的场景下可以避免次优路径问题。</p><img src="https://img-blog.csdnimg.cn/20210110184426923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc5Mzc4Mg==,size_16,color_FFFFFF,t_70" style="zoom:67%;"><p>OSPF设计了<strong>FA字段</strong>,可解决<strong>次优路径问题</strong>。FA字段只存在于Type-5 LSA及Type-7 LSA当中,有点类似于通往外部网络的“出口(Exit)”的概念。</p><p>以Type-5 LSA为例，当一台路由器使用Type-5 LSA计算到达外部网段的路由时,它会根据Type-5LSA的链路状态ID及LSA中所包含的网络掩码进行与运算,从而得到路由的目的网络地址及掩码,此外,该路由器会检查产生这条LSA的ASBR的可达性,如果ASBR不可达,那么这条Type-5 LSA将不会用于计算路由,只有当ASBR可达时,这条LSA才被认为是有效的。</p><p>此时如果LSA中所包含的FA为0.0.0.0,则路由器认为到达目的网段的数据包应该发往该ASBR,因此它将到达ASBR的下一跳地址作为这条外部路由的下一跳;而如果FA不为0.0.0.0,则路由器认为到达目的网段的数据包应该发往这个FA(所标识的设备),因此它将在自己的OSPF路由表中查询到达这个FA的路由,如果在OSPF路由表中能够找到匹配这个FA的OSPF区域内部路由或OSPF区域间路由,则使用到达这个FA的下一跳地址作为这条外部路由的下一跳地址。如果没有符合上述条件的路由存在,那么这条Type-5 LSA将不会用于外部路由计算。</p><p>当外部路由被ASBR引入OSPF时,一般情况下用于描述这些外部路由的Type-5LSA的FA字段值被设置成0.0.0.0,然而当满足某些特定的条件时, FA字段也可以被ASBR设置成非0.0.0.0的值。</p><p>这些条件是:</p><blockquote><p><strong>引入外部路由的ASBR在其连接外部网络的接口(外部路由的出接口)上激活了OSPF;</strong></p><p><strong>该接口没有被配置为Silent-Interface;</strong></p><p><strong>该接口的网络类型为Broadcast或NBMA;</strong></p><p><strong>该接口的IP地址落在OSPF协议配置的network命令范围内。</strong></p></blockquote><p>当同时满足上述四个条件时, FA才允许被设置为非0.0.0.0的值,否则FA被设置为.0.0.0.0。</p><blockquote><p>FA地址的取值为：ASBR去往外部路由的下一跳地址。</p><p>如何实现路径优化？</p><p>即OSPF路由器，计算带有FA地址的外部路由时，把FA地址当做外部路由的总出口。             </p><p>cost计算：为自身去往FA地址的cost＋外部路由携带的cost。</p><p>下一跳：路由器去往FA地址的下一跳，即为外部路由的下一跳地址。</p></blockquote><h2 id="6-OSPF路由防环机制"><a href="#6-OSPF路由防环机制" class="headerlink" title="6.OSPF路由防环机制"></a>6.OSPF路由防环机制</h2><p>OSPF与距离矢量路由协议不同,运行OSPF的路由器之间交互并不是路由信息,而是LSA,而路由的计算正是基于网络中所泛洪的各种LSA进行的,所以实际上OSPF路由的环路避免机制还得依赖于LSA相关的诸多设计。</p><h3 id="6-1-区域内部路由的防环"><a href="#6-1-区域内部路由的防环" class="headerlink" title="6.1 区域内部路由的防环"></a>6.1 区域内部路由的防环</h3><p>依赖Type-1及Type-2 LSA,路由器能够描绘出区域内的拓扑及网段信息,从而运行SPF算法,计算出到达每个网段的最优路径,并将这些路径安装到路由表中,因此区域内的路由可以实现无环路。</p><h3 id="6-2-区域间路由的防环"><a href="#6-2-区域间路由的防环" class="headerlink" title="6.2 区域间路由的防环"></a>6.2 区域间路由的防环</h3><p>(1) <strong>OSPF要求所有的非骨干区域必须与Area 0直接相连,区域间路由需经由Area 0中转。</strong><br>这个规则使得区域间的路由传递不能发生在两个非骨干区域之间,这在很大程度上,规避了区域间路由环路的发生,也使得OSPF的区域架构在逻辑上形成了一个类似星型的拓扑。</p><p>(2) <strong>ABR从非骨干区域收到的Type-3 LSA不能用于区域间路由的计算。</strong><br>OSPF对ABR有着严苛的要求,区域间路由传递的关键点在于ABR对Type-3 LSA的处理。</p><p>OSPF规定, ABR在使用Type-3 LSA计算区域间的路由时,只会使用其在Area 0内所收到的Type-3 LSA进行计算,而从非骨干区域内收到的Type-3 LSA是不会用于路由计算的。这样可以有效地避免环路的发生。</p><p>(3) <strong>ABR只能将自己到达所连接区域的区域内部路由注入骨干区域(区域间路由则,不被允许) ,另外,可以将其到达所连接区域的区域内部路由及到达其他区域的区域间路由注入非骨干区域。</strong><br><img src="https://img-blog.csdnimg.cn/20210110192424337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc5Mzc4Mg==,size_16,color_FFFFFF,t_70" style="zoom:67%;"></p><p>R3可以把描述Area 2的路由信息注入到Area 0中，同时也会把从R4生成的Type-3 LSA注入到Arae 0中。此时, R2不能够使用这些Type-3 LSA进行区域间路由计算,更不能再将描述这些路由的Type-3 LSA注入Area 0(本条规则的前半句话)。因为R2所有接口都属于Area 0。这样可以有效的防止区域间路由被倒灌回Area0.</p><p>另一方面, R3会在Area 0内发现Type-1 LSA (可能还会有Type-2 LSA),也会收到描述区域间路由的Type-3 LSA, R3可以使用这些LSA计算到达Area 0内各网段的区域内部路由,以及到达Area 1内各网段的区域间路由,并且可以将描述这些路由的Type-3 LSA注入非骨干区域–Area 2 (本条规则的后半句)。</p><p>注入是单方向的。</p><p><strong>(4) ABR不会将描述到达某个区域内网段路由的Type-3 LSA再注入回该区域。</strong><br><img src="https://img-blog.csdnimg.cn/20210110191837412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc5Mzc4Mg==,size_16,color_FFFFFF,t_70" style="zoom:67%;"></p><p>R2作为ABR生成描述Area 1的Type-3 LSA，注入到Area 0中，这些Type-3 LSA不会被发回Area 1里。R3收到R2发的Type-3 LSA后，生成新的Type-3 LSA用来向Area 2区域里的路由器描述到达Arae 1区域的路由，这个Type-3 LSA也不会发回Area 0.</p><p><strong>(5) Type-3 LSA还设计了Down-Bit (一个特殊的比特位) ,用于在MPLS VPN环境下进行路由防环。</strong></p><h3 id="6-3-外部路由的防环"><a href="#6-3-外部路由的防环" class="headerlink" title="6.3 外部路由的防环"></a><strong>6.3 外部路由的防环</strong></h3><p>一台路由器使用Type-5 LSA计算出路由有两个前提,其一是要收到Type-5 LSA,其二是要知道如何到达产生这个Type-5 LSA的ASBR。</p><p>Type-5 LSA会被泛洪到整个OSPF域,表面上看,它本身并不具有什么防环的能力,但是实际上,它并不需要,因为它可以依赖Type-1 LSA. Type-2 LSA及Type-4 LSA来实现防环。</p><h2 id="7-OSPF路由类型及优先级"><a href="#7-OSPF路由类型及优先级" class="headerlink" title="7.OSPF路由类型及优先级"></a>7.OSPF路由类型及优先级</h2><p>它们的优先级按如下顺序排列：</p><blockquote><p><strong>区域内路由(Intra Area Route)</strong>:区域内路由指的是路由器根据区域内泛洪的Type1、Type-2 LSA计算得到的路由,使用这些路由,路由器可以到达其直连区域内的网段。</p><p><strong>区域间路由(Inter Area Route)</strong>:区域间路由指的是路由器根据Type-3 LSA计算得到的路由,使用这些路由,路由器可以到达其他区域的网段。</p><p><strong>Type1外部路由(Metric-Type-1 External Route)</strong>:此处Type1外部路由指的是路由器根据Type-5 LSA (Metric-Type-1)计算出的外部路由。</p><p><strong>Type2外部路由(Metric-Type-2 External Route)</strong>:此处Type2外部路由指的是路由器根据Type-5 LSA (Metric-Type-2)计算出的外部路由。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">type1：其他OSPF路由器计算，type1类型的外部路由，将会累加内部cost值。type2：其他OSPF路由器计算，type2类型的外部路由，不会累加内部cost值。外部路由选路原则：1、无论任何cost，type1总是优先于Type2． 2、同为Type1的时候如何比较：①比较Cost和值，越小越优。②如果cost和值相同，则负载。3、同为type2的时候如何比较：①比较引入时的cost值，即5类LSA携带的cost值。②如果引入时的cost相同，则比较到达ASBR的cost。③如果到达ASBR的cost相同，则负载。什么时候才会使用type1呢？管理员希望OSPF路由器，通过自身的算法选出访问外部路由的最短路径，而不加以管理的时候使用type1．什么时候才会使用type2呢？管理员希望人为的控制OSPF路由器访问外部路由的总出口。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 18-OSPF LSA及特殊区域</title>
      <link href="/2022-11-12-shu-tong-18-ospf-lsa-ji-te-shu-qu-yu.html"/>
      <url>/2022-11-12-shu-tong-18-ospf-lsa-ji-te-shu-qu-yu.html</url>
      
        <content type="html"><![CDATA[<h1 id="LSA及特殊区域"><a href="#LSA及特殊区域" class="headerlink" title="LSA及特殊区域"></a><center>LSA及特殊区域</center></h1><h2 id="LSA概述"><a href="#LSA概述" class="headerlink" title="LSA概述"></a>LSA概述</h2><p>LSA(Link-State Advertisement,链路状态通告)用来承载链路状态信息，主要由LSA头部信息（LSA摘要）和链路状态组成。部分LSA只有LSA头部信息，无链路状态信息。</p><p>在ospf中主要是通过泛洪LSA、同步LSDB来学习路由，达到全网互通的。</p><blockquote><p>泛洪：<br>把LSA向区域中的每条链路复制并通告的过程—————-每隔30min泛洪一次。<br>泛洪是个可靠的过程，有确认机制<br>   显示确认    用LSAck对LSU报文中的的LSA做确认（发送包含LSA拷贝的数据包来确认，是信息级别的确认）确认收到内容了<br>   隐式确认    DD报文序列号+1进行确认（仅仅是报文级别的确认）确认收到报文了</p><p>LSDB同步：<br>每个LSA都要在LSU中通告给邻居，并且每个邻居都要确认，若没有收到邻居的确认，LSU在5s后重传</p><p>LSDB数据库：存放LSA信息<br>命令：display ospf lsdb</p></blockquote><h4 id="LSA类型"><a href="#LSA类型" class="headerlink" title="LSA类型"></a>LSA类型</h4><table><thead><tr><th align="left">类别</th><th align="left">名称</th><th align="left">描述</th><th>传播范围</th></tr></thead><tbody><tr><td align="left">一类</td><td align="left">Router LSA</td><td align="left">每台OSPF路由器都会产生的LSA，描述该路由器所有OSPF直连接口的状况和Cost值，该LSA只能在接口所属区域内泛洪。</td><td>在产生此LSA的本区域传播</td></tr><tr><td align="left">二类</td><td align="left">Network LSA</td><td align="left">由DR产生，描述该DR所接入的MA网络中所有与之形成邻接关系的路由器，其中包括了DR本身，该LSA只能在接口所属区域内泛洪。</td><td>在产生此LSA的本区域传播</td></tr><tr><td align="left">三类</td><td align="left">Network Summary LSA</td><td align="left">由ABR产生，描述了到达某个区域的目标网段的路由。该类LSA主要用于区域间路由的传递。</td><td>在区域间传播（非 Totally Stub/Nass区域）</td></tr><tr><td align="left">四类</td><td align="left">ASBR Summary LSA</td><td align="left">由ABR产生，用于描述ASBR。ASBR汇总LSA相当于一条到达ASBR的“主机路由”</td><td>在本区域内传播（非 特殊区域）</td></tr><tr><td align="left">五类</td><td align="left">AS External LSA</td><td align="left">由ASBR产生，用于描述本AS之外的外部路由。</td><td>在全区域传播（非 特殊区域）</td></tr><tr><td align="left">七类</td><td align="left">NSSA LSA</td><td align="left">由ASBR产生，用于描述本AS之外的外部路由。NSSA LSA仅仅在产生这个LSA的NSSA内泛洪，不能直接进入骨干区域。NSSA的ABR会将7类LSA转换为5类LSA注入到骨干区域。</td><td>在NSSA/Totally Nass区域传播</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">注意：   在广播型网络中，需要知道网络号，此网络号存在于2类LSA中（LS id与子网掩码做与运算）   P2P类型网络无2类LSA2.补充3种LSA-----提供OSPF的扩展通用机制Type-6:组成员LSA（Group Membership LSA），这种LSAzaiMOSPF(组播扩展OSPF)中被使用   Type-9:仅在接口所在的网段范围内泛洪（支持GR的Grace LSA就为其中的一种）   Type-10:在区域内泛洪（用于支持TE的LSA就是其中的一种）   Type-11:在AS内泛洪（目前没有应用）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LSA头部格式"><a href="#LSA头部格式" class="headerlink" title="LSA头部格式"></a>LSA头部格式</h2><pre class="line-numbers language-none"><code class="language-none"> 0                   1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|            LS age             |    Options    |    LS type    |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|                        Link State ID                          |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|                     Advertising Router                        |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|                     LS sequence number                        |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|         LS checksum           |             length            |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="LS-age"><a href="#LS-age" class="headerlink" title="LS age"></a>LS age</h4><p>LSA产生后所经过的时间，以秒为单位。无论LSA是在链路上传送，还是保存在LSDB中，其值都会在不停的增长。</p><blockquote><ul><li>LS Age越大，LSA越老</li><li>LS Age为max-即3600s时，删除LSA</li></ul></blockquote><h4 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h4><p>可选项：</p><blockquote><p>E：允许Flood AS-External-LSAs</p><p>MC：转发IP组播报文</p><p>N/P：处理Type-7 LSAs</p><p>DC：处理按需链路</p></blockquote><h4 id="LS-type"><a href="#LS-type" class="headerlink" title="LS type"></a>LS type</h4><blockquote><p>Type 1、2、3、4、5、7</p></blockquote><h4 id="Link-State-ID"><a href="#Link-State-ID" class="headerlink" title="Link State ID"></a>Link State ID</h4><blockquote><p>与LSA中的LS Type和Advertising Router一起在路由域中描述一个LSA。</p></blockquote><h4 id="Advertising-Router"><a href="#Advertising-Router" class="headerlink" title="Advertising Router"></a>Advertising Router</h4><blockquote><p>产生此LSA的路由器的Router ID。</p></blockquote><h4 id="LS-sequence-number"><a href="#LS-sequence-number" class="headerlink" title="LS sequence number"></a>LS sequence number</h4><p>LSA的序列号。其他路由器根据这个值可以判断哪个LSA是最新的。</p><blockquote><ul><li>具有最高序列号的，LSA越新</li><li>序列号是0x8000 0001 ~ 0x7FFF FFFF</li><li>LSA每30min钟泛洪一次，序列号就加1</li></ul></blockquote><h4 id="LS-checksum"><a href="#LS-checksum" class="headerlink" title="LS checksum"></a>LS checksum</h4><p>除了LS age外其它各域的校验和。</p><blockquote><ul><li>检验LSA的内容以及确定LSA是否是最新的</li><li>校验越大，LSA越新</li></ul></blockquote><h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><blockquote><p>LSA的总长度，包括LSA Header，以字节为单位。</p></blockquote><p><strong>不同类别的LSA对应的Link State ID和Advertisting Router是不同的</strong></p><table><thead><tr><th></th><th>LS Type</th><th>Link State</th><th>Adv Router</th></tr></thead><tbody><tr><td>一类</td><td>Router</td><td>自己的Router-id</td><td>自己的Router-id</td></tr><tr><td>二类</td><td>Network</td><td>DR的IP</td><td>DR的Router-id</td></tr><tr><td>三类</td><td>Network-Summary</td><td>网络网段</td><td>ABR的Router-id</td></tr><tr><td>四类</td><td>Asbr-Summary</td><td>ASBR的Router-id</td><td>ABR的Router-id</td></tr><tr><td>五类</td><td>AS-External</td><td>外网网络网段</td><td>ASBR的Router-id</td></tr><tr><td>七类</td><td>NSSA</td><td>外网网络网段</td><td>ASBR的Router-id</td></tr></tbody></table><h2 id="LSA详解"><a href="#LSA详解" class="headerlink" title="LSA详解"></a>LSA详解</h2><h4 id="Type-1-LSA"><a href="#Type-1-LSA" class="headerlink" title="Type-1 LSA"></a>Type-1 LSA</h4><blockquote><p>该LSA描述了路由器的直连接口状况和接口Cos他，同属于一个区域的接口共用一个Type-1 LSA描述，当路由器有多个接口属于不同区域时，它将为每个区域单独产生一个Type-1LSA，并且每个LSA只描述接入该区域的接口。</p></blockquote><p>Type-1 LSA报文结构：</p><pre class="line-numbers language-none"><code class="language-none">+-------------------------------+---------------+---------------+|            LS age             |     Options   |       1       |+-------------------------------+---------------+---------------+|                        Link State ID                          |+---------------------------------------------------------------+|                     Advertising Router                        |+---------------------------------------------------------------+|                     LS sequence number                        |+-------------------------------+-------------------------------+|         LS checksum           |             length            |+-------------------------------+-------------------------------+|    0    |V|E|B|        0      |            # links            |+---------------------------------------------------------------+|                          Link ID                              |+---------------------------------------------------------------+|                         Link Data                             |+---------------+---------------+-------------------------------+|     Type      |     # TOS     |            metric             |+---------------+---------------+-------------------------------+|                              ...                              |+---------------+---------------+-------------------------------+|      TOS      |        0      |          TOS  metric          |+---------------+---------------+-------------------------------+|                          Link ID                              |+---------------------------------------------------------------+|                         Link Data                             |+---------------------------------------------------------------+|                              ...                              |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>V (Virtual Link)</th><th>1比特</th><th>如果产生此LSA的路由器是虚连接的端点，则置为1。</th></tr></thead><tbody><tr><td>E (External)</td><td>1比特</td><td>如果产生此LSA的路由器是ASBR，则置为1。stub区域不允许出现E比特位被设置为1的LSA。</td></tr><tr><td>B (Border)</td><td>1比特</td><td>如果产生此LSA的路由器是ABR，则置为1。</td></tr></tbody></table><blockquote><p>1类LSA的链路状态信息主要由链路类型、Link ID、Link Data、Cost三个值来进行描述。</p><p>描述P2P型网络自身的邻居，以及广播型网络自身连着的伪节点</p><p><img src="https://img-blog.csdnimg.cn/6aa548ee276f49dca64a733a7383816a.png" alt="img"></p><p>华为设备中Ospf默认认为LoopBack接口是只有一台主机的接口（<font color="red"><strong>即使配置Loopback为24位，但是Ospf在描述路由信息时描述的掩码还是32位，因为loopback接口在OSPF的网络类型为P2P，要想将掩码恢复到真实的24，就要将网络类型修改为广播或者NBMA</strong></font>）</p><ul><li><p><strong>P2P</strong>：             有ospf邻居，且网络类型为P2P与P2MP接口的链路类型</p></li><li><p><strong>TransNet</strong>：   有ospf邻居，且网络类型为广播、NBMA接口的链路类型</p></li><li><p><strong>StubNet</strong>：     接口被激活OSPF，但是没有任何OSPF邻居。此接口就是Stub类型 </p></li></ul><p> ​                        一般Loopback接口的链路类型和连接终端接口的链路类型为此</p><ul><li><p><strong>Vitrual Link</strong>：描述OSPF的虚链路的链路类型（只有配置了V-link才会产生）</p></li><li><img src="https://img-blog.csdnimg.cn/08dcb48e8df54091891363c3898cc3fd.png" style="zoom:67%;"></li></ul></blockquote><p><strong>OSPF伪节点</strong></p><blockquote><p>在广播型链路中进行OSPF计算时，将广播型链路在算法上抽象为一台路由器（即将这个二层交换机或者链路抽象为一台路由器），抽象出来的这台路由器就称为伪节点</p><p>伪节点：在实际中不存在，不是路由器（没运行Ospf协议）。是由算法抽象出来的路由器，在算法中存在。</p><p>实节点：在实际中存在，是路由器。在算法中是也存在是路由器。</p><p>在进行路由信息描述时，实节点不需要描述与邻居的路由信息，只需要描述与伪节点的路由信息（伪节点的Ruter-ID是此链路上DR的接口IP地址），减少大量冗余重复的描述</p><p>注意：在进行Cost计算时，伪节点到实节点的开销为0</p></blockquote><h4 id="Type-2-LSA"><a href="#Type-2-LSA" class="headerlink" title="Type-2 LSA"></a>Type-2 LSA</h4><blockquote><p>在MA网络中，OSPF会选举DR和BDR，所有的DROther路由器都只与DR和BDR建立邻接关系，DROther路由器之间不会建立全毗邻的OSPF邻接关系。DR会在本区域内泛洪Type-2 LSA，来列举出接入该MA网络的所有路由器的Router-ID（包括DR本身），以及这个网络的子网掩码。</p><p>因此Type-2 LSA只存在于拥有MA网络的区域中，gaiLSAy欧DR产生。</p></blockquote><p>Type-2 LSA报文结构：</p><pre class="line-numbers language-none"><code class="language-none">+-------------------------------+---------------+---------------+|            LS age             |      Options  |      2        |+-------------------------------+---------------+---------------+|                        Link State ID                          |+---------------------------------------------------------------+|                     Advertising Router                        |+---------------------------------------------------------------+|                     LS sequence number                        |+-------------------------------+-------------------------------+|         LS checksum           |             length            |+-------------------------------+-------------------------------+|                         Network Mask                          |+---------------------------------------------------------------+|                        Attached Router                        |+---------------------------------------------------------------+|                              ...                              |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>字段</th><th>长度</th><th>含义</th></tr></thead><tbody><tr><td>Link State ID</td><td>32比特</td><td>DR的接口IP地址。</td></tr><tr><td>Network Mask(网络掩码)</td><td>32比特</td><td>该广播网或NBMA网络地址的掩码。</td></tr><tr><td>Attached Router(相连的路由器的Router ID)</td><td>32比特</td><td>连接在同一个网络上的所有路由器的Router ID，也包括DR的Router ID。</td></tr></tbody></table><img src="https://img-blog.csdnimg.cn/899dc536ccf54f2f91fd660288fdbf1b.png" style="zoom:67%;"><h4 id="Type-3-LSA"><a href="#Type-3-LSA" class="headerlink" title="Type-3 LSA"></a>Type-3 LSA</h4><p>Type-3 LSA报文结构：</p><pre class="line-numbers language-none"><code class="language-none">+-------------------------------+---------------+---------------+|            LS age             |     Options   |    3 or 4     |+-------------------------------+---------------+---------------+|                        Link State ID                          |+---------------------------------------------------------------+|                     Advertising Router                        |+---------------------------------------------------------------+|                     LS sequence number                        |+-------------------------------+-------------------------------+|         LS checksum           |             length            |+-------------------------------+-------------------------------+|                         Network Mask                          |+---------------+-----------------------------------------------+|      0        |                  metric                       |+---------------+-----------------------------------------------+|     TOS       |                TOS  metric                    |+---------------+-----------------------------------------------+|                              ...                              |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由ABR将自身直连区域的区域内路由转化成其他直连区域的3类LSA，完成区域间路由的计算</p><p><strong><font color="red">汇总网络LSA，用于描述区域间的路由（描述ABR所知道的路由以及开销，并没有携带任何关于邻居的拓扑结构，所以携带的是纯粹的路由信息）</font></strong></p><img src="https://img-blog.csdnimg.cn/d182e02c610b4f4aa500de36a62dd0f6.png" style="zoom:67%;"><p>注意：每经过一次ABR，都会更改Adv rtr字段和开销字段，（即没经过一个ABR，都会重新成3类LSA）</p><p>每有1条二类LSA或Stub类型的一类LSA，都会产生1条三类LSA</p></blockquote><h4 id="Type-4-LSA"><a href="#Type-4-LSA" class="headerlink" title="Type-4 LSA"></a>Type-4 LSA</h4><blockquote><p>对于与ASBR所在区域不同的设备，当设备收到5类LSA后，由于ASBR无法让其知道自己的信息，去往ASBR路由不可达。此时就需要通过ABR将5类LSA转为4类LSA再发送给设备，描述如何到达ASBR</p><img src="https://img-blog.csdnimg.cn/13404c191753420ca1d883a3ba1a50fa.png" style="zoom:50%;"><img src="https://img-blog.csdnimg.cn/e2d0e405509a4956950a7e57556b1f28.png" style="zoom:67%;"></blockquote><h4 id="Type-5-LSA"><a href="#Type-5-LSA" class="headerlink" title="Type-5 LSA"></a>Type-5 LSA</h4><p>Type-5 LSA报文结构：</p><pre class="line-numbers language-none"><code class="language-none">+-------------------------------+---------------+---------------+|            LS age             |     Options   |      5        |+-------------------------------+---------------+---------------+|                        Link State ID                          |+---------------------------------------------------------------+|                     Advertising Router                        |+---------------------------------------------------------------+|                     LS sequence number                        |+-------------------------------+-------------------------------+|         LS checksum           |             length            |+-------------------------------+-------------------------------+|                         Network Mask                          |+-+-------------+-----------------------------------------------+|E|     0       |                  metric                       |+-+-------------+-----------------------------------------------+|                      Forwarding address                       |+---------------------------------------------------------------+|                      External Route Tag                       |+-+-------------+-----------------------------------------------+|E|    TOS      |                TOS  metric                    |+-+-------------+-----------------------------------------------+|                      Forwarding address                       |+---------------------------------------------------------------+|                      External Route Tag                       |+---------------------------------------------------------------+|                              ...                              |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><img src="https://img-blog.csdnimg.cn/bd2fc10c228146d597a90c0b058fc22e.png" style="zoom:67%;"><img src="https://img-blog.csdnimg.cn/39b1c98496364111af9263c705ca8233.png" style="zoom: 67%;"></blockquote><h4 id="Type-7-LSA"><a href="#Type-7-LSA" class="headerlink" title="Type-7 LSA"></a>Type-7 LSA</h4><blockquote><p>Type-7 LSA也就是非完全末梢区域外部LSA，这是一种特殊的LSA，也是用来描述OSPF外部路由，其报文格式与Type-5 LSA一致。</p><p>Type-7 LSA只能在NSSA内泛洪，并不能进入Area0.</p><img src="https://img-blog.csdnimg.cn/743e1b37bb224c0f8ef2c02ee76a2bd6.png" style="zoom:67%;"><img src="https://img-blog.csdnimg.cn/e4aa38bafa1545d5b2163c5a6f1641c9.png" style="zoom:67%;"></blockquote><h4 id="OSPF-LSDB的交互原则："><a href="#OSPF-LSDB的交互原则：" class="headerlink" title="OSPF LSDB的交互原则："></a>OSPF LSDB的交互原则：</h4><blockquote><p>互相交互自身没有的LSA，以及使用新的LSA 替换掉旧的LSA。</p></blockquote><h4 id="如何判断一个唯一的LSA呢？"><a href="#如何判断一个唯一的LSA呢？" class="headerlink" title="如何判断一个唯一的LSA呢？"></a>如何判断一个唯一的LSA呢？</h4><blockquote><p>使用LSA的三要素：</p><p>1、LSA的类型                    Type </p><p>2、LSA的链路状态ID        Link State ID </p><p>3、LSA的通告者                Adv Router </p></blockquote><h4 id="如何判断LSA的新旧状态呢？"><a href="#如何判断LSA的新旧状态呢？" class="headerlink" title="如何判断LSA的新旧状态呢？"></a>如何判断LSA的新旧状态呢？</h4><blockquote><p>如何判断LSA的新旧状态呢？</p><p>1、首先比较的就是LSA的序列号，初始值为0x80000001，每次OSPF更新的时候都会＋1。</p><p>2、当序列号相同的时候，将会比较校验和，越大越优。</p><p>3、当校验和相同，将会比较LSA的age时间：</p><p>​        ①首先age等于3600s的LSA，用于删除一条LSA。</p><p>​        ②如果两条LSA的age时间相差大于900s，将会选择age数值小的LSA。</p><p>​        ③如果两条LSA的age时间相差小于900s，将会认为相同，保持原有不变。</p></blockquote><h4 id="OSPF的更新机制："><a href="#OSPF的更新机制：" class="headerlink" title="OSPF的更新机制："></a>OSPF的更新机制：</h4><blockquote><p>触发更新：当链路状态发生改变之后OSPF将会触发更新，比如COST变了，网段变了掩码变了，取消宣告。</p><p>周期更新：每个OSPF路由器自身产生的LSA，都会每隔30分钟周期更新一次。</p></blockquote><h4 id="OSPF的老化机制："><a href="#OSPF的老化机制：" class="headerlink" title="OSPF的老化机制："></a>OSPF的老化机制：</h4><blockquote><p>OSPF路由器每产生一条LSA，都会存在一个age时间为3600s，初始值为1，当AGE时间递增到3600s之后，将会认为LSA老化，从自身LSDB中删除此LSA。</p></blockquote><h4 id="OSPF-LSA的删除机制："><a href="#OSPF-LSA的删除机制：" class="headerlink" title="OSPF LSA的删除机制："></a>OSPF LSA的删除机制：</h4><blockquote><p>当OSPF需要删除一条LSA的时候，将会把LSA的age时间变为3600s，当其他路由器接收到这条LSA之后，将会把自身LSDB中对应的LSA删除掉</p></blockquote><h2 id="OSPF区域类型"><a href="#OSPF区域类型" class="headerlink" title="OSPF区域类型"></a>OSPF区域类型</h2><img src="https://img-blog.csdnimg.cn/20210110121031941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc5Mzc4Mg==,size_16,color_FFFFFF,t_70" style="zoom:67%;"><h4 id="骨干区域-Backbone-Area"><a href="#骨干区域-Backbone-Area" class="headerlink" title="骨干区域( Backbone Area)"></a>骨干区域( Backbone Area)</h4><p>骨干区域是Area 0,是整个OSPF域的中心枢纽。一个OSPF域有且只能拥有一个 Area 0,所有的区域间路由必须通过Area0中转。</p><h4 id="常规区域-Normal-Area"><a href="#常规区域-Normal-Area" class="headerlink" title="常规区域( Normal Area)"></a>常规区域( Normal Area)</h4><p>所有的OSPF区域缺省情况下都是常规区域,当然, Area 0是常规区域中比较特殊的一个。</p><p>OSPF要求所有的非骨干区域(非0常规区域)都必须与Area 0直接相连。常规区域中允许Type-1, Type-2. Type-3, Type-4以及Type-5 LSA泛洪, Type-7 LSA禁止出现在常规区域内。<br><img src="https://img-blog.csdnimg.cn/20210110121017891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc5Mzc4Mg==,size_16,color_FFFFFF,t_70" style="zoom:67%;"></p><h4 id="末梢区域-Stub-Area"><a href="#末梢区域-Stub-Area" class="headerlink" title="末梢区域(Stub Area)"></a>末梢区域(Stub Area)</h4><p>末梢区域也被称为Stub区域,当一个非0常规区域只有单一的出口(例如该区域只有一个ABR),或者区域内的路由器不需要根据特定的外部路由来选择离开区域的出口时,该区域可以被配置为Stub区域。</p><p>当一个区域被配置为Stub区域后,这个区域的ABR将阻挡Type-5 LSA进入该区域(禁止外部路由被发布到该区域),通过这种方式可减少区域内所泛洪的LSA数量,同时该区域的ABR自动下发一条使用Type-3 LSA描述的默认路由,使得区域内的路由器能够通过这条默认路由到达域外,因此既减小了区域内网络设备的路由表规模,又保证了其访问外部网络的数据可达性。</p><p>在一个大量引入外部路由的OSPF网络中,将适当的区域配置为Stub区域可以极大地减小该区域内路由器的路由表规模,从而降低设备的资源消耗。另外,对于Stub区域而言,到达OSPF域内其他区域的路,由依然能够被注入,即ABR依然会将描述区域间路由的Type-3 LSA注入到Stub区域中。</p><p>Area 1被配置为Stub区域,这样Area 1的ABR(CO-SW1及Co-sw2)便不能再将Type-5 LSA注入这个区域。由于Type-5 LSA无法进入该区域,因此Type-4LSA也就没有必要再在该区域内泛洪,所以Co-sw1及Co-sw2也就不会再向该区域内注入Type-4 LSA,进而, Router-X的路由表将不会再出现到达省公司(OSPF域外)的具体路由,路由表的规模减小了,设备的资源消耗也就降低了。当然, Router-X访问省公司的需求还是存在的,为了让Router-X发往省公司的流量能顺利到达目的地, ABR会自动向Areal中注入默认路由,该条默认路由使用Type-3 LSA描述, co-SW1及CO-Sw2都会下发默认路由,网络管理员可以通过把控默认路由的Cost从而控制Routerx选择的出口。Router-X发往省公司的流量能够通过该默认路由先到达co-sW1或co-sw2,再通过它们转发到省公司。<br><img src="https://img-blog.csdnimg.cn/2021011012214366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc5Mzc4Mg==,size_16,color_FFFFFF,t_70" style="zoom:67%;"><br>设置末梢区域后ASBR生成Type-5 LSA无法进入，ABR也没有必要生成描述ASBR位置的Type-4 LSA，取而代之的是ABR生成一条描述外部路由的默认路由Type-3 LSA，让stub里的路由器转发发往外部网络的数据时把数据都发给ABR，由ABR统一转发。减小stub区域里的路由器的路由表大小。</p><p>所有连接到stub区域的路由器，对于该区域的stub属性要有一致的认知，否则OSPF邻居关系的建立将会出现问题。</p><p>还可以在ABR上配置，进一步阻挡描述区域间路由的Type-3 LSA进入，区域内的路由器访问区域外的网络时，统一把数据发给ABR。这样，这个区域内只有Type-1 LSA、Type-2 LSA及描述默认路由的Type-3 LSA存在,这意味着区域内路由器的路由表都将只有到达区域内部的路由,以及指向ABR的默认路由,路由器的路由表被极大程度地精简了。这种特殊区域也被称为<strong>完全末梢区域(Totally Stub Area)</strong></p><h4 id="非完全末梢区域-Not-So-Stubby-Area"><a href="#非完全末梢区域-Not-So-Stubby-Area" class="headerlink" title="非完全末梢区域(Not-So-Stubby Area)"></a>非完全末梢区域(Not-So-Stubby Area)</h4><p><strong>NSSA (Not-So-Stubby Area)即非完全末梢区域</strong>,可以理解为Stub区域的变种,它拥有Stub区域的特点—阻挡Type-4及Type-5 LSA进入,从而在一定程度上减少区域内泛洪的LSA数量,同时它还有另一个特点,那就是允许该区域的路由器将少量外部路由引入OSPF,被引入的外部路由,以Type-7 LSA描述,并且这些Type-7 LSA只能够在当前的NSSA内泛洪,不允许直接进入Area0,为了使这些被引入NSSA的外部路由能让OSPF域内的其他区域学习到, NSSA的ABR会将Type-7 LSA转换成Type-5 LSA然后注入Areao,从而泛洪到整个OSPF域。</p><p>Area 1被配置成了NSSA。这样Area 1的ABR将阻挡Type-5 LSA进入这个区域。另一方面, Router-X连接到一个RIP网络,它将路由表中的RIP路由引入OSPF,这些被引入的外部路由以Type-7 LSA描述,这些LSA在Area 1内泛洪,并且禁止进入Area 0.co-sW1及CO-SW2作为NSSA的ABR, 自然也是能收到这些Type-7 LSA的,它们能够根据这些LSA计算出到达RIP网络的路由。</p><p>另外它们也负责将Type-7 LSA转换成Type-5 LSA并将后者注入Area 0,这样这些外部路由便能够被整个OSPF域中的路由器学习到。另一方面, CO-SW1及CO-SW2会向NSSA内下发一条Type-7 LSA的默认路由,使得Router-X能够通过这条默认路由到达省公司。<br><img src="https://img-blog.csdnimg.cn/20210110124852964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc5Mzc4Mg==,size_16,color_FFFFFF,t_70" style="zoom:67%;"><br>RIP通过RX生成的Type-7 LSA来描述，生成的Type-7在NSSA区域内泛洪。ABR收到Type-7后生成Type-5 LSA注入到Area 0中，让其他区域的路由器可以知道这个RIP，同时ABR也会生成一条Type-7 LSA默认路由给RX可以访问省公司。</p><p>我们还可以在NSSA的基础上进一步减少LSA的泛洪。在NSSA的ABR上,可以进一步将Type-3 LSA阻挡掉,从而将区域间的路由都过滤掉,而NSSA的ABR会自动,下发一条默认路由(使用Type-3 LSA描述)到该区域,使得区域内的路由器能够通过这条默认路由访问OSPF域内的其他区域,以及域外的网络。这种类型的特殊区域也被称为Totally NSSA。</p><h4 id="各种区域类型中允许出现的LSA"><a href="#各种区域类型中允许出现的LSA" class="headerlink" title="各种区域类型中允许出现的LSA"></a>各种区域类型中允许出现的LSA</h4><p>表中列举出了在每种OSPF区域类型中,允许出现以及禁止出现的LSA.</p><table><thead><tr><th align="center"></th><th align="center">Type-1</th><th align="center">Type-2</th><th align="center">Type-3</th><th align="center">Type-4</th><th align="center">Type-5</th><th align="center">Type-7</th></tr></thead><tbody><tr><td align="center">常规区域</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">Stub区域</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">Totally Stub区域</td><td align="center">√</td><td align="center">√</td><td align="center">x1</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">NSSA</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">Totally NSSA</td><td align="center">√</td><td align="center">√</td><td align="center">x2</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr></tbody></table><p>(1) ABR会自动下发一条Type-3 LSA的默认路由,除此之外其他的Type-3 LSA都被禁止。<br>(2) ABR会自动下发一条Type-3 LSA的默认路由,除此之外其他的Type-3 LSA都被禁止。</p><h4 id="判断LSA的新旧"><a href="#判断LSA的新旧" class="headerlink" title="判断LSA的新旧"></a>判断LSA的新旧</h4><p>(1)首先,拥有更高链路状态序列号的LSA实例被认为更新,因为路由器每次在刷新LSA的时候,会将该LSA的链路状态序列号加1,链路状态序列号越大,则LSA越新。</p><p>(2)如果LSA实例的链路状态序列号相同,那么拥有更大校验和的LSA实例被认为更新。</p><p>(3)如果LSA实例的链路状态序列号相同、校验和也相同,且某个实例的老化时间被设置为MaxAge (最大老化时间,缺省3600s),则该实例被认为最新。</p><p>(4)如果LSA实例的链路状态序列号相同、校验和也相同,且没有任何一个实例的老化时间被设置为MaxAge,那么当两个实例的老化时间相差超过MaxAgeDif （到达整个AS边界所需的最长时间，通常是15min）时,这两个实例被认为是不同的实例,且老化时间值越小的LSA被认为越新。</p><p>(5)如果LSA实例的链路状态序列号相同、校验和也相同,另外,没有任何一个实例的老化时间被设置为MaxAge,并且,两个实例的老化时间相等,或相差不超过MaxAgeDiff,则它们被认为是相同的实例。</p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 17-OSPF的报文格式</title>
      <link href="/2022-11-12-shu-tong-17-ospf-de-bao-wen-ge-shi.html"/>
      <url>/2022-11-12-shu-tong-17-ospf-de-bao-wen-ge-shi.html</url>
      
        <content type="html"><![CDATA[<h1 id="OSPF的报文格式"><a href="#OSPF的报文格式" class="headerlink" title="OSPF的报文格式"></a><center>OSPF的报文格式</center></h1><h2 id="OSPF的报文格式-1"><a href="#OSPF的报文格式-1" class="headerlink" title="OSPF的报文格式"></a>OSPF的报文格式</h2><p>OSPF报文直接封装为IP报文协议报文，协议号为89。一个比较完整的OSPF报文（以LSU报文为例）结构如图所示。</p><p><img src="https://res.h3c.com/cn/201212/11/20121211_1490341_image008_605874_30003_0.png" alt="img"></p><h4 id="1-OSPF报文头"><a href="#1-OSPF报文头" class="headerlink" title="1. OSPF报文头"></a>1. OSPF报文头</h4><p>OSPF有五种报文类型，它们有相同的报文头。</p><p><img src="https://res.h3c.com/cn/201212/11/20121211_1490342_image009_605874_30003_0.png" alt="img"></p><p>OSPF报文头格式</p><p>主要字段的解释如下：</p><ul><li><p>Version：OSPF的版本号。对于OSPFv2来说，其值为2。</p></li><li><p>Type：OSPF报文的类型。数值从1到5，分别对应Hello报文、DD报文、LSR报文、LSU报文和LSAck报文。</p></li><li><p>Packet length：OSPF报文的总长度，包括报文头在内，单位为字节。</p></li><li><p>Router ID：始发该LSA的路由器的ID。</p></li><li><p>Area ID：始发LSA的路由器所在的区域ID。</p></li><li><p>Checksum：对整个报文的校验和。</p></li><li><p>AuType：验证类型。可分为不验证、简单（明文）口令验证和MD5验证，其值分别为0、1、2。</p></li><li><p>Authentication：其数值根据验证类型而定。当验证类型为0时未作定义，为1时此字段为密码信息，类型为2时此字段包括Key ID、MD5验证数据长度和序列号的信息。</p></li></ul><p>&amp; 说明：</p><p>MD5验证数据添加在OSPF报文后面，不包含在Authenticaiton字段中。</p><h4 id="2-Hello报文（Hello-Packet）"><a href="#2-Hello报文（Hello-Packet）" class="headerlink" title="2. Hello报文（Hello Packet）"></a>2. Hello报文（Hello Packet）</h4><p>最常用的一种报文，周期性的发送给邻居路由器用来维持邻居关系以及DR/BDR的选举，内容包括一些定时器的数值、DR、BDR以及自己已知的邻居。</p><p><img src="https://res.h3c.com/cn/201212/11/20121211_1490343_image010_605874_30003_0.png" alt="img"></p><p>Hello报文格式</p><p>主要字段解释如下：</p><ul><li><p>Network Mask：发送Hello报文的接口所在网络的掩码，如果相邻两台路由器的网络掩码不同，则不能建立邻居关系。</p></li><li><p>HelloInterval：发送Hello报文的时间间隔。如果相邻两台路由器的Hello间隔时间不同，则不能建立邻居关系。</p></li><li><p>Rtr Pri：路由器优先级。如果设置为0，则该路由器接口不能成为DR/BDR。</p></li><li><p>RouterDeadInterval：失效时间。如果在此时间内未收到邻居发来的Hello报文，则认为邻居失效。如果相邻两台路由器的失效时间不同，则不能建立邻居关系。</p></li><li><p>Designated Router：指定路由器的接口的IP地址。</p></li><li><p>Backup Designated Router：备份指定路由器的接口的IP地址。</p></li><li><p>Neighbor：邻居路由器的Router ID。</p><img src="https://img-blog.csdnimg.cn/ed241cdeacd14902abdfb30fb69619c0.png" alt="img" style="zoom:67%;"><p>在广播和NBMA的网络中如果router priority 的数值为0 ，表示不参与DR和BDR的选举。</p><p> <strong>默认下  广播网和p2p—– hello 10秒，dead interval  40秒</strong>      </p><p>​               <strong>NBMA和p2mp—–  hello 30秒，dead interval  120秒</strong></p><p>默认情况下，ospf的接口下hello的死亡时间为hello时间的4倍。默认的hello的时间为10秒钟，Dead Intervel 为40秒。</p><p>修改hello的时间值。</p><pre class="line-numbers language-none"><code class="language-none">进入到接口模式下int g0/0/0ospf timer hello 3 修改之后，如果两边的Hello时间不一致了，邻居就会down掉的哦。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-DD报文（Database-Description-Packet）"><a href="#3-DD报文（Database-Description-Packet）" class="headerlink" title="3. DD报文（Database Description Packet）"></a>3. DD报文（Database Description Packet）</h4><p>两台路由器进行数据库同步时，用DD报文来描述自己的LSDB，内容包括LSDB中每一条LSA的Header（LSA的Header可以唯一标识一条LSA）。LSA Header只占一条LSA的整个数据量的一小部分，这样可以减少路由器之间的协议报文流量，对端路由器根据LSA Header就可以判断出是否已有这条LSA。</p><p><img src="https://res.h3c.com/cn/201212/11/20121211_1490344_image011_605874_30003_0.png" alt="img"></p><p>DD报文格式</p><p>主要字段的解释如下：</p><ul><li><p>Interface MTU：在不分片的情况下，此接口最大可发出的IP报文长度。</p></li><li><p>I（Initial）：当发送连续多个DD报文时，如果这是第一个DD报文，则置为1，否则置为0。</p></li><li><p>M（More）：当连续发送多个DD报文时，如果这是最后一个DD报文，则置为0。否则置为1，表示后面还有其他的DD报文。</p></li><li><p>MS（Master/Slave）：当两台OSPF路由器交换DD报文时，首先需要确定双方的主（Master）从（Slave）关系，Router ID大的一方会成为Master。当值为1时表示发送方为Master。</p></li><li><p>DD Sequence Number：DD报文序列号，由Master方规定起始序列号，每发送一个DD报文序列号加1，Slave方使用Master的序列号作为确认。主从双方利用序列号来保证DD报文传输的可靠性和完整性。</p><img src="https://img-blog.csdnimg.cn/165cef9a38124da9858bf493f809dd9e.png" alt="img" style="zoom:67%;"><p>为什么需要DD报文？</p><ul><li>主要的作用是为了实现按需同步。</li></ul><p>DD报文传输的可靠性机制如何确保？</p><ul><li>在Exstart互相发送空的DD报文，用于选举主从关系，从设备会跟随主设备的DD序列号，当主设备收到从设备的DD序列号之后，将会把SEQ＋1发送自己的DD给从设备，从设备收到Seq＋1的DD判断，先前自身发送的DD主设备已经收到。</li></ul><p>主从选举之后，由<strong>从设备</strong>将邻居角色转为exchange状态，先发送带有LSA摘要信息的DD报文。</p></li></ul><h4 id="4-LSR报文（Link-State-Request-Packet）"><a href="#4-LSR报文（Link-State-Request-Packet）" class="headerlink" title="4. LSR报文（Link State Request Packet）"></a>4. LSR报文（Link State Request Packet）</h4><p>两台路由器互相交换过DD报文之后，知道对端的路由器有哪些LSA是本地的LSDB所缺少的，这时需要发送LSR报文向对方请求所需的LSA。内容包括所需要的LSA的摘要。LSR报文格式如图12所示。</p><p><img src="https://res.h3c.com/cn/201212/11/20121211_1490345_image012_605874_30003_0.png" alt="img"></p><p>LSR报文格式</p><p>主要字段解释如下：</p><ul><li><p>LS type：链路状态类型。例如Type1表示Router LSA。</p></li><li><p>Link State ID：链路状态标识，根据LSA的类型而定。</p></li><li><p>Advertising Router：产生此LSA的路由器的Router ID。</p></li><li><img src="https://img-blog.csdnimg.cn/1a2877900bfa4cc8be176ca231c98bc9.png" style="zoom:67%;"></li></ul><h4 id="5-LSU报文（Link-State-Update-Packet）"><a href="#5-LSU报文（Link-State-Update-Packet）" class="headerlink" title="5. LSU报文（Link State Update Packet）"></a>5. LSU报文（Link State Update Packet）</h4><p>LSU报文用来向对端路由器发送所需要的LSA，内容是多条LSA（全部内容）的集合。LSU报文格式如图13所示。</p><p><img src="https://res.h3c.com/cn/201212/11/20121211_1490346_image013_605874_30003_0.png" alt="img"></p><p>LSU报文格式</p><p>主要字段解释如下：</p><ul><li><p>Number of LSAs：该报文包含的LSA的数量。</p></li><li><p>LSAs：该报文包含的所有LSA。</p><img src="https://img-blog.csdnimg.cn/e3f26a7f24dc42a8bbedb03fc8afa924.png" style="zoom:67%;"></li></ul><h4 id="6-LSAck报文（Link-State-Acknowledgment-Packet）"><a href="#6-LSAck报文（Link-State-Acknowledgment-Packet）" class="headerlink" title="6. LSAck报文（Link State Acknowledgment Packet）"></a>6. LSAck报文（Link State Acknowledgment Packet）</h4><p>LSAck报文用来对接收到的LSU报文进行确认，内容是需要确认的LSA的Header。一个LSAck报文可对多个LSA进行确认。报文格式如图14所示。</p><p><img src="https://res.h3c.com/cn/201212/11/20121211_1490347_image014_605874_30003_0.png" alt="img"></p><p>LSAck报文格式</p><p>主要字段解释如下：</p><ul><li>LSA Headers：该报文包含的LSA头部</li><li><img src="https://img-blog.csdnimg.cn/5a3ed9bc87ac464d95058f2b8dc68d8e.png" style="zoom:67%;"></li></ul><p>LSU和LSACK的发送地址根据路由器角色有所变化以下将一一列出：</p><p><strong>DRother：DRother产生的LSU通过224.0.0.6发送给DR和BDR；DR通过224.0.0.5发送给其他的DRoher和BDR；DRother 收到DR的LSU之后通过224.0.0.6发送ACK确认，BDR收到DR的LSU之后通过组播地址224.0.0.5发送ACK向DR确认。</strong></p><p><strong>DR：DR产生的LSU通过224.0.0.5发送给其他DRother和BDR；BDR收到之后通过224.0.0.5发送ACK向DR进行确认； DRother收到之后通过224.0.0.6发送ACK向DR确认。</strong></p><p><strong>BDR：BDR产生的LSU通过224.0.0.5发送给其他的DRother和DR，DR收到之后通过224.0.0.5发送ACK向BDR确认， DRother收到之后通过224.0.0.6发送ACK向BDR确认。</strong></p><p>DR和BDR同时监听224.0.0.5和224.0.0.6两个组播地址，drother只监听在224.0.0.5。需要注意一点在初次建立邻居的时候会产生LSR报文，而LSR是单播发送的报文，在广播网络类型中中无论是DR，BDR还是DRother只要收到了LSR之后，都会以单播的形式发送LSU更新。ACK则正常发送。</p><p>DR与BDR的区别在于DR收到DRother的LSU则泛洪，BDR不做任何相应。 </p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 16-OSPF的基本概念</title>
      <link href="/2022-10-24-shu-tong-16-ospf-de-ji-ben-gai-nian.html"/>
      <url>/2022-10-24-shu-tong-16-ospf-de-ji-ben-gai-nian.html</url>
      
        <content type="html"><![CDATA[<h1 id="OSPF的基本概念"><a href="#OSPF的基本概念" class="headerlink" title="OSPF的基本概念"></a><center>OSPF的基本概念</center></h1><h2 id="OSPF"><a href="#OSPF" class="headerlink" title="OSPF"></a>OSPF</h2><p>OSPF(Open Shortest Path First,开放式最短路径优先)是IETF（Internet Engineering Task Force，互联网工程任务组）组织开发的一个基于链路状态的内部网关协议。目前针对IPv4协议使用的是OSPF Version 2。</p><h2 id="OSPF的特点"><a href="#OSPF的特点" class="headerlink" title="OSPF的特点"></a>OSPF的特点</h2><p>OSPF具有如下特点：</p><ul><li><strong>适应范围广</strong>：支持各种规模的网络，最多可支持几百台路由器。</li><li><strong>快速收敛</strong>：在网络的拓扑结构发生变化后立即发送更新报文，使这一变化在自治系统中同步。</li><li><strong>无自环</strong>：由于OSPF根据收集到的链路状态用最短路径树算法计算路由，从算法本身保证了不会生成自环路由。</li><li><strong>区域划分</strong>：允许自治系统的网络被划分成区域来管理。路由器链路状态数据库的减小降低了内存的消耗和CPU的负担；区域间传送路由信息的减少降低了网络带宽的占用。</li><li><strong>等价路由</strong>：支持到同一目的地址的多条等价路由。</li><li><strong>路由分级</strong>：使用4类不同的路由，按优先顺序来说分别是：区域内路由、区域间路由、第一类外部路由、第二类外部路由。</li><li><strong>支持验证</strong>：支持基于接口的报文验证，以保证报文交互和路由计算的安全性。</li><li><strong>组播发送</strong>：在某些类型的链路上以组播地址发送协议报文，减少对其他设备的干扰。</li></ul><h2 id="OSPF基础概念"><a href="#OSPF基础概念" class="headerlink" title="OSPF基础概念"></a>OSPF基础概念</h2><h4 id="Router-ID"><a href="#Router-ID" class="headerlink" title="Router ID"></a>Router ID</h4><p>如果要运行OSPF协议，必须存在Router ID。Router  ID是一个32比特无符号整数，用于在OSPF域（Domain）中唯一地标识一台OSPF路由器。OSPF要求路由器的Router-ID必须全域唯一，即在同一个域内不允许出现两台OSPF路由器拥有相同的Router-ID的情况。</p><p>Router ID的设定有两种方式：</p><ul><li><p>通过命令行手动配置，在实际网络部署中，建议手工配置OSPF的Router ID，因为这关系到协议的稳定。</p></li><li><p>通过协议自动选取。</p><p>如果没有手动配置Router ID，设备会从当前接口的IP地址中自动选取一个作为Router ID。其选取顺序是：</p><ol><li>优先从Loopback地址中选择最大的IP地址作为Router ID。</li><li>如果没有配置Loopback接口，则在接口地址中选取最大的IP地址作为Router ID。</li></ol></li></ul><p>在路由器运行了OSPF并确定了Router ID后，如果该Router ID对应的接口Down或者接口消失（例如执行了<strong>undo interface loopback</strong> <em>loopback-number</em>）或者出现更大的IP地址，OSPF将仍然保持原Router ID。只有重新配置系统的Router  ID或者OSPF的Router ID，并且重新启动OSPF进程后（重启OSPF进程的命令  <strong><router>reset ospf process</router></strong>），才会进行Router ID的重新选取。</p><h4 id="链路状态"><a href="#链路状态" class="headerlink" title="链路状态"></a>链路状态</h4><p>OSPF是一种链路状态协议。可以将链路视为路由器的接口。链路状态是对接口及接口与相邻路由器的关系的描述。例如接口的信息包括接口的IP地址、掩码、所连接的网络的类型、连接的邻居等。所有这些链路状态的集合形成链路状态数据库。</p><h4 id="COST"><a href="#COST" class="headerlink" title="COST"></a>COST</h4><ul><li><p>OSPF使用cost“开销”作为路由度量值。</p></li><li><p>每一个激活OSPF的接口都有一个cost值。OSPF接口cost=100M/接口带宽，其中100M为OSPF的参考带宽（reference-bandwidth）。</p></li><li><p>一条OSPF路由的cost由该路由从路由的起源一路到达本地的所有入接口cost值的总和。</p><p><img src="https://download.huawei.com/mdl/image/download?uuid=4d039cad0996458293e1ef379d855fed" alt="img"> </p><p>由于默认的参考带宽是100M，这意味着更高带宽的传输介质（高于100M）在OSPF协议中将会计算出一个小于1的分数，这在OSPF协议中是不允许的（会被四舍五入为1）。而现今网络设备很多都是大于100M带宽的接口，这时候路由cost的计算其实就不精确了。所以可以使用<strong>bandwidth-reference</strong>命令修改，但是这条命令要谨慎使用，一旦要配置，则建议全网OSPF路由器都配置。</p></li></ul><h4 id="自治系统（Autonomous-System）"><a href="#自治系统（Autonomous-System）" class="headerlink" title="自治系统（Autonomous System）"></a>自治系统（Autonomous System）</h4><p>一组使用相同路由协议交换路由信息的路由器，缩写为AS。</p><p>由统一的管理者构建的网络系统，叫做一个AS私有AS运行相同的IGP协议，策略比较单一。</p><p>公有AS：网络系统 申请一个AS号</p><p>私有AS：不需要申请的（家里的路由器就可以算一个私有AS）</p><h4 id="IGP-EGP"><a href="#IGP-EGP" class="headerlink" title="IGP/EGP"></a>IGP/EGP</h4><p>动态路由协议：</p><ul><li><strong>IGP协议</strong>：内部网关协议   AS内  OSPF IS-IS（IS-IS主要在运营商之间使用） </li><li><strong>EGP协议</strong>：外部网关协议  AS间  BGP </li></ul><h4 id="OSPF路由的计算过程"><a href="#OSPF路由的计算过程" class="headerlink" title="OSPF路由的计算过程"></a>OSPF路由的计算过程</h4><p>OSPF协议路由的计算过程可简单描述如下：</p><ul><li>每台OSPF路由器根据自己周围的网络拓扑结构生成LSA（Link State Advertisement，链路状态通告），并通过更新报文将LSA发送给网络中的其它OSPF路由器。</li><li>每台OSPF路由器都会收集其它路由器通告的LSA，所有的LSA放在一起便组成了LSDB（Link State Database，链路状态数据库）。LSA是对路由器周围网络拓扑结构的描述，LSDB则是对整个自治系统的网络拓扑结构的描述。</li><li>OSPF路由器将LSDB转换成一张带权的有向图，这张图便是对整个网络拓扑结构的真实反映。各个路由器得到的有向图是完全相同的。</li><li>每台路由器根据有向图，使用SPF算法计算出一棵<strong>以自己为根的最短路径树</strong>，这棵树给出了到自治系统中各节点的路由。</li></ul><h4 id="OSPF的三张表"><a href="#OSPF的三张表" class="headerlink" title="OSPF的三张表"></a>OSPF的三张表</h4><p>OSPF使用三张表格以确保其正常运行</p><ul><li>邻居表（Peer Table 或 Neighbor Table）</li></ul><pre class="line-numbers language-none"><code class="language-none">display ospf peer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>链路状态数据库（Link-State Database，LSDB）</li></ul><pre class="line-numbers language-none"><code class="language-none">display ospf lsdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>OSPF路由表（Routing Table）</li></ul><pre class="line-numbers language-none"><code class="language-none">display ospf routing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="报文类型及格式"><a href="#报文类型及格式" class="headerlink" title="报文类型及格式"></a>报文类型及格式</h4><table><thead><tr><th>报文类型</th><th>报文作用</th></tr></thead><tbody><tr><td>Hello报文</td><td>周期性发送，用来发现和维护OSPF邻居关系。</td></tr><tr><td>DD报文（Database Description packet）</td><td>描述本地LSDB（Link State Database）中LSA的头部数据（非完整的LSA，仅仅是头部数据），用于两台设备进行数据库同步。</td></tr><tr><td>LSR报文（Link State Request packet）</td><td>用于向OSPF邻居请求LSA</td></tr><tr><td>LSU报文（Link State Update packet）</td><td>用于向对方发送其所需要的完整的LSA。LSA是承载在LSU中进行泛洪的</td></tr><tr><td>LSAck报文（Link State Acknowledgment packet）</td><td>用来对接收到的LSA进行确认。</td></tr></tbody></table><p>所有OSPF报文都有统一的头部，这个头部的长度为24byte。</p><pre class="line-numbers language-none"><code class="language-none">+---------------+---------------+--------------------------------------+| Version(8bit) |  Type(8bit)   |         Packet length(16bit)         |+---------------+---------------+--------------------------------------+|                          Router ID(32bit)                            |+----------------------------------------------------------------------+|                           Area ID(32bit)                             |+-------------------------------+--------------------------------------+|        Checksum(16bit)        |             AuType(16bit)            |+-------------------------------+--------------------------------------+|                       Authentication Type(32bit)                     |+----------------------------------------------------------------------+|                       Authentication Data(32bit)                     |+----------------------------------------------------------------------+version： ospf协议的版本号，版本2支持ipv4，版本3支持ipv6Message Type：报文类型，hello,dd,lsr,lsu,lsack 五种报文类型  分别对应数值1,2,3,4,5Packet Length：报文总长度，包括hello报文，单位字节Source OSPF Router: 发送该报文的路由器的RouterIDArea ID：发送该报文的接口所在的ospf区域Checksum:校验和Auth Type：ospf的认证类型Auth Data：ospf的加密密钥<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="协议栈结构"><a href="#协议栈结构" class="headerlink" title="协议栈结构"></a>协议栈结构</h4><pre class="line-numbers language-none"><code class="language-none">+-------------------------------------+|                  OSPF               |+-------------------------------------+|             IPv4 Header             |+-------------------------------------+|                  L2                 |+-------------------------------------+|                  L1                 |+-------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="邻接关系"><a href="#邻接关系" class="headerlink" title="邻接关系"></a>邻接关系</h4><p>在OSPF网络中，为了交换路由信息，邻居设备之间首先要建立邻接关系，邻居（Neighbors）关系和邻接（Adjacencies）关系是两个不同的概念。</p><ul><li>邻居关系：OSPF设备启动后，会通过OSPF接口向外发送Hello报文，收到Hello报文的OSPF设备会检查报文中所定义的参数，如果双方一致就会形成邻居关系，两端设备互为邻居。</li><li>邻接关系：形成邻居关系后，如果两端设备成功交换DD报文和LSA，才建立邻接关系。</li></ul><p>OSPF共有8种状态机，分别是：Down、Attempt、Init、2-way、Exstart、Exchange、Loading、Full。</p><img src="https://img-blog.csdnimg.cn/5a78f91af1c042fe85362759d4e35ce9.png" style="zoom: 67%;"><p><strong>注意：DR和BDR的选举时间是在2-Way和Exstart之间，而在Exstart开始后发送的第一个空DD报文，用于协商两台路由器之间的主从(Master/Slave)，也称为DD的隐式确认。</strong></p><p><img src="https://img-blog.csdnimg.cn/d75270e9dbd4446ab490bda56c649da0.png"></p><ul><li><p>Down(失效)：邻居会话的初始阶段，表明没有在邻居失效时间间隔内收到来自邻居路由器的Hello数据包。</p></li><li><p>Attempt(尝试)：该状态仅发生在NBMA网络中，表明对端在邻居失效时间间隔（dead interval）超时前仍然没有回复Hello报文。此时路由器依然每发送轮询Hello报文的时间间隔（poll interval）向对端发送Hello报文。</p></li><li><p>Init(初始)：收到Hello报文后状态为Init。</p></li><li><p>2-way(双向通信)：收到的Hello报文中包含有自己的Router ID，则状态为2-way；如果不需要形成邻接关系则邻居状态机就停留在此状态，否则进入Exstart状态。</p></li><li><p>Exstart(交换初始)：开始协商主从关系，并确定DD的序列号，此时状态为Exstart。</p></li><li><p>Exchange(交换)：主从关系协商完毕后开始交换DD报文，此时状态为Exchange。</p></li><li><p>Loading(加载)：DD报文交换完成即Exchange done，此时状态为Loading。</p></li><li><p>Full(全毗邻)：LSR重传列表为空，此时状态为Full。</p></li><li><p>OSPF邻居建立的条件：</p><pre class="line-numbers language-none"><code class="language-none">1、版本一致2、Router-ID不能冲突3、区域ID一致。4、认证类型和认证密码一致。5、两端接口IP要求在相同网段。6、两端接口掩码要求相同。7、Hello发送时间间隔一致。8、Dead时间一致。9、option 选项中 Nbit和Ebit需要一致。10、双方接口的MTU一致。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="OSPF的网络类型"><a href="#OSPF的网络类型" class="headerlink" title="OSPF的网络类型"></a>OSPF的网络类型</h2><h4 id="OSPF的4种网络类型"><a href="#OSPF的4种网络类型" class="headerlink" title="OSPF的4种网络类型"></a>OSPF的4种网络类型</h4><p>OSPF根据链路层协议类型将网络分为下列四种类型：</p><table><thead><tr><th>网络类型</th><th>含义</th></tr></thead><tbody><tr><td>广播类型（Broadcast）</td><td>当链路层协议是Ethernet、FDDI时，缺省情况下，OSPF认为网络类型是Broadcast。 在该类型的网络中： 通常以组播形式发送Hello报文、LSU报文和LSAck报文。其中，224.0.0.5的组播地址为OSPF设备的预留IP组播地址；224.0.0.6的组播地址为OSPF DR/BDR（ Backup Designated Router）的预留IP组播地址。以单播形式发送DD报文和LSR报文。</td></tr><tr><td>NBMA类型（Non-Broadcast Multi-Access）</td><td>当链路层协议是帧中继、X.25时，缺省情况下，OSPF认为网络类型是NBMA。 在该类型的网络中，以单播形式发送协议报文（Hello报文、DD报文、LSR报文、LSU报文、LSAck报文）。</td></tr><tr><td>P2MP类型（Point-to-Multipoint）</td><td>没有一种链路层协议会被缺省的认为是Point-to-Multipoint类型。点到多点必须是由其他的网络类型强制更改的。常用做法是将非全连通的NBMA改为点到多点的网络。 在该类型的网络中： 以组播形式（224.0.0.5）发送Hello报文。以单播形式发送其他协议报文（DD报文、LSR报文、LSU报文、LSAck报文）。</td></tr><tr><td>P2P类型（point-to-point）</td><td>当链路层协议是PPP、HDLC和LAPB时，缺省情况下，OSPF认为网络类型是P2P。 在该类型的网络中，以组播形式（224.0.0.5）发送协议报文（Hello报文、DD报文、LSR报文、LSU报文、LSAck报文）。</td></tr></tbody></table><h4 id="NBMA网络的配置原则"><a href="#NBMA网络的配置原则" class="headerlink" title="NBMA网络的配置原则"></a>NBMA网络的配置原则</h4><p>NBMA网络是指非广播、多点可达的网络，比较典型的有ATM和帧中继网络。</p><p>对于接口的网络类型为NBMA的网络需要进行一些特殊的配置。由于无法通过广播Hello报文的形式发现相邻路由器，必须手工为该接口指定相邻路由器的IP地址，以及该相邻路由器是否有DR选举权等。</p><p>NBMA网络必须是全连通的，即网络中任意两台路由器之间都必须有一条虚电路直接可达。如果部分路由器之间没有直接可达的链路时，应将接口配置成P2MP类型。如果路由器在NBMA网络中只有一个对端，也可将接口类型配置为P2P类型。</p><p>NBMA与P2MP网络之间的区别如下：</p><ul><li>NBMA网络是指那些全连通的、非广播、多点可达网络。而P2MP网络，则并不需要一定是全连通的。</li><li>在NBMA网络中需要选举DR与BDR，而在P2MP网络中没有DR与BDR。</li><li>NBMA是一种缺省的网络类型，而P2MP网络必须是由其它的网络强制更改的。最常见的做法是将NBMA网络改为P2MP网络。</li><li>NBMA网络采用单播发送报文，需要手工配置邻居。P2MP网络采用组播方式发送报文。</li></ul><h3 id="DR和BDR"><a href="#DR和BDR" class="headerlink" title="DR和BDR"></a>DR和BDR</h3><p>在广播网和NBMA网络中，任意两台路由器之间都要传递路由信息。如图所示，网络中有n台路由器，则需要建立n*(n-1)/2个邻接关系。这使得任何一台路由器的路由变化都会导致多次传递，浪费了带宽资源。为解决这一问题，OSPF定义了指定路由器DR和备份指定路由器BDR。通过选举产生DR（Designated Router）后，所有路由器都只将信息发送给DR，由DR将网络链路状态LSA广播出去。除DR和BDR之外的路由器（称为DR  Other）之间将不再建立邻接关系，也不再交换任何路由信息，这样就减少了广播网和NBMA网络上各路由器之间邻接关系的数量。</p><p> 选举DR前后对比图<br><img src="https://download.huawei.com/mdl/image/download?uuid=cbb680e5ce9649548861b65001616f40" alt="img"></p><p>如果DR由于某种故障而失效，则网络中的路由器必须重新选举DR，并与新的DR同步。这需要较长的时间，在这段时间内，路由的计算有可能是不正确的。为了能够缩短这个过程，OSPF提出了BDR（Backup Designated  Router）的概念。BDR是对DR的一个备份，在选举DR的同时也选举出BDR，BDR也和本网段内的所有路由器建立邻接关系并交换路由信息。当DR失效后，BDR会立即成为DR。由于不需要重新选举，并且邻接关系已建立，所以这个过程非常短暂，这时还需要再重新选举出一个新的BDR，虽然一样需要较长的时间，但并不会影响路由的计算。</p><p>DR和BDR不是人为指定的，而是由本网段中所有的路由器共同选举出来的。路由器接口的DR优先级决定了该接口在选举DR、BDR时所具有的资格。本网段内DR优先级大于0的路由器都可作为“候选人”。选举中使用的“选票”就是Hello报文。每台路由器将自己选出的DR写入Hello报文中，发给网段上的其他路由器。当处于同一网段的两台路由器同时宣布自己是DR时，DR优先级高者胜出。如果优先级相等，则Router ID大者胜出。如果一台路由器的优先级为0，则它不会被选举为DR或BDR。</p><h4 id="DR-BDR选举过程"><a href="#DR-BDR选举过程" class="headerlink" title="DR/BDR选举过程"></a>DR/BDR选举过程</h4><p>DR和BDR是由同一网段中所有的路由器根据路由器优先级、Router ID通过HELLO报文选举出来的，只有优先级大于0的路由器才具有选取资格。</p><p>进行DR/BDR选举时每台路由器将自己选出的DR写入Hello报文中，发给网段上的每台运行OSPF协议的路由器。当处于同一网段的两台路由器同时宣布自己是DR时，路由器优先级高者胜出。如果优先级相等，则Router ID大者胜出。如果一台路由器的优先级为0，则它不会被选举为DR或BDR。</p><p>需要注意的是：</p><ul><li>只有在广播或NBMA类型接口才会选举DR，在点到点或点到多点类型的接口上不需要选举DR。</li><li>DR是某个网段中的概念，是针对路由器的接口而言的。某台路由器在一个接口上可能是DR，在另一个接口上有可能是BDR，或者是DR Other。</li><li>路由器的优先级可以影响一个选取过程，但是当DR/BDR已经选取完毕，就算一台具有更高优先级的路由器变为有效，也不会替换该网段中已经选取的DR/BDR成为新的DR/BDR。</li><li>DR并不一定就是路由器优先级更高的路由器接口；同理，BDR也并不一定就是路由器优先级次高的路由器接口。</li></ul><pre class="line-numbers language-none"><code class="language-none">一个路由成能成为多个DR设备吗？可以一个链路上能够存在多个DR吗？一条链路只能存在一个DR。一个链路上能够存在多个BDR吗？一条链路只能存在一个BDR。一个链路上能存在多个DROther吗？可以一个链路上能不存在DROther吗？可以一个链路上能不存在BDR吗？可以<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">1.当DR故障之后如何解决？BDR成为新的DR，重新选举BDR。2.当BDR故障之后如何解决？从DROther中重新选举BDR。3.当DROther故障如何解决？其他连接到该链路的路由器，角色不会产生变化。4.故障的DR再次恢复，成为什么角色？如果该链路中，已经有了DR和BDR那么只能成为DROther。5.如果故障的BDR再次恢复，成为什么角色？如果改链路中，已经有了DR和BDR，那么只能成为DROther。说白了，就是DR和BDR都不能被强占。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LSA类型"><a href="#LSA类型" class="headerlink" title="LSA类型"></a>LSA类型</h3><table><thead><tr><th>LSA类型</th><th>LSA作用</th></tr></thead><tbody><tr><td>Router-LSA（Type1）</td><td>每个设备都会产生，描述了设备的链路状态和开销，在所属的区域内传播。</td></tr><tr><td>Network-LSA（Type2）</td><td>由DR（Designated Router）产生，描述本网段的链路状态，在所属的区域内传播。</td></tr><tr><td>Network-summary-LSA（Type3）</td><td>由ABR产生，描述区域内某个网段的路由，并通告给发布或接收此LSA的非Totally  STUB或NSSA区域。例如：ABR同时属于Area0和Area1，Area0内存在网段10.1.1.0，Area1内存在网段11.1.1.0，ABR为Area0生成到网段11.1.1.0的Type3 LSA；ABR为Area1生成到网段10.1.1.0的Type3 LSA，并通告给发布或接收此LSA的非Totally  Stub或NSSA区域。</td></tr><tr><td>ASBR-summary-LSA（Type4）</td><td>由ABR产生，描述到ASBR的路由，通告给除ASBR所在区域的其他相关区域。</td></tr><tr><td>AS-external-LSA（Type5）</td><td>由ASBR产生，描述到AS外部的路由，通告到所有的区域（除了STUB区域和NSSA区域）。</td></tr><tr><td>NSSA LSA（Type7）</td><td>由ASBR产生，描述到AS外部的路由，仅在NSSA区域内传播。</td></tr><tr><td>Opaque LSA（Type9/Type10/Type11）</td><td>Opaque LSA提供用于OSPF的扩展的通用机制。其中： Type9 LSA仅在接口所在网段范围内传播。用于支持GR的Grace LSA就是Type9 LSA的一种。Type10 LSA在区域内传播。用于支持TE的LSA就是Type10 LSA的一种。Type11 LSA在自治域内传播，目前还没有实际应用的例子。</td></tr></tbody></table><h3 id="LSA在各区域中传播的支持情况"><a href="#LSA在各区域中传播的支持情况" class="headerlink" title="LSA在各区域中传播的支持情况"></a>LSA在各区域中传播的支持情况</h3><table><thead><tr><th>区域类型</th><th>Router-LSA（Type1）</th><th>Network-LSA（Type2）</th><th>Network-summary-LSA（Type3）</th><th>ASBR-summary-LSA（Type4）</th><th>AS-external-LSA（Type5）</th><th>NSSA LSA（Type7）</th></tr></thead><tbody><tr><td>普通区域（包括标准区域和骨干区域）</td><td>是</td><td>是</td><td>是</td><td>是</td><td>是</td><td>否</td></tr><tr><td>Stub区域</td><td>是</td><td>是</td><td>是</td><td>否</td><td>否</td><td>否</td></tr><tr><td>Totally Stub区域</td><td>是</td><td>是</td><td>否</td><td>否</td><td>否</td><td>否</td></tr><tr><td>NSSA区域</td><td>是</td><td>是</td><td>是</td><td>否</td><td>否</td><td>是</td></tr><tr><td>Totally NSSA区域</td><td>是</td><td>是</td><td>否</td><td>否</td><td>否</td><td>是</td></tr></tbody></table><h3 id="路由器类型"><a href="#路由器类型" class="headerlink" title="路由器类型"></a>路由器类型</h3><p>OSPF协议中常用到的路由器类型如图所示。<br><img src="https://download.huawei.com/mdl/image/download?uuid=a1b351c20c5748b9b00f0b1d8277e33e" alt="img"></p><table><thead><tr><th>路由器类型</th><th>含义</th></tr></thead><tbody><tr><td>区域内路由器（Internal Router）</td><td>该类设备的所有接口都属于同一个OSPF区域。</td></tr><tr><td>区域边界路由器ABR（Area Border Router）</td><td>该类设备可以同时属于两个以上的区域，但其中一个必须是骨干区域。 ABR用来连接骨干区域和非骨干区域，它与骨干区域之间既可以是物理连接，也可以是逻辑上的连接。</td></tr><tr><td>骨干路由器（Backbone Router）</td><td>该类设备至少有一个接口属于骨干区域。 所有的ABR和位于Area0的内部设备都是骨干路由器。</td></tr><tr><td>自治系统边界路由器ASBR（AS Boundary Router）</td><td>与其他AS交换路由信息的设备称为ASBR。 ASBR并不一定位于AS的边界，它可能是区域内设备，也可能是ABR。只要一台OSPF设备引入了外部路由的信息，它就成为ASBR。</td></tr></tbody></table><h3 id="路由类型"><a href="#路由类型" class="headerlink" title="路由类型"></a>路由类型</h3><p>AS区域内和区域间路由描述的是AS内部的网络结构，AS外部路由则描述了应该如何选择到AS以外目的地址的路由。OSPF将引入的AS外部路由分为Type1和Type2两类。</p><p>如下表中按优先级从高到低顺序列出了路由类型。</p><table><thead><tr><th>路由类型</th><th>含义</th></tr></thead><tbody><tr><td>Intra Area</td><td>区域内路由。</td></tr><tr><td>Inter Area</td><td>区域间路由。</td></tr><tr><td>第一类外部路由（Type1 External）</td><td>这类路由的可信程度高一些，所以计算出的外部路由的开销与自治系统内部的路由开销是相当的，并且和OSPF自身路由的开销具有可比性。 到第一类外部路由的开销=本设备到相应的ASBR的开销+ASBR到该路由目的地址的开销。</td></tr><tr><td>第二类外部路由（Type2 External）</td><td>这类路由的可信度比较低，所以OSPF协议认为从ASBR到自治系统之外的开销远远大于在自治系统之内到达ASBR的开销。 所以，OSPF计算路由开销时只考虑ASBR到自治系统之外的开销，即到第二类外部路由的开销=ASBR到该路由目的地址的开销。</td></tr></tbody></table><h3 id="区域类型"><a href="#区域类型" class="headerlink" title="区域类型"></a>区域类型</h3><table><thead><tr><th>区域类型</th><th>作用</th></tr></thead><tbody><tr><td>普通区域</td><td>缺省情况下，OSPF区域被定义为普通区域。普通区域包括标准区域和骨干区域。 标准区域是最通用的区域，它传输区域内路由，区域间路由和外部路由。骨干区域是连接所有其他OSPF区域的中央区域。骨干区域通常用Area 0表示。</td></tr><tr><td>STUB区域</td><td>不允许发布自治系统外部路由，只允许发布区域内路由和区域间的路由。 在STUB区域中，路由器的路由表规模和路由信息传递的数量都会大大减少。 为了保证到自治系统外的路由可达，由该区域的ABR发布Type3缺省路由传播到区域内，所有到自治系统外部的路由都必须通过ABR才能发布。</td></tr><tr><td>Totally STUB区域</td><td>不允许发布自治系统外部路由和区域间的路由，只允许发布区域内路由。 在Totally STUB区域中，路由器的路由表规模和路由信息传递的数量都会大大减少。 为了保证到自治系统外和其他区域的路由可达，由该区域的ABR发布Type3缺省路由传播到区域内，所有到自治系统外部和其他区域的路由都必须通过ABR才能发布。</td></tr><tr><td>NSSA区域</td><td>NSSA区域允许引入自治系统外部路由，由ASBR发布Type7 LSA通告给本区域，这些Type7 LSA在ABR上转换成Type5 LSA，并且泛洪到整个OSPF域中。 NSSA区域同时保留自治系统内的STUB区域的特征。 该区域的ABR发布Type7缺省路由传播到区域内，所有域间路由都必须通过ABR才能发布。</td></tr><tr><td>Totally NSSA区域</td><td>Totally NSSA区域允许引入自治系统外部路由，由ASBR发布Type7 LSA通告给本区域，这些Type7 LSA在ABR上转换成Type5 LSA，并且泛洪到整个OSPF域中。 Totally NSSA区域同时保留自治系统内的Totally STUB Area区域的特征。 该区域的ABR发布Type3和Type7缺省路由传播到区域内，所有域间路由都必须通过ABR才能发布。</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/61e4f55618a94d3e80544ef26100501d.png"></p><pre class="line-numbers language-none"><code class="language-none">1、stub[AR2—ospf—1—area—0. 0.0. 1]stub //配置该区域为stub区域。1)在该区域下所有的接口发送的OSPF Hello报文E bit等于0.2)OSPF路由器不会将， 4、5类LSA传递给特殊区域下的OSPF邻居。3)ABR将会产生一条缺省的3类LSA，帮助Stub区域内的设备访问外部网络。4)stub区域内的设备不能引入外部路由。5)Stub区域内缺少了5类LSA，所以stub区域内的设备，将没有办法根据5类LSA选择出去往外部路由的最优路径，当Stub存在多个ABR的时候，将会产生次优路径的风险。解决方式： ①在ABR上手动调整，自身产生缺省路由的cost值。（使用最多）  ②手动调整区域内设备的路径cost，使其优选最优的ABR作为出口。 ③在区域内的设备上针对下一跳地址，手动设置权重值。6)缺省路由的环路防止： ABR不计算非骨干区域的3类LSA.2、完全Stub[AR2—ospf—1—area—0. 0. 0. 1]stub no—summary //配置OSPF区域为完全Stub区域。1)在Stub基础上，在3类LSA也进行过滤。2)完全stub区域内，缺失了3类4类和5类LSA，导致stub区域内路由器，访问区域间和域外路由的时候可能出现次优路径。3、nssa特征：即可以实现LSDB的优化作用，NSSA区域内的设备也可以引入外部路由。[AR2-ospf-1-area-0.0.0.1]nssa     ／／配置该区域为nssa区域。1)当把一个区域配置为nssa区域之后，该区域下所有OSPF接口发送的报文N比特置1． 2)ABR不会将5类LSA，传递到NSSA区域内部。3)NSSA区域内部引入的外部路由，将会以7类LSA进行呈现。4)NSSA区域内ABR会将7类LSA，转换成5类LSA传递到其他区域。5)NSSA区域内ABR将会自动产生一条7类缺省LSA，帮助nssa区域内的设备访问其他区域引入的外部路由信息。 6)当NSSA区域内存在多个ABR的时候：防环：当ABR在一个区域产生一条7类LSA之后，将不会计算其他设备产生的相同7类LSA。选路：NSSA区域由于缺少5类LSA，当存在多个ABR的时候，访问外部路由将有可能出现次优路径。  7转5：当NSSA区域存在多个ABR的时候，Router—id大的路由器，执行7转5．4、完全nssa［AR2-ospf-1-area-0.0.0.1］nssa no-summary ／／配置OSPF区域为完全NSSA区域1)在NSSA区域的基础上，将3类LSA也进行过滤。2完全NSSA区域内的设备由于缺失3类和5类LSA，可能导致访问区域间路由和域外路由出现次优路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h5 id="5类LSA-FA如何产生："><a href="#5类LSA-FA如何产生：" class="headerlink" title="5类LSA FA如何产生："></a>5类LSA FA如何产生：</h5><p>1、ASBR去往外部路由的出接口加入到了OSPF进程中。</p><p>2、ASBR去往外部路由的出接口不是静默接口。</p><p>3、ASBR去往外部路由的出接口不是P2P或者P2MP类型。</p><h5 id="7类LSA-FA如何产生："><a href="#7类LSA-FA如何产生：" class="headerlink" title="7类LSA FA如何产生："></a>7类LSA FA如何产生：</h5><p>1、与5类相同的场景下，FA地址的取值，为自身去往外部路由的下一跳。</p><p>2、与5类不相同的场景下，FA地址的取值，使用一下原则：</p><p>①如果ASBR在NSSA区域内存在活动的loopback接口，则FA的值选取loopback接口地址。 </p><p>②如果ASBR在NSSA区域没有1oopback接口，FA的值选取NSSA区域内第一个UP的物理接口。</p><p>③如果不符合上述两个条件，则FA的值为0。</p><h5 id="IE考题：在NSSA区域是否会存在没有FA的7类LSA？"><a href="#IE考题：在NSSA区域是否会存在没有FA的7类LSA？" class="headerlink" title="IE考题：在NSSA区域是否会存在没有FA的7类LSA？"></a>IE考题：在NSSA区域是否会存在没有FA的7类LSA？</h5><p>会存在，FA的取值条件不符合上述情况时，就不会有FA。</p></blockquote><blockquote><h5 id="N／P-标志位"><a href="#N／P-标志位" class="headerlink" title="N／P 标志位"></a>N／P 标志位</h5><p>1、在hello报文中，标识自身是否具备7类LSA的处理能力。</p><p>2、在LSA中，标识这条LSA是否需要执行7转5．</p><p>7转5的时候：FA地址继承，外部路由类型继承，Cost继承，tag继承。</p><h5 id="E标志位"><a href="#E标志位" class="headerlink" title="E标志位"></a>E标志位</h5><p>标识自身是否具备5类LSA的处理能力。</p></blockquote><h4 id="伪节点"><a href="#伪节点" class="headerlink" title="伪节点"></a>伪节点</h4><p>在广播型链路中进行OSPF计算时，<strong>将广播型链路在算法上抽象为一台路由器</strong>（即将这个二层交换机或者链路抽象为一台路由器），抽象出来的这台虚拟路由器（实际中是不存在的）就称为伪节点。</p><p>伪节点本身是无法产生LSA的，实际上是DR产生的Type-2 LSA。</p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp NQA</title>
      <link href="/2022-10-19-shi-yan-ensp-nqa.html"/>
      <url>/2022-10-19-shi-yan-ensp-nqa.html</url>
      
        <content type="html"><![CDATA[<h1 id="NQA"><a href="#NQA" class="headerlink" title="NQA"></a><center>NQA</center></h1><h2 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h2><img src="https://img-blog.csdnimg.cn/53ce7912bf3d4c2a9d3f4a34fee90062.png" style="zoom:50%;"><p>实验目的：通过配置NQA路由检测，实现对静态路由的自动切换，保障网络连通性。当网络链路故障时，通过配置的NQA实现主备路径的切换，使PC1和PC2之间的网络链路一直联通。</p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>1.路由器个接口配置ip</p><p>R1：</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]un in enInfo: Information center is disabled.[Huawei]sysname R1[R1]int g0/0/0[R1-GigabitEthernet0/0/0]ip add 12.1.1.1 24[R1-GigabitEthernet0/0/0]int g0/0/1[R1-GigabitEthernet0/0/1]ip add 13.1.1.1 24[R1i-GigabitEthernet0/0/1]int g0/0/2[R1-GigabitEthernet0/0/2]ip add 10.1.1.254 24[R1-GigabitEthernet0/0/2]q[R1]display ip interface brief *down: administratively down^down: standby(l): loopback(s): spoofingThe number of interface that is UP in Physical is 4The number of interface that is DOWN in Physical is 0The number of interface that is UP in Protocol is 4The number of interface that is DOWN in Protocol is 0Interface                         IP Address/Mask      Physical   Protocol  GigabitEthernet0/0/0              12.1.1.1/24          up         up        GigabitEthernet0/0/1              13.1.1.1/24          up         up        GigabitEthernet0/0/2              10.1.1.254/24        up         up        NULL0                             unassigned           up         up(s)     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>R2:</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;sysEnter system view, return user view with Ctrl+Z.[Huawei]un in enInfo: Information center is disabled.[Huawei]sysname R2[R2]int g0/0/0[R2-GigabitEthernet0/0/0]ip add 12.1.1.2 24[R2-GigabitEthernet0/0/0]int g0/0/1[R2-GigabitEthernet0/0/1]ip add 24.1.1.1 24[R2-GigabitEthernet0/0/1]q[R2]dis [R2]display ip in[R2]display ip interface b[R2]display ip interface brief *down: administratively down^down: standby(l): loopback(s): spoofingThe number of interface that is UP in Physical is 3The number of interface that is DOWN in Physical is 1The number of interface that is UP in Protocol is 3The number of interface that is DOWN in Protocol is 1Interface                         IP Address/Mask      Physical   Protocol  GigabitEthernet0/0/0              12.1.1.2/24          up         up        GigabitEthernet0/0/1              24.1.1.1/24          up         up        GigabitEthernet0/0/2              unassigned           down       down      NULL0   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>R3:</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;sysEnter system view, return user view with Ctrl+Z.[Huawei][Huawei]un in enInfo: Information center is disabled.[Huawei]sysname R3[R3]int g0/0/1[R3-GigabitEthernet0/0/1]ip add 13.1.1.1 24[R3-GigabitEthernet0/0/1]int g0/0/2[R3-GigabitEthernet0/0/2]ip add 34.1.1.1 24[R3-GigabitEthernet0/0/2]q[R3]dis [R3]display ip in[R3]display ip interface  b[R3]display ip interface  brief *down: administratively down^down: standby(l): loopback(s): spoofingThe number of interface that is UP in Physical is 3The number of interface that is DOWN in Physical is 1The number of interface that is UP in Protocol is 3The number of interface that is DOWN in Protocol is 1Interface                         IP Address/Mask      Physical   Protocol  GigabitEthernet0/0/0              unassigned           down       down      GigabitEthernet0/0/1              13.1.1.1/24          up         up        GigabitEthernet0/0/2              34.1.1.1/24          up         up        NULL0                             unassigned           up         up(s)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>R4:</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;sysEnter system view, return user view with Ctrl+Z.[Huawei]sysname R4[R4]int g0/0/1[R4-GigabitEthernet0/0/1]ip add 24.1.1.2 24[R4-GigabitEthernet0/0/1]int g0/0/2[R4-GigabitEthernet0/0/2]ip add 34.1.1.2 24[R4-GigabitEthernet0/0/2]int g0/0/0[R4-GigabitEthernet0/0/0]ip add 172.16.2.254 24[R4-GigabitEthernet0/0/0]q[R4]display ip interface brief *down: administratively down^down: standby(l): loopback(s): spoofingThe number of interface that is UP in Physical is 4The number of interface that is DOWN in Physical is 0The number of interface that is UP in Protocol is 4The number of interface that is DOWN in Protocol is 0Interface                         IP Address/Mask      Physical   Protocol  GigabitEthernet0/0/0              172.16.2.254/24      up         up        GigabitEthernet0/0/1              24.1.1.2/24          up         up        GigabitEthernet0/0/2              34.1.1.2/24          up         up        NULL0                             unassigned           up         up(s)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在R1和R4上分别配置NQA：</p><p>R1:</p><pre class="line-numbers language-none"><code class="language-none">[R1]nqa test-instance huawei#创建nqa管理员huawei，cat进程[R1-nqa-huawei]test-type icmp#协议基于icmp[R1-nqa-huawei]frequency 5#5秒发送一次探针[R1-nqa-huawei]timeout 2#超过2秒网络故障；注：interval seconds默认时间为4s，timeout时间如果大于4s，则需要调整interval seconds的时间大于timeout，且frequency也需大于timeout时间，不然nqa进程无法启动[R1-nqa-huawei]threshold rtd 1#超过1秒代表网络质量不好[R1-nqa-huawei]probe-count 1#一次发送1个探针[R1-nqa-huawei]destination-address ipv4 24.1.1.2#目的ip[R1-nqa-huawei]source-address ipv4 12.1.1.1#源ip[R1-nqa-huawei]start now #现在开始启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>R2：</p><pre class="line-numbers language-none"><code class="language-none">[R4]nqa test-instance huawei       #创建nqa管理员Kelly，cat进程[R4-nqa-huawei]test-type icmp        #协议基于icmp[R4-nqa-huawei]frequency 5        #5秒发送一次探针[R4-nqa-huawei]timeout 2        #超过2秒网络故障；注：interval seconds默认时间为4s，timeout时间如果大于4s，则需要调整interval seconds的时间大于timeout，且frequency也需大于timeout时间，不然nqa进程无法启动[R4-nqa-huawei]threshold rtd 1        #超过1秒代表网络质量不好[R4-nqa-huawei]probe-count 1        #一次发送1个探针[R4-nqa-huawei]destination-address ipv4 12.1.1.1        #目的ip[R4-nqa-huawei]source-address ipv4 24.1.1.2      #源ip[R4-nqa-huawei]start now        #现在开始启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.配置路由器上的静态路由</p><p>R1:</p><pre class="line-numbers language-none"><code class="language-none">[R1]ip route-static 24.1.1.0 24 GigabitEthernet 0/0/0 12.1.1.2#去往24.1.1.0网络出接口GE0/0/0，下一跳地址12.1.1.2[R1]ip route-static 172.16.2.1 24 GigabitEthernet 0/0/0 12.1.1.2 track nqa huawei#去往172.16.2.0网络出接口GE0/0/0，下一跳地址12.1.1.2，并调用nqa路由追踪[R1]ip route-static 172.16.2.1 24 GigabitEthernet 0/0/1 13.1.1.2 preference 70#备用路径，将优先级调为70，作为备用路由<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>R2:</p><pre class="line-numbers language-none"><code class="language-none">[R2]ip route-static 10.1.1.0 24 GigabitEthernet 0/0/0 12.1.1.1[R2]ip route-static 172.16.2.0 24 GigabitEthernet 0/0/1 24.1.1.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>R3:</p><pre class="line-numbers language-none"><code class="language-none">[R3]ip route-static 10.1.1.0 24 GigabitEthernet 0/0/1 13.1.1.2[R3]ip route-static 172.16.2.0 24 GigabitEthernet 0/0/2 34.1.1.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>R4:</p><pre class="line-numbers language-none"><code class="language-none">[R4]ip route-static 12.1.1.0 24 GigabitEthernet 0/0/1 24.1.1.1[R4]ip route-static 10.1.1.0 24 GigabitEthernet 0/0/1 24.1.1. track nqa huawei [R4]ip route-static 10.1.1.0 24 GigabitEthernet 0/0/2 34.1.1.1 preference 70<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.NQA查看命令</p><pre class="line-numbers language-none"><code class="language-none">[R1]display nqa results #查看nqa结果<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://img-blog.csdnimg.cn/b57c4641306045bfa4ddfdebbc1218b1.png" style="zoom: 67%;"><pre class="line-numbers language-none"><code class="language-none">display nqa history        #查询nqa历史记录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://img-blog.csdnimg.cn/7244f2bd70c94624ad7801b90a2f37f5.png" style="zoom:67%;">]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NQA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp 静态浮动路由与双线热备份</title>
      <link href="/2022-10-17-shi-yan-ensp-jing-tai-fu-dong-lu-you-yu-shuang-xian-re-bei-fen.html"/>
      <url>/2022-10-17-shi-yan-ensp-jing-tai-fu-dong-lu-you-yu-shuang-xian-re-bei-fen.html</url>
      
        <content type="html"><![CDATA[<h1 id="静态浮动路由与双线热备份"><a href="#静态浮动路由与双线热备份" class="headerlink" title="静态浮动路由与双线热备份"></a><center>静态浮动路由与双线热备份</center></h1><p>知识点</p><p>拓扑图</p><img src="https://img-blog.csdnimg.cn/66b445a690fe4596920965f661de831a.png" style="zoom: 67%;"><p>实验步骤</p><p>1.配置去往0.0.0.0的静态路由（两台优先级60和70）,查看路由表</p><pre class="line-numbers language-none"><code class="language-none">[GW]ip route-static 0.0.0.0 0.0.0.0 10.1.1.1 [GW]ip route-static 0.0.0.0 0.0.0.0 20.1.1.1 preference 70[GW]dis ip routing-tableRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations : 11       Routes : 11       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        0.0.0.0/0   Static  60   0          RD   10.1.1.1        GigabitEthernet0/0/0       10.1.1.0/24  Direct  0    0           D   10.1.1.2        GigabitEthernet0/0/0       10.1.1.2/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/0     10.1.1.255/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/0       20.1.1.0/24  Direct  0    0           D   20.1.1.2        GigabitEthernet0/0/1       20.1.1.2/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/1     20.1.1.255/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/1      127.0.0.0/8   Direct  0    0           D   127.0.0.1       InLoopBack0      127.0.0.1/32  Direct  0    0           D   127.0.0.1       InLoopBack0127.255.255.255/32  Direct  0    0           D   127.0.0.1       InLoopBack0255.255.255.255/32  Direct  0    0           D   127.0.0.1       InLoopBack0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.配置loopback，ip 123.1.1.1</p><pre class="line-numbers language-none"><code class="language-none">[DianXin]int loopback 0[DianXin-LoopBack0]ip address 123.1.1.1 255.255.255.0 [LianTong]int loopback 0[LianTong-LoopBack0]ip address 123.1.1.1 255.255.255.0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.网关ping123.1.1.1，通</p><pre class="line-numbers language-none"><code class="language-none">[GW]ping 123.1.1.1  PING 123.1.1.1: 56  data bytes, press CTRL_C to break    Reply from 123.1.1.1: bytes=56 Sequence=1 ttl=255 time=20 ms    Reply from 123.1.1.1: bytes=56 Sequence=2 ttl=255 time=20 ms    Reply from 123.1.1.1: bytes=56 Sequence=3 ttl=255 time=40 ms    Reply from 123.1.1.1: bytes=56 Sequence=4 ttl=255 time=20 ms    Reply from 123.1.1.1: bytes=56 Sequence=5 ttl=255 time=10 ms  --- 123.1.1.1 ping statistics ---    5 packet(s) transmitted    5 packet(s) received    0.00% packet loss    round-trip min/avg/max = 10/22/40 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.shutdown网关设备通往电信的出接口G0/0/0</p><pre class="line-numbers language-none"><code class="language-none">[GW]int GigabitEthernet0/0/0[GW-GigabitEthernet0/0/0]shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.ping123.1.1.1</p><pre class="line-numbers language-none"><code class="language-none">[GW]ping 123.1.1.1  PING 123.1.1.1: 56  data bytes, press CTRL_C to break    Reply from 123.1.1.1: bytes=56 Sequence=1 ttl=255 time=20 ms    Reply from 123.1.1.1: bytes=56 Sequence=2 ttl=255 time=20 ms    Reply from 123.1.1.1: bytes=56 Sequence=3 ttl=255 time=40 ms    Reply from 123.1.1.1: bytes=56 Sequence=4 ttl=255 time=20 ms    Reply from 123.1.1.1: bytes=56 Sequence=5 ttl=255 time=10 ms  --- 123.1.1.1 ping statistics ---    5 packet(s) transmitted    5 packet(s) received    0.00% packet loss    round-trip min/avg/max = 10/22/40 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.查看路由表，发现0.0.0.0路由表优先级由60变为70.</p><p><strong>到这一步就实现了静态浮动路由双线热备份</strong></p><pre class="line-numbers language-none"><code class="language-none">[GW]dis ip routing-tableRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations : 11       Routes : 11       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        0.0.0.0/0   Static  70   0          RD   20.1.1.1        GigabitEthernet0/0/1       10.1.1.0/24  Direct  0    0           D   10.1.1.2        GigabitEthernet0/0/0       10.1.1.2/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/0     10.1.1.255/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/0       20.1.1.0/24  Direct  0    0           D   20.1.1.2        GigabitEthernet0/0/1       20.1.1.2/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/1     20.1.1.255/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/1      127.0.0.0/8   Direct  0    0           D   127.0.0.1       InLoopBack0      127.0.0.1/32  Direct  0    0           D   127.0.0.1       InLoopBack0127.255.255.255/32  Direct  0    0           D   127.0.0.1       InLoopBack0255.255.255.255/32  Direct  0    0           D   127.0.0.1       InLoopBack0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来将通过BFD协议来实现单臂回声，检测链路的通信是否正常，实现网络实时连通。</p><p>7.现将原本shutdown的G0/0/0口恢复</p><pre class="line-numbers language-none"><code class="language-none">[GW]int g0/0/0[GW-GigabitEthernet0/0/0]undo shutdown <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>8.重新ping123.1.1.1，查看路由表，路由表的静态路由恢复成原来的电信60。</p><p>9.shutdown电信的g0/0/0口，从网关ping123.1.1.1.显示连接超时。查看路由表信息发现去往0.0.0.0的静态路由还是60，没有变成70.</p><pre class="line-numbers language-none"><code class="language-none">[DianXin]int g0/0/0[DianXin-GigabitEthernet0/0/0]shutdown <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>10.配置bfd协议</p><pre class="line-numbers language-none"><code class="language-none">[GW]bfd[GW-bfd]q[GW]bfd huawei bind peer-ip 10.1.1.1 interface g0/0/0 one-arm-echo [GW-bfd-session-huawei]discriminator local 111[GW-bfd-session-huawei]commit <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.将原本通往10.1.1.1的静态路由undo</p><pre class="line-numbers language-none"><code class="language-none">[GW]undo ip route-static 0.0.0.0 0 10.1.1.1[GW]ip route-static 0.0.0.0 0 10.1.1.1 track bfd-session huawei<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>12.查看bfd 可以看见去往10.1.1.1的线路显示down</p><pre class="line-numbers language-none"><code class="language-none">[GW]dis bfd session all--------------------------------------------------------------------------------Local Remote     PeerIpAddr      State     Type        InterfaceName            --------------------------------------------------------------------------------111   -          10.1.1.1        Down      S_IP_IF     GigabitEthernet0/0/0     --------------------------------------------------------------------------------     Total UP/DOWN Session Number : 0/1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>13.先恢复电信的g0/0/0口，这个时候一直ping123.1.1.1 -t，是通的。</p><p>然后shutdown g0/0/0口，可以看见ping页面丢了两个包，后右恢复了连接</p><pre class="line-numbers language-none"><code class="language-none">[GW]ping 123.1.1.1  PING 123.1.1.1: 56  data bytes, press CTRL_C to break    Reply from 123.1.1.1: bytes=56 Sequence=1 ttl=255 time=20 ms    Reply from 123.1.1.1: bytes=56 Sequence=2 ttl=255 time=30 ms    Reply from 123.1.1.1: bytes=56 Sequence=3 ttl=255 time=20 ms    Reply from 123.1.1.1: bytes=56 Sequence=4 ttl=255 time=20 ms    Reply from 123.1.1.1: bytes=56 Sequence=5 ttl=255 time=20 ms    Request timeout!    Request timeout!    Reply from 123.1.1.1: bytes=56 Sequence=3 ttl=255 time=20 ms    Reply from 123.1.1.1: bytes=56 Sequence=4 ttl=255 time=20 ms    Reply from 123.1.1.1: bytes=56 Sequence=5 ttl=255 time=20 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bfd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp NAT实现外网Telnet内网Server</title>
      <link href="/2022-10-17-shi-yan-ensp-nat-shi-xian-wai-wang-telnet-nei-wang-server.html"/>
      <url>/2022-10-17-shi-yan-ensp-nat-shi-xian-wai-wang-telnet-nei-wang-server.html</url>
      
        <content type="html"><![CDATA[<h1 id="NAT实现外网Telnat内网Server"><a href="#NAT实现外网Telnat内网Server" class="headerlink" title="NAT实现外网Telnat内网Server"></a><center>NAT实现外网Telnat内网Server</center></h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>网络地址转换＝＝＝》节约公网IP地址！</p><p><strong>NAT技术目的是不是就为了节约公网IP？</strong></p><p>为了<font color="red"><strong>安全性！</strong></font>———其次：同时解决公网IP地址！</p><p>安全环境：可以被人随时访问到的环境！————内网服务器</p><p>存在的问题：</p><p>P1、P2、P3经过GW设备转换为公网地址访问百度，因为转换后的地址都是100.1.1.2，所以在百度给100.1.1.2回包后，网关设备会不知道将包转发给哪一台PC。可能会将PC1的包发给PC2，PC2的包发给PC3，这个时候就要解决这个问题了。</p><img src="https://img-blog.csdnimg.cn/dc8efebcd7134e45b8b6a0e763701ba7.png" style="zoom:67%;"><p>解决方法就是，基于端口标识符进行包的转发。</p><h4 id="NAT转换表"><a href="#NAT转换表" class="headerlink" title="NAT转换表"></a><strong>NAT转换表</strong></h4><table><thead><tr><th>PC1</th><th>192.168.1.2:10</th><th>100.1.1.2:10</th></tr></thead><tbody><tr><td>PC2</td><td>192.168.1.3:10</td><td>100.1.1.2:11</td></tr><tr><td>PC3</td><td>192.168.1.4:10</td><td>100.1.1.2:12</td></tr></tbody></table><p>1．比如端口能不能使用重复的？<br>地址不同 端口一样无所谓 转换出去 地址相同 端口不能一样<br>2．有没有可能端口号占没了？<br>一台电脑可能占用多个端口的 同一时间有很多电脑的时候，但是后续没有数据在经过了—倒计时60s—条目自动取消 端口就会释放！</p><h2 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h2><p><img src="https://img-blog.csdnimg.cn/d5a294abe5a247bfb485f86864f2015d.png"></p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>1.配置ip地址，实现个网段互通</p><pre class="line-numbers language-none"><code class="language-none">[Server]int GigabitEthernet 0/0/0[Server]ip address 192.168.1.1 255.255.255.0 [GW]int GigabitEthernet 0/0/0[GW]ip address 192.168.1.2 255.255.255.0 [GW]int GigabitEthernet 0/0/1[GW]ip address 10.1.1.2 255.255.255.0 [DianXin]int GigabitEthernet 0/0/0[DianXin]ip address 10.1.1.1 255.255.255.0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.实现内外网互通</p><pre class="line-numbers language-none"><code class="language-none">[GW]acl 2000[GW-acl-basic-2000]rule 5  permit any---允许任意ip访问[GW-acl-basic-2000]quit[GW]int GigabitEthernet 0/0/1---进入网关设备的出接口的接口视图[GW-GigabitEthernet0/0/1]nat outbound 2000---给nat挂接acl2000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.Server尝试Ping通电信10.1.1.1</p><pre class="line-numbers language-none"><code class="language-none">显示连接超时<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color="red"><strong>原因：使用路由器来实现Server功能，所以AR1不知道网关是谁</strong></font></p><p><font color="red"><strong>解决方案：添加一条去往外网的静态路由，下一条就是AR1的网关地址</strong></font></p><pre class="line-numbers language-none"><code class="language-none">[Server]ip route-static 0.0.0.0 0.0.0.0 192.168.1.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.再次Ping成功。</p><p>5.设置telnet登录的密码</p><pre class="line-numbers language-none"><code class="language-none">[Server]user-interface vty 0 4[Server-ui-vty0-4]set authentication password cipher 123[Server-ui-vty0-4]quit[GW]user-interface vty 0 4[GW-ui-vty0-4]set authentication password cipher 123[GW-ui-vty0-4]quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.在外网telnet10.1.1.2</p><pre class="line-numbers language-none"><code class="language-none">&lt;DianXin&gt;telnet 10.1.1.2  Press CTRL_] to quit telnet mode  Trying 10.1.1.2 ...  Connected to 10.1.1.2 ...Login authenticationPassword:&lt;GW&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现这个时候telnet登录的设备是GW，而不是Server。这就是因为10.1.1.2是网关设备的接口ip，在远程登录时自然就登录累GW。</p><p><font color="red"><strong>那要怎么实现Telnet登录内网Server呢？？？</strong></font></p><p>7.进入网关设备的出接口GE0/0/1，配置nat Server</p><pre class="line-numbers language-none"><code class="language-none">[GW-GigabitEthernet0/0/1] nat server protocol tcp global current-interface telnet inside 192.168.1.1 telnet协议全部的当前接口 进<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这条命令的意思是</p><p><font color="red"><strong>所有通过TCP传输协议进入当前接口（GE0/0/1）的telnet远程登录都将IP地址转化为192.168.1.1这一地址</strong></font></p><p>8.那么又要怎么实现既可以登录网关设备，又可以登录Server呢</p><pre class="line-numbers language-none"><code class="language-none">[GW-GigabitEthernet0/0/1] nat server protocol tcp global current-interface 8888 telnet inside 192.168.1.1 telnet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加了一个端口ID，这样在telnet 10.1.1.2时在后面加上8888，才能进入Server</p><pre class="line-numbers language-none"><code class="language-none">&lt;DianXin&gt;telnet 10.1.1.2  Press CTRL_] to quit telnet mode  Trying 10.1.1.2 ...  Connected to 10.1.1.2 ...Login authenticationPassword:&lt;GW&gt;exit&lt;DianXin&gt;telnet 10.1.1.2 8888  Press CTRL_] to quit telnet mode  Trying 10.1.1.2 ...  Connected to 10.1.1.2 ...Login authenticationPassword:&lt;Server&gt;exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何防止内网私接路由器</title>
      <link href="/2022-10-16-ru-he-fang-zhi-nei-wang-si-jie-lu-you-qi.html"/>
      <url>/2022-10-16-ru-he-fang-zhi-nei-wang-si-jie-lu-you-qi.html</url>
      
        <content type="html"><![CDATA[<p>学习目标：</p><ol><li><p>什么是内网私接路由器？</p></li><li><p>私接会给内网来带怎样的安全隐患？ </p></li><li><p>企业中如何预防违法私接？</p><p>内网 - 局域网 - 通过交换机连接的网络 </p><ul><li>常见交换机规格：4口 8口 24口 48口 </li><li>作用：把下游终端设备（PC SERVER 打印机 摄像头等） 连接到一块  </li></ul><p>防止违法私接 </p><ul><li>安全隐患 ： 一台电脑中病毒了，通过内网进行泛洪传播 </li></ul><p><font color="red"><strong>如何防止外部输入？</strong> </font></p><ul><li>身份绑定/捆绑 - 内部身份识别 </li><li>如何识别主机身份？ </li></ul><pre class="line-numbers language-none"><code class="language-none">mac地址 - 物理地址 - 网卡地址 - 硬件地址 - 出厂自带 - 全球唯一 IP地址 - 逻辑地址 - 进行配置/DHCP自动获取 = 可变的 - 不是唯一确定的端口安全机制- 不能进行数据通信- 触发隔离机制 - 接口关闭掉- 实现自动恢复 - 接口自动打开 - 自动报警功能 - 提醒管理员<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://img-blog.csdnimg.cn/0606702e0b36425396ef85ec5f202a4f.png" style="zoom: 67%;"></li></ol><h3 id="DHCP-Snooping"><a href="#DHCP-Snooping" class="headerlink" title="DHCP-Snooping"></a>DHCP-Snooping</h3><p>当企业网内有dhcp服务器，有员工将一台无线AP接入交换机，那么PC就接收到来自DHCP服务器和无线AP的不同报文，这个时候就需要开启交换机的DHCP-Snooping，将交换机和DHCP Server之间的接口设为信任接口，阻止pc接收到来自AP的DHCP报文</p><p><font color="red"><strong>注意：snooping技术只能基于二层接口开启，三层接口不行</strong></font></p><p><img src="https://img-blog.csdnimg.cn/dd5430581b3f470781b04e42ff54b49c.png"></p><p>Port-Security端口安全功能</p><pre class="line-numbers language-none"><code class="language-none">内网身份识别AAA服务 - 认证授权审计 - 单独上认证服务器 端口安全（简化版本） HCIE阶段 NAC - 网络准入控制 - 用户 - 电脑PC -固定员工（dot1x-显示器）  -打印机 摄像头 - 哑终端- mac认证 -访客 - portal - 网页认证 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拓扑图</p><img src="https://img-blog.csdnimg.cn/19c9b51c1ddd4b7db972347d3fed46f5.png" style="zoom:50%;"><table><thead><tr><th></th><th>ip地址</th></tr></thead><tbody><tr><td>PC1</td><td>192.168.1.10/24</td></tr><tr><td>PC2</td><td>192.168.1.20/24</td></tr></tbody></table><p>1.PC之间可以互通，查看Mac表</p><img src="https://img-blog.csdnimg.cn/23d357806b0546ababa8936766cb632a.png" style="zoom:50%;"><p>2.shutdown掉GE0/0/1接口，配置接口类型为access，打开Port-Security服务，实现接口设备Mac地址粘滞。</p><pre class="line-numbers language-none"><code class="language-none">[Huawei-GigabitEthernet0/0/1]shutdown [Huawei-GigabitEthernet0/0/1]port link-type access ---配置接口类型为access[Huawei-GigabitEthernet0/0/1]port-security enable ---打开Port-Security服务[Huawei-GigabitEthernet0/0/1]port-security ?  aging-time      Aging time  enable          Enable port security  mac-address     Mac address  max-mac-num     Maximum mac address can learn  protect-action  Action if beyond the limit[Huawei-GigabitEthernet0/0/1]port-security mac-address sticky ---接口设备Mac地址粘滞<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自动粘滞 - 让接口把第一次识别到的mac给粘上 - 好处：方便</p><p>3.undoshutdown，重新ping通PC2，查看MAC表</p><p><font color="red"><strong>可以看见现在的MAC表和没有粘滞之前不一样了</strong></font></p><p><img src="https://img-blog.csdnimg.cn/a2d47894f7924483aa30c607b5858ecc.png"></p><p>4.上面的粘滞功能是通过ping操作自动配置的，现在我们将他undo掉。</p><p>进行手动的粘滞配置</p><pre class="line-numbers language-none"><code class="language-none">port-security mac-address sticky 5489-981F-3BFD vlan 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样实现端口MAC粘滞</p><p><img src="https://img-blog.csdnimg.cn/11d27140279642dd90b77f855a5e00bf.png"></p><p>5.配置端口粘滞mac地址最大数量</p><pre class="line-numbers language-none"><code class="language-none">[Huawei-GigabitEthernet0/0/1]port-security max-mac-num 1---最大1在dis th里是看不见的，不过一般建议默认1就可以[Huawei-GigabitEthernet0/0/1]dis th#interface GigabitEthernet0/0/1 shutdown port link-type access port-security enable port-security mac-address sticky#return[Huawei-GigabitEthernet0/0/1]port-security max-mac-num 5[Huawei-GigabitEthernet0/0/1]dis th#interface GigabitEthernet0/0/1 shutdown port link-type access port-security enable port-security max-mac-num 5 port-security mac-address sticky#return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.配置接口保护动作（就是该接口被接入其他设备时的安全措施）</p><pre class="line-numbers language-none"><code class="language-none">[Huawei-GigabitEthernet0/0/1]port-security protect-action ?  protect   Discard packets---丢包不报警  restrict  Discard packets and warning---丢包并发出警告，一般搭配其他安全设备使用，在web界面直观查看  shutdown  Shutdown [Huawei-GigabitEthernet0/0/1]port-security protect-action sh[Huawei-GigabitEthernet0/0/1]port-security protect-action shutdown [Huawei-GigabitEthernet0/0/1]dis th#interface GigabitEthernet0/0/1 shutdown port link-type access port-security enable port-security protect-action shutdown port-security max-mac-num 5 port-security mac-address sticky#return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.让PC1一直Ping   PC2</p><p><img src="https://img-blog.csdnimg.cn/b5c24666d1ae4839934f5ac2c97034c2.png"></p><p>8.修改PC1mac地址，查看Ping，可以看见请求超时了。</p><p>同时接口ge0/0/1变为shutdown</p><p><img src="https://img-blog.csdnimg.cn/119355d834e146d0942f1b9e94cf7a88.png"></p><p>同时会看到一条日志信息，OID是huawei的SNMP的信息号码，可以看见Ge0/0/1口在这个时候受到了某种限制，端口被shutdown了</p><p><img src="https://img-blog.csdnimg.cn/8cb144f71e134cb18529d904d71bec70.png"></p><pre class="line-numbers language-none"><code class="language-none">huawei和思科设备端口错误关闭方法：- 思科：粘贴就粘贴，手动捆绑就是手动捆绑- err-disable - 错误关闭 - 先手动sh，再敲no sh- 华为：粘贴和手动捆绑都叫粘贴，只不过分为“自动粘贴”和“手动粘贴”- err-down - 错误关闭 - 直接un sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9.配置err-down自动恢复 - 因为错误关闭带来的自动恢复功能 </p><p>每过30秒就检查一次接口设备，如果设备正确就恢复</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]error-down auto-recovery cause port-security interval 30<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Port-Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7源码安装Apache(httpd-2.4.53)及问题解决</title>
      <link href="/2022-10-15-centos7-yuan-ma-an-zhuang-apache-httpd-2-4-53-ji-wen-ti-jie-jue.html"/>
      <url>/2022-10-15-centos7-yuan-ma-an-zhuang-apache-httpd-2-4-53-ji-wen-ti-jie-jue.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_45478359/article/details/123940257">Centos7源码安装Apache(httpd-2.4.53)及问题解决</a></p><pre class="line-numbers language-none"><code class="language-none">注意：在wget https://dlcdn.apache.org/httpd/httpd-2.4.53.tar.gz时会报404错误原因是，IP地址版本过期现在最新地址是wget https://dlcdn.apache.org/httpd/httpd-2.4.54.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora快捷键使用</title>
      <link href="/2022-10-15-typora-kuai-jie-jian-shi-yong.html"/>
      <url>/2022-10-15-typora-kuai-jie-jian-shi-yong.html</url>
      
        <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>一个#是一级标题   二级标题两个##</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>Hello，Word</strong></p><p>**加粗</p><p><em>Hello，Word</em></p><p>单*斜体</p><p><em><strong>Hello，Word</strong></em></p><p>***加粗且斜体</p><p>Hello，Word</p><p>~~加横线</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>一个&gt;是引用。</p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><hr><p>三个***或者三个—是分割线</p><h2 id="图片引用方法"><a href="#图片引用方法" class="headerlink" title="图片引用方法"></a>图片引用方法</h2><p>感叹号加中括号加小括号（小括号里面加图片地址，可以是本地图片可以说网络图片）<br> <img src="https://img2020.cnblogs.com/blog/2191740/202010/2191740-20201024135202435-264558247.jpg" alt="img"></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>中括号加小括号（小括号里面是跳转地址）<br> <a href="www.baidu.com">点击跳转到百度</a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li>。</li><li>。</li><li>。</li></ol><p>1.加空格</p><ul><li>。</li><li>。</li><li>。</li></ul><p>-加空格</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>右键单击插入表格</p><table><thead><tr><th>名字</th><th>姓名</th><th>生日</th></tr></thead><tbody><tr><td>三</td><td>女</td><td>1999</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>三个```后加代码类型</p>]]></content>
      
      
      <categories>
          
          <category> 软件教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp 浮动静态路由及负载均衡</title>
      <link href="/2022-10-15-shi-yan-ensp-fu-dong-jing-tai-lu-you-ji-fu-zai-jun-heng.html"/>
      <url>/2022-10-15-shi-yan-ensp-fu-dong-jing-tai-lu-you-ji-fu-zai-jun-heng.html</url>
      
        <content type="html"><![CDATA[<h1 id="浮动静态路由及负载均衡"><a href="#浮动静态路由及负载均衡" class="headerlink" title="浮动静态路由及负载均衡"></a><center><strong>浮动静态路由及负载均衡</strong></center></h1><h2 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a><strong>实验原理</strong></h2><p>浮动静态路由是一种特殊的静态路由，通过配置去往相同的目的网段，但优先级不同的静态路由，以保证在网络中优先级较高的路由，即主路由失效的情况下，提供备份路由。正常情况下，备份路由不会出现在路由表中。</p><p>负载均衡，当数据有多条可选路径前往同一目的网络，可以通过配置相同优先级和开销的静态路由实现负载均衡，使得数据的传输均衡地分配到多条路径上，从而实现数据分流、减轻单条路径负载过重的效果。而当其中某一条路径失效时，其他路径仍然能够正常传输数据，也起到了冗余作用。</p><h2 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h2><p><img src="https://img-blog.csdnimg.cn/89838c966a854df9a6fbd231cc86016c.png"></p><p>实验内容：</p><p>R2为某公司总部，R1与R3是两个分部，主机PC-1与PC-2所在的网段分别模拟两个分部中的办公网络。现需要总部与各个分部、分部与分部之间都能够通信，且分部之间在通信时，之间的直连链路为主用链路，通过总部的链路为备份链路。要求使用浮动静态路由实现需求，并再根据实际需求实现负载均衡来优化网络。</p><p>实验编址：</p><p><img src="https://img-blog.csdnimg.cn/05135d71813a4b3daab0a600785ba832.png"></p><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p>1 基本配置<br>根据实验编址表进行相应的基本IP地址配置，并使用ping命令检测各直连链路的连通性。<br> <img src="https://img-blog.csdnimg.cn/9f35c8010c574256818ffc20dbb16d06.png"><br>2 实现两分部间、总部与两分部间的通信<br>[R1]ip route-static 192.168.20.0  24  10.0.13.3<br> <img src="https://img-blog.csdnimg.cn/744d00b4b8fb46b5ab4111bfa34fc9e3.png"><br>[R2]ip route-static 192.168.20.0  24  10.0.13.3<br>[R2]ip route-static 192.168.10.0  24  10.0.12.1<br> <img src="https://img-blog.csdnimg.cn/6954588f08bd4fd7845cb1eaf44ce13f.png"><br>[R3]ip route-static 192.168.10.0  24  10.0.13.1<br> <img src="https://img-blog.csdnimg.cn/80ed366a24d74bfa98e5990a0412ea99.png"><br>[R1]display ip routing-table<br>显示截图<br> <img src="https://img-blog.csdnimg.cn/90ff79c4478145c58175b5626c8d056f.png"><br>测试PC-1与PC-2之间可以互通。<br>在PC-1上：tracert 192.168.20.20，可以发现数据包是经过R1和R3到达主机PC-2的。<br>测试截图<br> <img src="https://img-blog.csdnimg.cn/42919ac7600549348c99123308f80df0.png"><br>[R2]display ip routing-table<br>显示截图<br> <img src="https://img-blog.csdnimg.cn/08dce6ef83594457b10bd77cd70599ed.png"><br>[R3]display ip routing-table<br>显示截图<br><img src="https://img-blog.csdnimg.cn/2aabd329ca8e4a58913f69fc09bc9603.png"><br>在PC-2上：tracert 192.168.10.10，可以发现数据包是经过R3和R1到达主机PC-1的。<br>测试截图<br> <img src="https://img-blog.csdnimg.cn/63426eb7f6554ffa817eca52ad36d779.png"><br>在总部R2上可以正常访问PC-1和PC-2。<br>测试截图<br> <img src="https://img-blog.csdnimg.cn/82dc089c2def42289b7372966715d23b.png"><br>3 配置浮动静态路由实现路由备份<br>[R1]ip route-static 192.168.20.0 24 10.0.12.2 preference 100<br>[R1]display ip routing-table<br>显示截图<br> <img src="https://img-blog.csdnimg.cn/7893d52bea1b4b76920d7f79cc7756ec.png"><br>发现上面的路由没有添加进路由表，路由表没变化。<br>[R1]display ip routing-table protocol static<br>显示截图<br> <img src="https://img-blog.csdnimg.cn/2b2ce65974204eee80cfac8caa7f4df7.png"><br>可以发现两条路由的不同的优先级，优先级高的在路由表中。<br>[R3]ip route-static 192.168.10.0 24 10.0.23.2 preference 100<br> <img src="https://img-blog.csdnimg.cn/2cc711dc6f824688993e5f9eda696406.png"><br>将路由R1的S 1/0/1接口关闭，验证使用备份链路。<br>[R1]interface Serial 1/0/1<br>[R1-Serial 1/0/1]shutdown<br>[R1]display ip routing-table<br>显示截图<br> <img src="https://img-blog.csdnimg.cn/9e7ff8b876e040f691e258f8afa9fa7b.png"><br>优先级为100的路由条目出现在路由表中。<br>[R1]display ip routing-table protocol static<br>在PC-1上：tracert 192.168.20.20，可以发现数据包是经过R1、R2和R3到达主机PC-2的。<br>测试截图<br> <img src="https://img-blog.csdnimg.cn/d975ee258e5b415bb64219cba18a580d.png"><br>4 通过负载均衡实现网络优化<br>[R1]interface Serial 1/0/1<br>[R1-Serial 1/0/1]undo shutdown<br>[R1]ip route-static 192.168.20.0 24 10.0.12.2<br>[R1]display ip routing-table<br>显示截图<br> <img src="https://img-blog.csdnimg.cn/920f344f80db4090bee4f1feda6fbcfd.png"><br>发现去往192.168.20.0网段拥有两条下一跳不同的路由条目，即实现了负载均衡。<br>测试PC-1与PC-2间的通信，正常。<br>[R3]ip route-static 192.168.10.0 24 10.0.23.2<br>[R3]display ip routing-table<br>显示截图<br> <img src="https://img-blog.csdnimg.cn/94ce6bfd2f1546a6be69ca86a009ca5e.png"><br>发现去往192.168.20.0网段拥有两条下一跳不同的路由条目，即实现了负载均衡。</p>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浮动路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos 7常用命令</title>
      <link href="/2022-10-14-centos-7-chang-yong-ming-ling.html"/>
      <url>/2022-10-14-centos-7-chang-yong-ming-ling.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-查看系统信息"><a href="#1-查看系统信息" class="headerlink" title="1.查看系统信息"></a>1.查看系统信息</h2><ul><li>硬盘大小</li></ul><pre class="line-numbers language-none"><code class="language-none">fdisk -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>/dev/sda 操作系统中第一块硬盘的名称以及所在路径</p><p><strong>Linux系统中一切皆文件（文件名） sd（硬盘类型sata） a（第一块），例如第三块硬盘就叫sdc</strong></p><p>分配20G却显示21.5GB=1000x20+24x20(在linux中1G=1000，但实际上还是1024)</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost okra]# fdisk -l磁盘 /dev/sda：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x000b687f   设备 Boot      Start         End      Blocks   Id  System/dev/sda1   *        2048     2099199     1048576   83  Linux/dev/sda2         2099200    41943039    19921920   8e  Linux LVM磁盘 /dev/mapper/centos-root：18.2 GB, 18249416704 字节，35643392 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘 /dev/mapper/centos-swap：2147 MB, 2147483648 字节，4194304 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>内存大小</li></ul><pre class="line-numbers language-none"><code class="language-none">cat /proc/meminfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Memtotal：995676kb   内存大小为1G</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost okra]# cat /proc/meminfoMemTotal:         995676 kB...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CPU型号</li></ul><pre class="line-numbers language-none"><code class="language-none">cat /proc/cpuinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[root@localhost okra]# cat /proc/cpuinfoprocessor: 0vendor_id: GenuineIntelcpu family: 6model: 158model name: Intel(R) Core(TM) i5-7300HQ CPU @ 2.50GHzstepping: 9...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开机和关机</li></ul><pre class="line-numbers language-none"><code class="language-none">reboot 重启poweroff 关机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-Linux操作系统树状结构"><a href="#2-Linux操作系统树状结构" class="headerlink" title="2.Linux操作系统树状结构"></a>2.Linux操作系统树状结构</h2><img src="https://img-blog.csdnimg.cn/ba1081da93694df1bf8f47d33c9b5edc.png" style="zoom: 33%;"><p>目录==文件</p><pre class="line-numbers language-none"><code class="language-none">cdchange directory..返回上一级目录/根路径/起始路径pwd列出当前所在目录路径lslist列出当前目录的内容/bin普通用户和管理员都可以执行的命令/sbin只有管理员才能执行的命令  关机重启/boot引导 主引导目录 独立的分区 启动菜单 内核/devdevice设备 设备文件存放目录/etc配置文件存放目录/home普通用户的家目录/root管理员的家目录/media光驱的挂载目录/mnt 临时设备的挂载目录/proc里面的数据都在内存中，进程的所在目录/tmp临时文件存放目录/usr软件的安装目录/var常变文件存放 日志文件 邮件文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装VMwaretools，实现虚拟机和真机之间文件复制</p><p>进入VMwareTools所在目录，使用以下命令进行解压；也可以右键点击VMwareTools软件压缩包，解压</p><img src="https://img-blog.csdnimg.cn/38f993914a384f90b1ca0168fc7256ba.png" style="zoom:33%;"><pre class="line-numbers language-none"><code class="language-none">tar -zxvf VMwareTools-9.9.0-2304977.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入vmware-tools-distrib/文件夹</p><pre class="line-numbers language-none"><code class="language-none">cd vmware-tools-distrib/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用管理员权限安装软件,也可以在最后加上-d，这样在安装时就可以避免一直按回车；代表安装选项全部默认</p><pre class="line-numbers language-none"><code class="language-none">sudo ./vmware-install.plsudo ./vmware-install.pl -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后让他自动重启即可，什么都别动</p><h2 id="3-快捷键"><a href="#3-快捷键" class="headerlink" title="3.快捷键"></a>3.快捷键</h2><ul><li>自动补齐</li></ul><pre class="line-numbers language-none"><code class="language-none">Tab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>清除屏幕内容</li></ul><pre class="line-numbers language-none"><code class="language-none">ctrl+l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>终止快捷键</li></ul><pre class="line-numbers language-none"><code class="language-none">ctrl+c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-Linux系统下如何区分文件类型"><a href="#4-Linux系统下如何区分文件类型" class="headerlink" title="4.Linux系统下如何区分文件类型"></a>4.Linux系统下如何区分文件类型</h2><pre class="line-numbers language-none"><code class="language-none">蓝色---目录黑色---普通文件浅蓝色---符号链接（快捷方式）黑底黄字---设备文件（硬盘文件...）绿色---带有执行权限的文件红色---压缩包紫色---图片、模块文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-增、删、改、查"><a href="#5-增、删、改、查" class="headerlink" title="5.增、删、改、查"></a>5.增、删、改、查</h2><p><strong>查询：</strong></p><ul><li>查看目录下有哪些内容</li></ul><pre class="line-numbers language-none"><code class="language-none">ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看文件中的内容</li></ul><pre class="line-numbers language-none"><code class="language-none">cat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>创建：</strong></p><ul><li>创建文件 创建目录</li></ul><pre class="line-numbers language-none"><code class="language-none">touch 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>例如在/tmp目录下创建class1.txt，且内部写入‘hello’</li></ul><pre class="line-numbers language-none"><code class="language-none">[okra@localhost tmp]$ touch class1.txt[okra@localhost tmp]$ echo "hello" &gt; /tmp/class1.txt[okra@localhost tmp]$ cat /tmp/class1.txthello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建且编辑文件</li></ul><pre class="line-numbers language-none"><code class="language-none">echo "内容" &gt; 文件路径如果echo后面不加 &gt; 文件路径，也会自动生成文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>创建目录（make directory）</li></ul><pre class="line-numbers language-none"><code class="language-none">mkdir /tmp/class1(目录名)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>修改：</strong></p><ul><li>剪切</li></ul><pre class="line-numbers language-none"><code class="language-none">mv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>例如：将当前路径下的class1.txt剪切到当前路径下的class1目录下</li></ul><pre class="line-numbers language-none"><code class="language-none">[okra@localhost tmp]$ mv class1.txt class1[okra@localhost tmp]$ cd class1/[okra@localhost class1]$ lsclass1.txt[okra@localhost class1]$ cat class1.txt hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重命名</li></ul><pre class="line-numbers language-none"><code class="language-none">mv 旧文件名 新文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>例如：将class1.txt重命名为class11.txt</li></ul><pre class="line-numbers language-none"><code class="language-none">[okra@localhost class1]$ mv class1.txt class11.txt[okra@localhost class1]$ lsclass11.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>拷贝</li></ul><pre class="line-numbers language-none"><code class="language-none">cp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>例如：将class11.txt拷贝回/tmp目录下</li></ul><pre class="line-numbers language-none"><code class="language-none">[okra@localhost class1]$ cp class11.txt /tmp[okra@localhost class1]$ lsclass11.txt[okra@localhost class1]$ cd /tmp/[okra@localhost tmp]$ lsanaconda.logclass1class11.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>符号链接</li></ul><pre class="line-numbers language-none"><code class="language-none">ln<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>例如：将/tmp/class1目录下的class11.txt文件符号链接到root用户的桌面和okra的桌面，点击桌面链接可以打开class11.txt</li></ul><pre class="line-numbers language-none"><code class="language-none">ln -s /tmp/class1/class11.txt /root/Desktop/可以看见root桌面上已经有class11.txt文件sudo ln -s /tmp/class1/class11.txt /home/okra/Desktop可以看见okra桌面上已经有class11.txt文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/379d7edd737e4cba93649c8dd71b65bb.png"></p><p><strong>删除：</strong></p><pre class="line-numbers language-none"><code class="language-none">rm （文件名）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>例如：删除tmp/class11.txt</li></ul><pre class="line-numbers language-none"><code class="language-none">[okra@localhost tmp]$ rm class11.txt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>强制删除</li></ul><pre class="line-numbers language-none"><code class="language-none">rm -f (文件名)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除目录</li></ul><pre class="line-numbers language-none"><code class="language-none">rm -rf (目录)-r   代表递归删除目录需要递归删除，因为目录中可能包含了文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-Linux目录字格式"><a href="#6-Linux目录字格式" class="headerlink" title="6.Linux目录字格式"></a>6.Linux目录字格式</h2><pre class="line-numbers language-none"><code class="language-none">命令字  【选项】   【文件或目录】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：查看/boot目录下的全部内容</p><pre class="line-numbers language-none"><code class="language-none">[okra@localhost tmp]$ ls -a /boot...config-3.10.0-1160.el7.x86_64efigrubgrub2initramfs-0-rescue-e32d477fb0814a0c8c8c125208b4c935.imginitramfs-3.10.0-1160.el7.x86_64.imgsymvers-3.10.0-1160.el7.x86_64.gzSystem.map-3.10.0-1160.el7.x86_64vmlinuz-0-rescue-e32d477fb0814a0c8c8c125208b4c935vmlinuz-3.10.0-1160.el7.x86_64.vmlinuz-3.10.0-1160.el7.x86_64.hmac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么如何查看一个命令字的帮助手册？</p><p>例如：查看ls的帮助手册，<strong>这里man是菜单的意思</strong></p><pre class="line-numbers language-none"><code class="language-none">man ls进入后按‘q’退出进入后输入‘/+关键字’查找说明<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="https://img-blog.csdnimg.cn/e26f1a2641554b74834bd2bd5b13dbcf.png" style="zoom:67%;"><pre class="line-numbers language-none"><code class="language-none">-a---显示文件隐藏信息-l---显示文件详细信息-lh---显示文件大小，以人类能够读懂的单位（M，Gb）-R---递归显示目录中子目录的内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>内部命令—命令解释器自带的命令</p><pre class="line-numbers language-none"><code class="language-none">help 【命令】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>外部命令—安装的第三方软件带的命令，基本都有帮助手册</p><pre class="line-numbers language-none"><code class="language-none">man 【命令】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-压缩、解压缩"><a href="#7-压缩、解压缩" class="headerlink" title="7.压缩、解压缩"></a>7.压缩、解压缩</h2><p>在 /tmp目录下创建一个大小为100m的文件bigfile</p><pre class="line-numbers language-none"><code class="language-none">dd if=/dev/zero of=/tmp/bigfile bs=1M count=100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">DD是Linux/UNIX系统下的一个非常有用的命令，作用是用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。Linux dd 命令用于读取、转换并输出数据。dd 可从标准输入或文件中读取数据，根据指定的格式来转换数据，再输出到文件、设备或标准输出。参数说明:if=文件名：输入文件名，默认为标准输入。即指定源文件。of=文件名：输出文件名，默认为标准输出。即指定目的文件。ibs=bytes：一次读入bytes个字节，即指定一个块大小为bytes个字节。obs=bytes：一次输出bytes个字节，即指定一个块大小为bytes个字节。bs=bytes：同时设置读入/输出的块大小为bytes个字节。cbs=bytes：一次转换bytes个字节，即指定转换缓冲区大小。skip=blocks：从输入文件开头跳过blocks个块后再开始复制。seek=blocks：从输出文件开头跳过blocks个块后再开始复制。count=blocks：仅拷贝blocks个块，块大小等于ibs指定的字节数。conv=&lt;关键字&gt;，关键字可以有以下11种：conversion：用指定的参数转换文件。    ascii：转换ebcdic为ascii    ebcdic：转换ascii为ebcdic    ibm：转换ascii为alternate ebcdic    block：把每一行转换为长度为cbs，不足部分用空格填充    unblock：使每一行的长度都为cbs，不足部分用空格填充    lcase：把大写字符转换为小写字符    ucase：把小写字符转换为大写字符    swap：交换输入的每对字节    noerror：出错时不停止    notrunc：不截短输出文件    sync：将每个输入块填充到ibs个字节，不足部分用空（NUL）字符补齐。--help：显示帮助信息--version：显示版本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>gzip</strong></p><pre class="line-numbers language-none"><code class="language-none">gzip 【文件名】---压缩文件gunzip 【压缩包】---解压缩<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>bzip2</strong></p><pre class="line-numbers language-none"><code class="language-none">bzip2 【文件名】---压缩文件bunzip2 【压缩包】---解压缩<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看目录大下</p><pre class="line-numbers language-none"><code class="language-none">du -sh 【目录】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如何对目录进行打包压缩</p><pre class="line-numbers language-none"><code class="language-none">直接使用gzip和bzip2对目录进行压缩会报错，需要对目录先进行打包，需要用到tar工具tar -cf 【打包后的包名以及路劲】 【需要打包的目录以及路径】例如：tar -cf /tmp/allfile.tar /tmp/allfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在不打开包的情况下查看包内容</p><pre class="line-numbers language-none"><code class="language-none">tar -tvf 【包名】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后就可以直接用gzip进行压缩和解压缩了</p><pre class="line-numbers language-none"><code class="language-none">gzip allfile.targunzip allfile/tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解包</p><pre class="line-numbers language-none"><code class="language-none">tar -xf 【包名】 -C 【解包路径】（可不写-C后的路径，就在当前路径下解压）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一条命令实现gzip的打包压缩</p><pre class="line-numbers language-none"><code class="language-none">tar -zcf /tmp/allfile.tar.gz【压缩包名】 bigfile【文件】tar -zxf 【包名】 -C 【解包路径】（可不写-C后的路径，就在当前路径下解压）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一条命令实现bzip2的打包压缩</p><pre class="line-numbers language-none"><code class="language-none">tar -jcvf /tmp/allfile.tar.gz【压缩包名】 bigfile【文件】tar -jxvf 【包名】 -C 【解包路径】（可不写-C后的路径，就在当前路径下解压）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="8-vim编辑器"><a href="#8-vim编辑器" class="headerlink" title="8.vim编辑器"></a>8.vim编辑器</h2><img src="https://img-blog.csdnimg.cn/e2b3a0674aba42949df1b208e72696ac.png" style="zoom:50%;"><pre class="line-numbers language-none"><code class="language-none">vim编辑器分为3种工作模式，命令模式、输入模式、末行模式。命令模式-----&gt;输入模式按ins键输入模式-----&gt;命令模式按esc键输入模式--X--&gt;末行模式输入模式无法直接切换到末行模式，需要先返回命令模式再前往末行模式输入模式-----&gt;命令模式-----&gt;末行模式  先按esc键，在按：键，输入wq保存退出末行模式下常用命令：:wq---保存退出:q!---不保存退出:w !sudo tee %命令来强制保存 会报警告，这是因为正在编辑的文件已经在别处被修改了，vim 询问是否要重载新文件进来，按L重载即可:set nu---显示行号:% s/old/new/g---每一行中的old替换成new:50,55d---删除50到55行命令模式下的快速编辑快捷键2yy---复制当前行和下一行p---粘贴到当前行下dd---删除当前行gg---回到第一行G---回到最后一行50G---回到50行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如：在/tmp/目录下建立一个名叫test.txt的文件并写入hello</p><pre class="line-numbers language-none"><code class="language-none">[okra@localhost tmp]$ vim /tmp/test.txt[okra@localhost tmp]$ cat /tmp/test.txt hello[okra@localhost tmp]$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-Linux操作系统的软件安装"><a href="#9-Linux操作系统的软件安装" class="headerlink" title="9.Linux操作系统的软件安装"></a>9.Linux操作系统的软件安装</h2><p>软件的分类：源码包、封装后的软件包</p><p>源码包的特点：</p><p>​    1.开源</p><p>​    2.以压缩包的形式提供给用户</p><p>安装的注意事项</p><p>​    1.解包</p><p>​    2.进入解压路径，了解软件的作用以及安装方法</p><p>编译 可以指定安装的路径以及编译所需要的功能</p><p>软件包的分类：</p><p>rpm         red hat  package  manager 红帽包管理</p><p>deb        Debian德班</p><h3 id="安装httpd源码包"><a href="#安装httpd源码包" class="headerlink" title="安装httpd源码包"></a>安装httpd源码包</h3><p><a href="https://httpd.apache.org/download.cgi">httpd下载地址</a></p><p>请参考</p><p><a href="https://blog.csdn.net/qq_45478359/article/details/123940257">Centos7源码安装Apache(httpd-2.4.53)及问题解决</a></p><p>1.首先将源码包拖入linux桌面，<del>查看可以发现这个包的颜色不是我们常见的红色。这是因为window下载的包自带编译内容有所不同</del></p><img src="https://img-blog.csdnimg.cn/0b0506e6d5654b9ab05b59f8af5c7450.png" style="zoom:25%;"><p><img src="https://img-blog.csdnimg.cn/d0624d5185d944318fbdd7320c3a49d8.png"></p><p>2.解包解压缩，解压到/usr/src目录下</p><pre class="line-numbers language-none"><code class="language-none">[okra@localhost 桌面]$ sudo tar -zxf /home/okra/桌面/httpd-2.4.54.tar.gz -C /usr/src/cd /usr/src[okra@localhost src]$ lsdebug  httpd-2.4.54  kernels[okra@localhost src]$ cd httpd-2.4.54/[okra@localhost httpd-2.4.54]$ lsABOUT_APACHE     CHANGES          httpd.mak       Makefile.in       ROADMAPacinclude.m4     changes-entries  httpd.spec      Makefile.win      serverApache-apr2.dsw  CMakeLists.txt   include         modules           srclibApache.dsw       config.layout    INSTALL         NOTICE            supportapache_probes.d  configure        InstallBin.dsp  NWGNUmakefile     testap.d             configure.in     LAYOUT          os                VERSIONINGbuild            docs             libhttpd.dep    READMEBuildAll.dsp     emacs-style      libhttpd.dsp    README.CHANGESBuildBin.dsp     httpd.dep        libhttpd.mak    README.cmakebuildconf        httpd.dsp        LICENSE         README.platforms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.ReadMe文件，查看httpd说明，INSTALL文件，查看安装方法</p><pre class="line-numbers language-none"><code class="language-none">vim INSTALL $ ./configure --prefix=PREFIX     $ make     $ make install     $ PREFIX/bin/apachectl start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/60fa4a3d2987454aa543020de179696a.png"></p><p>4.设置脚本指定安装路径和功能，并且生成makefile编译脚本文件</p><pre class="line-numbers language-none"><code class="language-none">[okra@localhost httpd-2.4.54]$ vim INSTALL [okra@localhost httpd-2.4.54]$ ./configure --prefix=/usr/local/webserver//安装路径为/usr/local/webserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>…..</p><h3 id="安装tree"><a href="#安装tree" class="headerlink" title="安装tree"></a>安装tree</h3><p>1.检查是否安装过tree</p><pre class="line-numbers language-none"><code class="language-none">rpm -qa列出所有安装了的rpm软件包rpm -qa | grep "tree" 检查是否安装过tree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/b69f698b35724e838f20c6120479b3f7.png"></p><p>2.确认该软件</p><pre class="line-numbers language-none"><code class="language-none">rpm -qpi tree...(tab补齐)确认软件作用rpm -qpl tree...(tab补齐)确认软件安装路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.使用”sudo <a href="https://so.csdn.net/so/search?q=yum&amp;spm=1001.2101.3001.7020">yum</a> -y install tree”命令，安装tree命令</p><pre class="line-numbers language-none"><code class="language-none">rpm -ivh tree...(tab补齐)方法一sudo yum -y install tree方法二<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/515b19a37f794dce90916d848abb70fd.png"></p><p>4.使用tree命令。如下图：CentOS 7中安装tree之后，使用”tree”命令不能正常显示中文字符。需要使用”tree -N”命令。（”-N”选项：按原样打印不可打印字符。</p><img src="https://img-blog.csdnimg.cn/20201026151526548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29uZV9kYXk0MTU=,size_16,color_FFFFFF,t_70#pic_center" style="zoom:50%;"><img src="https://img-blog.csdnimg.cn/20201026151537104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29uZV9kYXk0MTU=,size_16,color_FFFFFF,t_70#pic_center" style="zoom:50%;"><p>5.卸载软件</p><pre class="line-numbers language-none"><code class="language-none">rpm -e tree<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="yum安装方法"><a href="#yum安装方法" class="headerlink" title="yum安装方法"></a>yum安装方法</h3><p>根据光盘中依赖关系列表进行软件安装卸载（yum源安装）</p><p>1.要告诉操作系统依赖关系列表的位置</p><pre class="line-numbers language-none"><code class="language-none">vim /etc/yum.repos.d/dvd.repo [dvdrom]标签name= "yum dvd rom"描述baseurl =file:/media/CentOS_6.9_Final(自己的文件名) gpgcheck=0是否做密钥对验证<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.通过yum工具进行软件的卸载与安装</p><h2 id="10-Linux操作系统的用户分类"><a href="#10-Linux操作系统的用户分类" class="headerlink" title="10.Linux操作系统的用户分类"></a>10.Linux操作系统的用户分类</h2><p>超级管理员</p><p>普通用户</p><p>程序用户</p><ul><li>切换方法：</li></ul><pre class="line-numbers language-none"><code class="language-none">root——&gt;okra       su - okra(不需要密码)okra——&gt;rootsu(需要密码)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="用户的分类和组"><a href="#用户的分类和组" class="headerlink" title="用户的分类和组"></a>用户的分类和组</h4><p>／etc／passwd 保存了操作系统中所有用户的信息</p><pre class="line-numbers language-none"><code class="language-none">vim ／etc／passwdroot：x：0：  0：  root：  /root：      /bin/bashokra：x：500：500：：      /home/okra： /bin/bash 字段1：用户名字段2：密码占位符字段3：用户的uid 0表示超级用户，500—60000普通用户，1—499程序用户字段4：基本组的gid 先有组才有用户字段5：用户信息记录字段字段6：用户的家目录字段7：用户登录系统后使用的命令解释器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>／etc／shadow 保存了用户密码信息</p><pre class="line-numbers language-none"><code class="language-none">root: $6$hsPrPUKSv0fM6utT$Rv6YGho/: 18085: 0: 99999: 7: : : 字段1：用户名字段2：用户的密码加密后的字符串字段3：距离1970／1／1密码最近一次的修改时间字段4：密码的最短有效期字段5：密码的最长有效期90字段6：密码过期前7天警告字段7：密码的不活跃期字段8：用户的失效时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>／etc／group 记录了系统中所有组的信息</p><h4 id="创建组和用户"><a href="#创建组和用户" class="headerlink" title="创建组和用户"></a>创建组和用户</h4><p>group</p><p>创建组class1</p><pre class="line-numbers language-none"><code class="language-none">groupadd class1---默认组id或者group -g 2000 class1---在创建组时设置组id2000[root@localhost 桌面]# groupadd class1[root@localhost 桌面]# cat /etc/grouproot:x:0:...class1:x:1001:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改组class1的组id为2000</p><pre class="line-numbers language-none"><code class="language-none">groupmod -g 2000 class1[root@localhost 桌面]# groupmod -g 2000 class1[root@localhost 桌面]# cat /etc/grouproot:x:0:...class1:x:2000:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建用户</p><pre class="line-numbers language-none"><code class="language-none">创建用户tomuseradd tom建立tom用户要求器基本组为class1组，附加组为class2组，tom用户uid为600useradd -g class1 -G class2 -u 600 tom---g为基本组G为附加组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看用户信息</p><pre class="line-numbers language-none"><code class="language-none">id 查看tom信息id tom[root@localhost 桌面]# useradd -g class1 -G class2 -u 600 tom[root@localhost 桌面]# id tomuid=600(tom) gid=2000(class1) 组=2000(class1),2001(class2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立一个程序用户uid为250，用户名为testuser，没有家目录</p><pre class="line-numbers language-none"><code class="language-none">useradd -u 250 -M -s /sbin/nologin testuser-u   设置uid-M   设置没有家目录-s /sbin/nologin   设置为程序用户，无法通过su - testuser切换用户[root@localhost 桌面]# useradd -u 250 -M -s /sbin/nologin testuser[root@localhost 桌面]# id testuseruid=250(testuser) gid=2002(testuser) 组=2002(testuser)[root@localhost 桌面]# su - testusersu: 警告：无法更改到 /home/testuser 目录: 没有那个文件或目录This account is currently not available.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置密码</p><pre class="line-numbers language-none"><code class="language-none">passwd [user]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置密码最长有效期90天</p><pre class="line-numbers language-none"><code class="language-none">chage -M 90 【user】可以通过命令 cat /etc/shadow文件查看密码最长有效期是否设置成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对用户密码进行锁定，使其无法登录</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost 桌面]# passwd -l tom锁定用户 tom 的密码 。passwd: 操作成功[root@localhost 桌面]# passwd -S tomtom LK 2022-10-16 0 99999 7 -1 (密码已被锁定。)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在shadow文件可以看见tom用户在锁定后在密码前多了两个！！，这也是判断用户密码是否被锁定的方法</strong></p><p><img src="https://img-blog.csdnimg.cn/93a1054d229d4e3e879276c64e4480ef.png"></p><p>对用户密码进行解锁，使其可以正常登录</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost 桌面]# passwd -u tom---解锁解锁用户 tom 的密码。passwd: 操作成功[root@localhost 桌面]# passwd -S tom---查看tom PS 2022-10-16 0 99999 7 -1 (密码已设置，使用 SHA512 算法。)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除用户、删除组</p><pre class="line-numbers language-none"><code class="language-none">userdel -r [user]groupdel [组][root@localhost 桌面]# userdel -r tom[root@localhost 桌面]# userdel -r testuseruserdel：未找到 testuser 的主目录“/home/testuser”[root@localhost 桌面]# groupdel class1[root@localhost 桌面]# groupdel class2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-Linux文件及目录的权限"><a href="#11-Linux文件及目录的权限" class="headerlink" title="11.Linux文件及目录的权限"></a>11.Linux文件及目录的权限</h2><h4 id="查看文件和目录的权限"><a href="#查看文件和目录的权限" class="headerlink" title="查看文件和目录的权限"></a>查看文件和目录的权限</h4><pre class="line-numbers language-none"><code class="language-none">ls -l [文件]- rw- r-- r--ls -ld [目录]d rwx r-x r-x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th align="center"></th><th align="center">r</th><th align="center">w</th><th align="center">x</th></tr></thead><tbody><tr><td align="center">文件</td><td align="center">可读</td><td align="center">可写</td><td align="center">可执行</td></tr><tr><td align="center">目录</td><td align="center">可以查看目录内容</td><td align="center">可以增加删除文件</td><td align="center">可以进入目录</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">- rw- r-- r--        test.txt文件的权限d rwx r-x r-x字段1：文件类型 -普通文件 d目录 l符号链接 b快设备字段2：文件所属者对该文件的权限字段3：文件所属组对该文件的权限字段4：其他用户对该文件的权限（既不是文件所属者也不是文件所属组中的用户）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/7b05f45d7a214c559cafd99ca65bfb0f.png"></p><p><strong>创建一个tom用户，没有添加到root组，可以查看test.txt文件，却不可以修改该文件。</strong></p><h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><pre class="line-numbers language-none"><code class="language-none">chmod 对象 算数运算符 权限 文件对象：u（所属者）g（所属组）o（其他用户）a（all）算数运算符：-＋＝权限：rwx r--      4     -w-      2--x      1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除其他用户对test.txt文件的可读权限</p><pre class="line-numbers language-none"><code class="language-none">chmod o-r /test.txt[文件路径]或者chmod 640 /test.txt[文件路径]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="改变文件的所属者和所属组"><a href="#改变文件的所属者和所属组" class="headerlink" title="改变文件的所属者和所属组"></a>改变文件的所属者和所属组</h4><pre class="line-numbers language-none"><code class="language-none">chown 用户 文件chgrp 用户 文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>改变test.txt文件所属者为tom，所属组为tom</p><pre class="line-numbers language-none"><code class="language-none">chown tom /test.txtchgrp tom /test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="粘滞位-sgid-suid-权限"><a href="#粘滞位-sgid-suid-权限" class="headerlink" title="粘滞位 sgid suid 权限"></a>粘滞位 sgid suid 权限</h4><ul><li>粘滞位针对目录赋权，目录中创建的</li><li>文件只有建立者可以删除</li></ul><p>例如：创建用户tom和用户jerry，使用tom用户创建/test目录，分别在/test目录下创建tom.txt和jerry.txt文件，/test目录权限为777.这个时候tom可以删除jerry.txt文件，反之亦然。但是一旦修改test目录添加粘滞位，那么jerry用户就不可以删除tom.txt文件了。</p><pre class="line-numbers language-none"><code class="language-none">chmod o+t testt代表粘滞位/tmp临时目录默认就开启了粘滞位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>sgid针对目录建立的权限，再该目录中建立的文件所属组继承父目录的属组</li></ul><pre class="line-numbers language-none"><code class="language-none">chmod g+s [目录]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>suid 对可执行文件建立。</li></ul><p>谁允许该文件，具有文件所属者的权限</p><p><img src="https://img-blog.csdnimg.cn/050d9fc49ffe4f0094ab21247431f42f.png"></p><p>执行了以上命令后，再切换到tom用户就是可以查看/shado文件了，且ll查看权限还是000</p><p><img src="https://img-blog.csdnimg.cn/f6d7e654cf494bb69ae7327c3d6445cc.png"></p><p>撤销粘滞位、sgid、suid命令</p><pre class="line-numbers language-none"><code class="language-none">chmod 对象 - 权限  文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/cf9bc85b8e964ae5841a788abd1d2bac.png"></p><p>如何实现不允许添加新用户</p><pre class="line-numbers language-none"><code class="language-none">chattr +i /etc/passwd /etc/shadowlsattr /etc/passwd /etc/shadow解除不允许添加新用户chattr -i /etc/passwd /etc/shadow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/7562dc73433641b1aaecbb8e7afe580c.png"></p><h4 id="umask简介"><a href="#umask简介" class="headerlink" title="umask简介"></a>umask简介</h4><p>文件权限=0777-umask</p><p>rwxr-xr-x         755</p><p>目录的最高权限0777—0022＝0755</p><p>文件    666—022＝644</p><p>027 ——一般公司服务器规定umask为027，也就是其他用户没有权限</p><pre class="line-numbers language-none"><code class="language-none">使用vim /etc/profile命令查看umask值使用vim /etc/bashrc命令查看umask值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/42779680c48e498894e4471fa1007b92.png"></p><p>修改默认密码最长有效期，一般都是99999，建议改为90</p><pre class="line-numbers language-none"><code class="language-none">vim /etc/login.defs第25行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/957a0ee4e083450caa39e7e0c93e3f9e.png"></p><h2 id="12-网络地址配置"><a href="#12-网络地址配置" class="headerlink" title="12.网络地址配置"></a>12.网络地址配置</h2><p>1.确认系统的网卡信息和ip地址</p><pre class="line-numbers language-none"><code class="language-none">ip addr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[okra@localhost ~]$ ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    link/ether 00:0c:29:76:3e:10 brd ff:ff:ff:ff:ff:ff3: ens34: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    link/ether 00:0c:29:76:3e:1a brd ff:ff:ff:ff:ff:ff4: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000    link/ether 52:54:00:af:68:5d brd ff:ff:ff:ff:ff:ff    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0       valid_lft forever preferred_lft forever5: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000    link/ether 52:54:00:af:68:5d brd ff:ff:ff:ff:ff:ff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看见本地换回地址和其他4张网卡信息</p><p>2.关闭natworkmanager服务</p><pre class="line-numbers language-none"><code class="language-none">service NetworkManager stopchkconfig --level 345 NetworkManager off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.配置ip地址</p><pre class="line-numbers language-none"><code class="language-none">ip addr add 172.20.149.107/24 dev eth0我的centos的网络接口是ens33dev---代表设备<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.开启网络接口eth0，不然光配地址是不行的</p><pre class="line-numbers language-none"><code class="language-none">ip link set eth0 up<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.设置网关</p><pre class="line-numbers language-none"><code class="language-none">ip route add default via 【网关ip】 dev eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.访问百度</p><pre class="line-numbers language-none"><code class="language-none">nslookup www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>失败</p><p>在/etc/resolv.conf添加百度服务器地址</p><pre class="line-numbers language-none"><code class="language-none">vim /etc/resolv.conf在空行添加servername 202.106.0.20保存退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>访问百度成功</p><p>7.修改IP地址</p><pre class="line-numbers language-none"><code class="language-none">vim /etc/sysconfig/network-scripts/ifcfg-ens33(这是我的网络接口)DEVICE＝eth0网卡设备TYPE＝Ethernet 类型ONBOOT＝yes 是否允许network服务管理该文件 BOOTPROTO＝static 静态获取IPADDR=192.168.1.254 NETMASK=255.255.255.0 重启服务/etc/init.d/network restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/ad81cea413bc403e99d025b19019147a.png"></p><h2 id="13-日志的管理与分析"><a href="#13-日志的管理与分析" class="headerlink" title="13.日志的管理与分析"></a>13.日志的管理与分析</h2><p>Linux的日志文件存放在/var/log目录下</p><p>日志分类</p><ul><li>系统日志—messages</li><li>登录日志—secure</li><li>程序日志</li><li><img src="https://img-blog.csdnimg.cn/e3c27d9335354ac98a573a4d73f85684.png" style="zoom:67%;"></li></ul><p>【日志类型】.【日志级别】</p><p>日志级别：</p><p>debug, info, notice, warning, warn (same as warning), err, error (same as err), crit, alert, emerg, panic (same</p><p>|emerg) </p><h2 id="14-Apache配置"><a href="#14-Apache配置" class="headerlink" title="14.Apache配置"></a>14.Apache配置</h2><p>1.启动服务</p><pre class="line-numbers language-none"><code class="language-none">/usr/local/httpd/bin/apachectl start/usr/local/httpd/bin/apachectl stopservice httpd start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.验证</p><pre class="line-numbers language-none"><code class="language-none">ss -antpl|grep 80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/9a5205445d5f4e7a8aa7098eb73e6d68.png"></p><p>3.主页创建</p><pre class="line-numbers language-none"><code class="language-none">vim /var/www/html/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.主配置文件分析</p><pre class="line-numbers language-none"><code class="language-none">vim /usr/local/httpd/conf/httpd.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.创建页面内容目录</p><pre class="line-numbers language-none"><code class="language-none">mkdir /var/www/html/share<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.拷贝文件至/var/www/html/share</p><pre class="line-numbers language-none"><code class="language-none">cp /etc/passwd /etc/shadow /var/www/html/share/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ensp-USG6000V防火墙开机一直跳###的解决方法</title>
      <link href="/2022-10-13-ensp-usg6000v-fang-huo-qiang-kai-ji-yi-zhi-tiao-de-jie-jue-fang-fa.html"/>
      <url>/2022-10-13-ensp-usg6000v-fang-huo-qiang-kai-ji-yi-zhi-tiao-de-jie-jue-fang-fa.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20210502112900312.png"></p><p><strong>↑问题就像这样</strong></p><hr><p><strong>首先我们打开Oracle VM VirtualBox：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210502113002900.png"></p><p><img src="https://img-blog.csdnimg.cn/20210502113112304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pYV19OVURU,size_16,color_FFFFFF,t_70"></p><p><strong>↑然后选择vfw_usg(vfw_usg_Link)，再点击“设置”</strong></p><p><img src="https://img-blog.csdnimg.cn/20210502113253973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pYV19OVURU,size_16,color_FFFFFF,t_70"></p><p><strong>↑在“网络”中分别选择网卡3和网卡4，都选择“启用网络连接”→“桥接网卡”，“界面名称”分别选择以太网卡和无线网卡</strong></p><hr><p><font color="red"><strong>USG6000V的正常启动就必须是系统中有一个真实的网口是激活，不如：以太口，无线网卡……</strong></font></p><p>同时建议关闭计算机防火墙、杀毒软件</p><p><img src="https://img-blog.csdnimg.cn/a6f5754a4c484975955dad7788f3684d.png"></p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp 典型企业网组建</title>
      <link href="/2022-10-13-shi-yan-ensp-dian-xing-qi-ye-wang-zu-jian.html"/>
      <url>/2022-10-13-shi-yan-ensp-dian-xing-qi-ye-wang-zu-jian.html</url>
      
        <content type="html"><![CDATA[<h1 id="典型企业网组建"><a href="#典型企业网组建" class="headerlink" title="典型企业网组建"></a><center>典型企业网组建</center></h1><p>拓扑图</p><p>实验步骤</p><p>1.企业内网各部门不同网段之间划分VLAN</p><img src="https://img-blog.csdnimg.cn/36b5c2f1cdc648deae686a4a0a3bd266.png" style="zoom:50%;"><p>思路：</p><ul><li>创建vlan10和vlan20</li></ul><pre class="line-numbers language-none"><code class="language-none">vlan batch 10 20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>三层交换机配置不同网段的网关</li></ul><pre class="line-numbers language-none"><code class="language-none">interface Vlanif10 ip address 192.168.1.254 255.255.255.0interface Vlanif20 ip address 192.168.2.254 255.255.255.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在接口g0/0/1和g0/0/2下划分vlan 10 vlan20</li></ul><pre class="line-numbers language-none"><code class="language-none">interface GigabitEthernet0/0/1 port link-type access port default vlan 10interface GigabitEthernet0/0/2 port link-type access port default vlan 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.企业网DHCP配置</p><p>思路：</p><ul><li>在三层交换机打开DHCP</li></ul><pre class="line-numbers language-none"><code class="language-none">dhcp enable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建地址池pool1 和 pool2，添加网段、网关和dns等信息</li></ul><pre class="line-numbers language-none"><code class="language-none">ip pool pool1 gateway-list 192.168.1.254 network 192.168.1.0 mask 255.255.255.0 excluded-ip-address 192.168.1.10 192.168.1.19 lease day 0 hour 8 minute 0 dns-list 8.8.8.8ip pool pool2 gateway-list 192.168.2.254 network 192.168.2.0 mask 255.255.255.0 lease day 0 hour 8 minute 0 dns-list 8.8.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>到了这里已经实现了内网各PC之间的互通</li></ul><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 192.168.2.252Ping 192.168.2.252: 32 data bytes, Press Ctrl_C to breakFrom 192.168.2.252: bytes=32 seq=1 ttl=127 time=94 msFrom 192.168.2.252: bytes=32 seq=2 ttl=127 time=78 msFrom 192.168.2.252: bytes=32 seq=3 ttl=127 time=63 msFrom 192.168.2.252: bytes=32 seq=4 ttl=127 time=78 msFrom 192.168.2.252: bytes=32 seq=5 ttl=127 time=78 ms--- 192.168.2.252 ping statistics ---  5 packet(s) transmitted  5 packet(s) received  0.00% packet loss  round-trip min/avg/max = 63/78/94 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.企业网路由器的配置，实现内外网互通</p><img src="https://img-blog.csdnimg.cn/e3ec4eb67bb1453c87e3c8005b7b77fc.png" style="zoom: 50%;"><p>思路：</p><ul><li>完成各接口ip配置</li></ul><pre class="line-numbers language-none"><code class="language-none">三层交换机：vlan 100interface Vlanif100 ip address 10.10.10.1 255.255.255.0interface GigabitEthernet0/0/3 port link-type access port default vlan 100 AR1：interface GigabitEthernet0/0/0 ip address 10.10.10.2 255.255.255.0 interface GigabitEthernet0/0/1 ip address 64.1.1.1 255.255.255.0 AR2：interface GigabitEthernet0/0/0 ip address 64.1.1.10 255.255.255.0 interface GigabitEthernet0/0/1 ip address 6.6.6.1 255.255.255.0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>路由：添加去 回的路由</li></ul><pre class="line-numbers language-none"><code class="language-none">三层交换机：去路由ip route-static 6.6.6.6 255.255.255.0 10.10.10.2AR1：去路由ip route-static 6.6.6.6 255.255.255.0 64.1.1.10回路由ip route-static 192.168.1.0 255.255.255.0 10.10.10.1ip route-static 192.168.2.0 255.255.255.0 10.10.10.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>nat：实现内外网地址转换</li></ul><pre class="line-numbers language-none"><code class="language-none">[AR1]acl 2000[AR1-acl-basic-2000]rule permit source 192.168.1.0 0.0.0.255[AR1-acl-basic-2000]rule permit source 192.168.2.0 0.0.0.255[AR1-acl-basic-2000]int g0/0/1[AR1-GigabitEthernet0/0/1]nat outbound 2000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这一步就实现了内外网的互通</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 6.6.6.6Ping 6.6.6.6: 32 data bytes, Press Ctrl_C to breakRequest timeout!From 6.6.6.6: bytes=32 seq=2 ttl=125 time=62 msFrom 6.6.6.6: bytes=32 seq=3 ttl=125 time=78 msFrom 6.6.6.6: bytes=32 seq=4 ttl=125 time=63 msFrom 6.6.6.6: bytes=32 seq=5 ttl=125 time=47 ms--- 6.6.6.6 ping statistics ---  5 packet(s) transmitted  4 packet(s) received  20.00% packet loss  round-trip min/avg/max = 0/62/78 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.企业网防火墙配置</p><p>需要用防火墙来代替之前的路由器AR1</p><p>思路：</p><ul><li>第一次打开防火墙默认要输入用户名admin密码Admin@123，再输入新的密码Fw@123456</li></ul><pre class="line-numbers language-none"><code class="language-none">Username:adminPassword:The password needs to be changed. Change now? [Y/N]: yPlease enter old password: Please enter new password: Please confirm new password:  Info: Your password has been changed. Save the change to survive a reboot. **************************************************************************         Copyright (C) 2014-2018 Huawei Technologies Co., Ltd.         **                           All rights reserved.                        **               Without the owner's prior written consent,              **        no decompiling or reverse-engineering shall be allowed.        **************************************************************************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>先完成之前在AR1上配置的ip和路由</li></ul><center><font color="red">注意：g0/0/0接口默认就在防火墙的trust信任域内，请避免使用。我在实验中就是自动连线防火墙和内网之间连的是g0/0/0接口，导致在添加信任域时报error，最后配置的安全规则无法使用</font></center><pre class="line-numbers language-none"><code class="language-none">interface GigabitEthernet1/0/1 ip address 10.10.10.2 255.255.255.0 interface GigabitEthernet1/0/0 ip address 64.1.1.1 24[SRG]ip route-static 192.168.2.0 24 10.10.10.1[SRG]ip route-static 192.168.1.0 24 10.10.10.1[SRG]ip route-static 0.0.0.0 0.0.0.0 64.1.1.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加信任域和非信任域</li></ul><pre class="line-numbers language-none"><code class="language-none">[SRG]firewall zone trust 15:20:05  2022/10/13[SRG-zone-trust]add int g1/0/115:20:39  2022/10/13 Info: The interface has been added to trust security zone.[SRG-zone-trust]q15:20:51  2022/10/13[SRG]firewall zone untrust15:20:57  2022/10/13[SRG-zone-untrust]add interface GigabitEthernet1/0/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置安全策略</li></ul><pre class="line-numbers language-none"><code class="language-none">[USG6000V1]security-policy [USG6000V1-policy-security]rule name shangwang//配置一条名叫上网的规则[USG6000V1-policy-security-rule-shangwang]source-zone trust //源是来自trust信任区域的报文[USG6000V1-policy-security-rule-shangwang]destination-zone untrust //目的是去往untrust非信任区域[USG6000V1-policy-security-rule-shangwang]action  permit//动作允许<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置NAT策略</li></ul><pre class="line-numbers language-none"><code class="language-none">[USG6000V1]nat-policy//开启nat配置[USG6000V1-policy-nat]rule name shangwang//创建一条规则为上网[USG6000V1-policy-nat-rule-shangwang]source-zone trust //源是来自trust信任区域的报文[USG6000V1-policy-nat-rule-shangwang]destination-zone untrust //目的是去往untrust非信任区域[USG6000V1-policy-nat-rule-shangwang]action source-nat easy-ip //动作源地址进行easy-ip的转换，easy-ip就是将内网地址转换为防火墙出接口的地址64.1.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在内外网之间就通了</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 6.6.6.6Ping 6.6.6.6: 32 data bytes, Press Ctrl_C to breakRequest timeout!From 6.6.6.6: bytes=32 seq=2 ttl=125 time=62 msFrom 6.6.6.6: bytes=32 seq=3 ttl=125 time=63 msFrom 6.6.6.6: bytes=32 seq=4 ttl=125 time=47 msFrom 6.6.6.6: bytes=32 seq=5 ttl=125 time=46 ms--- 6.6.6.6 ping statistics ---  5 packet(s) transmitted  4 packet(s) received  20.00% packet loss  round-trip min/avg/max = 0/54/63 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red"><strong>但是要注意直接ping防火墙的接口ip是无法Ping成功的,这是一种防火墙的安全措施</strong></font></p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 64.1.1.1Ping 64.1.1.1: 32 data bytes, Press Ctrl_C to breakRequest timeout!Request timeout!Request timeout!Request timeout!Request timeout!--- 64.1.1.1 ping statistics ---  5 packet(s) transmitted  0 packet(s) received  100.00% packet loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.本地连接ensp的防火墙，通过web页面进行管理</p><img src="https://img-blog.csdnimg.cn/d09554c9a2564719816cabf6710ed60e.png" style="zoom:67%;"><img src="https://img-blog.csdnimg.cn/4312d3b8efd649a687a530f9c8de810c.png" style="zoom:50%;"><p><img src="https://img-blog.csdnimg.cn/ad9dd9e4e68d49f2ad59a958f9c8d924.png"></p><pre class="line-numbers language-none"><code class="language-none">1.点击cloud，打开控制面板2.依次点击 绑定信息——UDP——增加——绑定信息——VMnet8——增加//UDP代表ensp虚拟机内部网络，VMnet8是本机的物理网卡3.选择入端口为1，出端口为24.勾选双向通道<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>给防火墙配上一个管理ip（VMnet8的ipv4地址）</p><pre class="line-numbers language-none"><code class="language-none">[USG6000V1]int g1/0/3[USG6000V1-GigabitEthernet1/0/3]ip add 192.168.23.23 255.255.255.0//必须和VMnet8在同一网段，VMnet8——192.168.23.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将g1/0/3接口放入trust信任区,且打开管理全系和ping的权限</p><pre class="line-numbers language-none"><code class="language-none">[USG6000V1]firewall zone trust [USG6000V1-zone-trust]add int g1/0/3[USG6000V1-zone-trust]q[USG6000V1]int g1/0/3[USG6000V1-GigabitEthernet1/0/3]service-manage enable [USG6000V1-GigabitEthernet1/0/3]service-manage ?  all     ALL  service   enable  Service manage switch on/off   http    HTTP service   https   HTTPS service   ping    Ping service   snmp    SNMP service   ssh     SSH service   telnet  Telnet service [USG6000V1-GigabitEthernet1/0/3]service-manage ping permit <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在就可以从本机去ping防火墙了</p><p><img src="https://img-blog.csdnimg.cn/1512fbd99fef42c9bd2645c8f86eb181.png"></p><p>打开防火墙远程管理权限</p><pre class="line-numbers language-none"><code class="language-none">[USG6000V1-GigabitEthernet1/0/3]service-manage https permit //打开远程管理https权限[USG6000V1-GigabitEthernet1/0/3]q[USG6000V1]security-policy [USG6000V1-policy-security]rule name guanli//创建名叫管理规则[USG6000V1-policy-security-rule-guanli]source-zone trust //来自trust[USG6000V1-policy-security-rule-guanli]destination-zone local //目的为local本地[USG6000V1-policy-security-rule-guanli]action permit //允许执行[USG6000V1-policy-security-rule-guanli]dis th2022-10-13 11:40:15.680 # rule name guanli  source-zone trust  destination-zone local  action permit#return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在浏览器输入<a href="https://192.168.23.23:8443,%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E5%8D%8E%E4%B8%BA%E9%98%B2%E7%81%AB%E5%A2%99web%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2%E4%BA%86%E3%80%82%E8%B4%A6%E5%8F%B7admin%E5%AF%86%E7%A0%81%E6%98%AF%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%BC%80%E5%90%AF%E9%98%B2%E7%81%AB%E5%A2%99%E6%98%AF%E8%87%AA%E5%B7%B1%E8%AE%BE%E7%9A%84%EF%BC%8C%E8%BF%99%E9%87%8C%E6%98%AFFw@0.1.226.64/">https://192.168.23.23:8443,就可以访问华为防火墙web管理界面了。账号admin密码是第一次开启防火墙是自己设的，这里是Fw@123456</a></p><p>注意：一开始访问会有警告，点击高级——继续访问即可</p><img src="https://img-blog.csdnimg.cn/fa23a1ea92314b40bec46b6f44173f21.png" style="zoom: 50%;"><img src="https://img-blog.csdnimg.cn/8c9477ac713c46d9854550d1bd3b1f10.png" style="zoom: 33%;"><p>点击策略，新建安全策略</p><p><img src="https://img-blog.csdnimg.cn/a364fe8542ee4baa86919a143a526fcf.png"></p><p>添加一条策略，禁止PC1访问任何网络</p><p><img src="https://img-blog.csdnimg.cn/d7fce2cc043b4b3abc0d705e548492e0.png"></p><p>点击确定，可以看见jinzhiPC1已经在了</p><p><img src="https://img-blog.csdnimg.cn/000bc45cefeb47a49287359e559fa587.png"></p><p>尝试用PC1ping6.6.6.6,发现还是可以Ping通</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 6.6.6.6Ping 6.6.6.6: 32 data bytes, Press Ctrl_C to breakRequest timeout!From 6.6.6.6: bytes=32 seq=2 ttl=125 time=63 msFrom 6.6.6.6: bytes=32 seq=3 ttl=125 time=47 msFrom 6.6.6.6: bytes=32 seq=4 ttl=125 time=78 msFrom 6.6.6.6: bytes=32 seq=5 ttl=125 time=62 ms--- 6.6.6.6 ping statistics ---  5 packet(s) transmitted  4 packet(s) received  20.00% packet loss  round-trip min/avg/max = 0/62/78 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为防火墙是按策略的顺序从高到低执行的，当我们将jinzhiPC1放在第一位时，ping就失败了</p><p><img src="https://img-blog.csdnimg.cn/354e5912d8944388a4b814286d7bd69e.png"></p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 6.6.6.6Ping 6.6.6.6: 32 data bytes, Press Ctrl_C to breakRequest timeout!Request timeout!Request timeout!Request timeout!Request timeout!--- 6.6.6.6 ping statistics ---  5 packet(s) transmitted  0 packet(s) received  100.00% packet loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 企业网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无线Fat AP与Fit AP区别</title>
      <link href="/2022-10-12-wu-xian-fat-ap-yu-fit-ap-qu-bie.html"/>
      <url>/2022-10-12-wu-xian-fat-ap-yu-fit-ap-qu-bie.html</url>
      
        <content type="html"><![CDATA[<h1 id="无线Fat-AP和Fit-AP如何区分"><a href="#无线Fat-AP和Fit-AP如何区分" class="headerlink" title="无线Fat AP和Fit AP如何区分"></a><center>无线Fat AP和Fit AP如何区分</center></h1><p>无线AP分为Fat AP和Fit AP两类，两种类型只有少数能可从外观区分，大部分从外观上比较难区别，但可以通过作原理和功能辨别。</p><h3 id="Fat-AP和Fit-AP"><a href="#Fat-AP和Fit-AP" class="headerlink" title="Fat AP和Fit AP"></a><strong>Fat AP和Fit AP</strong></h3><p><img src="http://www.choseal.net.cn/repository/image/VRAD8EnMQUOAoi_rdFmFdg.png?k=1588217885000"></p><p>​        Fat  AP除了具备无线接入功能外，一般还同时具备WAN、LAN端口，支持DHCP服务器、DNS和MAC地址克隆、VPN接入、防火墙等安全功能。Fat  AP通常有自带的完整操作系统，是可以独立工作的网络设备，可以实现拨号、路由等功能，一个典型的例子就是我们常见的无线路由器。</p><p>​       Fat AP简单地理解为具有管理功能的AP。Fat AP是具有其自己的管理功能并且广播SSID并且还连接到终端的AP。它属于小而完整的麻雀类型。</p><p>​        Fit AP，理解的形象是瘦Fat  AP，删除路由、DNS、DHCP服务器和许多其他加载功能，只保留无线接入部分。我们经常提到的AP指的是这样的Fit  AP，其相当于无线交换机或集线器，并且仅提供一种有线/无线信号转换和无线信号接收/发送功能。作为无线局域网的一个组成部分，Fit  AP无法独立工作。它必须与AC管理合作才能成为一个完整的系统。</p><p>​       Fit AP没有管理功能。可以理解为信号发送和接收天线。其管理功能由后端执行，称为无线控制器（AC）。</p><p>​       Fit AP无法自行管理。AC需要管理。Fit AP仅负责广播SSID和连接终端。通常，超小型网络使用Fat AP，而小型网络使用Fit AP。</p><p>​       其原因主要是因为在许多无线路由器的情况下，大型企业部署了校园的无线覆盖范围。拥有数百个无线路由器是正常的，但管理起来非常麻烦。像家庭路由器一样使用一台路由器是不可能的。要进行配置，AC的所有统一管理都更加方便快捷。</p><p>​       高端无线控制器（AC）可以管理数十万个无线AP，并且可以集中配置和交付配置。企业级无线AP实际上可以很胖，可以通过不同的软件进行编辑。实现，但在大规模部署的情况下没有意义。</p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fat AP&amp;Fit AP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 15-园区典型组网</title>
      <link href="/2022-10-12-shu-tong-15-yuan-qu-dian-xing-zu-wang.html"/>
      <url>/2022-10-12-shu-tong-15-yuan-qu-dian-xing-zu-wang.html</url>
      
        <content type="html"><![CDATA[<h1 id="园区网典型组网"><a href="#园区网典型组网" class="headerlink" title="园区网典型组网"></a><center>园区网典型组网</center></h1><h3 id="什么是园区网"><a href="#什么是园区网" class="headerlink" title="什么是园区网"></a>什么是园区网</h3><p><img src="https://img-blog.csdnimg.cn/cea1c9bc15c7462f99207443df3a0a04.png"></p><pre class="line-numbers language-none"><code class="language-none">终端层：最接近用户的一层，如打印机、PC等就是在这一层接入园区出口层：这一层放的就是要对外向internet去访问的设备，如防火墙、路由器、入侵检测等过滤外网攻击，安全防御的区域边界设备DMZ：是英文“demilitarized zone”的缩写，中文名称为“隔离区”，也称“非军事化区”。它是为了解决安装防火墙后外部网络的访问用户不能访问内部网络服务器的问题，而设立的一个非安全系统与安全系统之间的缓冲区。该缓冲区位于企业内部网络和外部网络之间的小网络区域内。在这个小网络区域内可以放置一些必须公开的服务器设施，如企业Web服务器、FTP服务器和论坛等。另一方面，通过这样一个DMZ区域，更加有效地保护了内部网络。因为这种网络部署，比起一般的防火墙方案，对来自外网的攻击者来说又多了一道关卡。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="园区网络典型架构"><a href="#园区网络典型架构" class="headerlink" title="园区网络典型架构"></a>园区网络典型架构</h3><p><img src="https://img-blog.csdnimg.cn/9c5ef856476d4cd5af0f688910f0cde2.png"></p><h3 id="小型园区网络典型架构"><a href="#小型园区网络典型架构" class="headerlink" title="小型园区网络典型架构"></a>小型园区网络典型架构</h3><img src="https://img-blog.csdnimg.cn/24f58e68a9ce4fa3ba9da8233a8c7658.png" style="zoom:50%;"><p>小型园区网络应用于接入用户数量较少的场景，一般支持几个至几十个用户。网络覆盖范围也仅限于一个地点，网络不分层次结构。网络建设的目的常常就是为了满足内部资源互访。</p><table><thead><tr><th align="center">终端用户数（个）</th><th align="center">&lt;200</th></tr></thead><tbody><tr><td align="center">网元数量（个）</td><td align="center">&lt;25</td></tr></tbody></table><p>小型园区网特点：</p><ul><li>用户数量较少</li><li>仅单个地点</li><li>网络无层次性</li><li>网络结构简单</li></ul><h3 id="中型园区网络典型结构"><a href="#中型园区网络典型结构" class="headerlink" title="中型园区网络典型结构"></a>中型园区网络典型结构</h3><img src="https://img-blog.csdnimg.cn/6d195e77c1e343cc8b074eda94139291.png" style="zoom: 67%;"><p>中型园区网络能够支撑几百至上千用户的接入。</p><p>中型网络引入了按功能进行分区的理念，也就是模块化的设计思路，但功能模块相对较少。一般根据业务需要进行灵活分区。</p><table><thead><tr><th align="center">终端用户数（个）</th><th align="center">200~2000</th></tr></thead><tbody><tr><td align="center">网元数量（个）</td><td align="center">25~100</td></tr></tbody></table><p>中型园区网络特点：</p><ul><li>规模中等</li><li>使用场景最多</li><li>功能分区</li><li>一般采用三层网络结构：核心、汇聚、接入</li></ul><h3 id="大型园区网络典型结构"><a href="#大型园区网络典型结构" class="headerlink" title="大型园区网络典型结构"></a>大型园区网络典型结构</h3><p><img src="https://img-blog.csdnimg.cn/1b348e9d534b4453b071bbb93fefc208.png"></p><p>大型园区网络可能是覆盖多幢建筑的网络，也可能是通过WAN连接一个城市内的多个园区的网络。一般会提供接入服务，允许出差员工通过VPN等技术接入公司内部网络。</p><table><thead><tr><th align="center">终端用户数（个）</th><th align="center">&gt;2000</th></tr></thead><tbody><tr><td align="center">网元数量（个）</td><td align="center">&gt;100</td></tr></tbody></table><p>大型园区网络特点：</p><ul><li>覆盖范围广</li><li>用户数量多</li><li>网络需求复杂</li><li>功能模块全</li><li>网络层次丰富</li></ul><h3 id="园区网络主要协议-技术"><a href="#园区网络主要协议-技术" class="headerlink" title="园区网络主要协议/技术"></a>园区网络主要协议/技术</h3><p><img src="https://img-blog.csdnimg.cn/bba324fdd46d40cfa80c234a359d94bd.png"></p><h3 id="园区网络项目生命周期"><a href="#园区网络项目生命周期" class="headerlink" title="园区网络项目生命周期"></a>园区网络项目生命周期</h3><p><img src="https://img-blog.csdnimg.cn/5bd4a7998e814c86b60c5700d956c118.png"></p><h3 id="小型园区网络设计"><a href="#小型园区网络设计" class="headerlink" title="小型园区网络设计"></a>小型园区网络设计</h3><p><img src="https://img-blog.csdnimg.cn/acc99c67507f435e87d5254587ced475.png"></p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 园区网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 14-SDN与NFV概述</title>
      <link href="/2022-10-12-shu-tong-14-sdn-yu-nfv-gai-shu.html"/>
      <url>/2022-10-12-shu-tong-14-sdn-yu-nfv-gai-shu.html</url>
      
        <content type="html"><![CDATA[<h1 id="SDN与NFV概述"><a href="#SDN与NFV概述" class="headerlink" title="SDN与NFV概述"></a><center>SDN与NFV概述</center></h1><p>​         SDN起源于2006年斯坦福大学的Clean Slate研究课题。2009年，Mckeown教授正式提出了SDN概念。</p><p>​        为了解决传统网络发展滞后、运维成本高的问题，服务提供商开始探索新的网络架构，希望能够将控制面（操作系统和各种软件）与硬件解耦，实现底层操作系统、基础软件协议以及增值业务软件的开源自研，这就诞生了SDN技术。</p><p>​        SDN，软件定义网络（Software-defined Networking），本质是网络软件化， 是Emulex网络一种新型网络创新架构，是网络虚拟化的一种实现方式，支持动态可编程的网络配置，核心技术OpenFlow通过将网络设备控制面与数据面分离开来，从而实现了网络流量的灵活控制，具有成本低、集中管理、灵活调度等优点。</p><pre><code>      耦合是指两个或两个以上的体系或两种运动形式间通过相互作用而彼此影响以至联合起来的现象。 解耦就是用数学方法将两种运动分离开来处理问题，常用解耦方法就是忽略或简化对所研究问题影响较小的一种运动，只分析主要的运动。</code></pre><p>​        网络软件化的定义是一种通过软件编程来设计、实现、部署、管理和维护网络设备和网络组件的总变革趋势。</p><p>​        网络虚拟化就是在一个物理网络上模拟出多个逻辑网络来。网络虚拟化的内容一般指虚拟专用网络 (VPN)。 </p><p>​        OpenFlow是一种网络通信协议，应用于SDN架构中控制器和转发器之间的通信。软件定义网络SDN的一个核心思想就是“转发、控制分离”，要实现转、控分离，就需要在控制器与转发器之间建立一个通信接口标准，允许控制器直接访问和控制转发器的转发平面。OpenFlow引入了“流表”的概念，转发器通过流表来指导数据包的转发。控制器正是通过OpenFlow提供的接口在转发器上部署相应的流表，从而实现对转发平面的控制。</p><p>​        我们分别将用于控制的网络称为“控制面”，将用于数据包发送的网络称为“数据面”。</p><h3 id="SDN的本质述求"><a href="#SDN的本质述求" class="headerlink" title="SDN的本质述求"></a>SDN的本质述求</h3><ul><li>SDN的本质诉求是让网络更加开放、灵活和简单。它的实现方式是为网络构建一个集中的大脑，通过全局视图集中控制，实现或业务快速部署、或流量调优、或网络业务开放等目标。</li><li>SDN的价值是：<ul><li>集中管理，简化网络管理与运维；</li><li>屏蔽技术细节，降低网络复杂度，降低运维成本（像BGP、ISIS、VXLAN、SSLVPN太复杂）；</li><li>自动化调优（拥有一个AI的智能数据库），提高网络利用率；</li><li>快速业务部署，缩短业务上线时间（ZTP自动化）；</li><li>网络开放，支撑开放可编程的第三方应用（app）。</li></ul></li></ul><h3 id="SDN架构"><a href="#SDN架构" class="headerlink" title="SDN架构"></a>SDN架构</h3><p>应用层还包括了负载均衡和防火墙等</p><p>设备层：路由器、交换机、防火墙等底层设备通过南向协议接口<strong>openflow</strong>被控制器所归纳管理。</p><p><img src="https://img-blog.csdnimg.cn/d08363832c28475e98cc764f853fbcde.png"></p><h4 id="华为SDN网络架构"><a href="#华为SDN网络架构" class="headerlink" title="华为SDN网络架构"></a>华为SDN网络架构</h4><p><img src="https://img-blog.csdnimg.cn/362c4574af324342a4a7a5d24ade0a3e.png"></p><h3 id="iMaster-NCE"><a href="#iMaster-NCE" class="headerlink" title="iMaster NCE"></a>iMaster NCE</h3><p>自动驾驶网络管理与系统，是华为及管理、控制、分析和AI智能功能于一体的网络化与智能化平台</p><p><img src="https://img-blog.csdnimg.cn/15eac527fd22447ab3ad969db22d6af7.png"></p><h3 id="极简ZTP部署"><a href="#极简ZTP部署" class="headerlink" title="极简ZTP部署"></a>极简ZTP部署</h3><img src="https://img-blog.csdnimg.cn/11f6e5f60cdc4d0a857cdd2c31c1f655.png" style="zoom:50%;"><p>ZTP部署流程：<br>1．网络管理员点击启动ZTP任务。</p><p>2．设备自动获取IP地址访问控制器。</p><p>3．控制器判断设备角色（Spine or Leaf），对上线设备下发管理IP、SNMP、NETCONF等配置，并 通过管理IP纳管设备。</p><p>4．控制器全局下发互联配置及OSPF、BGP等配置。</p><p>5．设备上线成功，管理员NCE查看全网信息。<br>注：Spine—Leaf是数据中心网络架构</p><h3 id="NFV"><a href="#NFV" class="headerlink" title="NFV"></a>NFV</h3><p>NFV（Network Functions Virtualization）是运营商为了解决电信网络硬件繁多、部署运维复  杂、业务创新困难等问题而提出的。NFV在重构电信网络的同时，给运营商带来的价值如下：</p><ul><li>缩短业务上线时间</li><li>降低建网成本 </li><li>提升网络运维效率 </li><li>构建开放的生态系统</li></ul><p><strong>NFV是虚拟化的部署</strong></p><h3 id="NFV关键技术：虚拟化"><a href="#NFV关键技术：虚拟化" class="headerlink" title="NFV关键技术：虚拟化"></a>NFV关键技术：虚拟化</h3><ul><li>在NFV的道路上，虚拟化是基础，云化是关键。</li><li>传统电信网络中，各个网元都是由专用硬件实现，成本高、运维难。虚拟化具有分区、隔离、封装和相对于硬件独立的特征，能够很好匹配NFV的需求。运营商引入此模式，将网元软件化，运行在通用基础设施上。</li></ul><p><img src="https://img-blog.csdnimg.cn/d1b2f0159e9b463fbba8463029aed8b7.png"></p><h3 id="NFV关键技术：云化"><a href="#NFV关键技术：云化" class="headerlink" title="NFV关键技术：云化"></a>NFV关键技术：云化</h3><ul><li>美国国家标准与技术研究院（NIST）定义：云计算是一种模型，它可以实现随时随地，便捷地，随需应变地从可配置计算资源共享池中获取所需的资源（例如，网络、服务器、存储、应用、及服务），资源能够快速供应并释放，使管理资源的工作量和与服务提供商的交互减小到最低限度。</li><li>云计算拥有诸多好处。运营商网络中网络功能的云化更多的是利用了资源池化和快速弹性伸缩两个特征。</li></ul><h3 id="NFV框架"><a href="#NFV框架" class="headerlink" title="NFV框架"></a>NFV框架</h3><p>NFV架构分NFVI（Network Functions Virtualization Infrastructure，基础设施层）、VNF（Virtualized Network Function，虚拟化网络功能层）和MANO（Management and Orchestration，管理编排域），同还要支持现有的BSS／OSS （Business support system／Operation support system）。</p><p><img src="https://img-blog.csdnimg.cn/8f35f9197f344fb3ad383126601bb8b3.png"></p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDN、NFV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp-DHCP全局地址池和接口地址池的配置</title>
      <link href="/2022-10-11-shi-yan-ensp-dhcp-quan-ju-di-zhi-chi-he-jie-kou-di-zhi-chi-de-pei-zhi.html"/>
      <url>/2022-10-11-shi-yan-ensp-dhcp-quan-ju-di-zhi-chi-he-jie-kou-di-zhi-chi-de-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<h1 id="DHCP全局地址池和接口地址池的配置"><a href="#DHCP全局地址池和接口地址池的配置" class="headerlink" title="DHCP全局地址池和接口地址池的配置"></a><center>DHCP全局地址池和接口地址池的配置</center></h1><p>DHCP支持配置两种地址池，包括全局地址池和接口地址池</p><p>拓扑图（接口地址池）</p><p><img src="https://img-blog.csdnimg.cn/3715a860c37b4f1b8ab0527e534df265.png"></p><p>实验步骤</p><p><img src="https://img-blog.csdnimg.cn/942f6d7c99a644dca145ae72004444cf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQzODE1MTc4,size_16,color_FFFFFF,t_70,g_se,x_16"></p><pre class="line-numbers language-none"><code class="language-none">dhcp enable：用来使能DHCP功能。在配置DHCP服务器时，必须先执行dhcp enable命令，才能配置DHCP的其他功能并生效。dhcp select interface：用来关联接口和接口地址池，为连接到接口的主机提供配置信息。在本示例中，接口GigabitEthernet 0/0/0被加入接口地址池中。dhcp server dns-list：用来指定接口地址池下的DNS服务器地址。dhcp server excluded-ip-address：用来配置接口地址池中不参与自动分配的IP地址范围。dhcp server lease:用来配置DHCP服务器接口地址池中IP地址的租用有效期限功能。缺省情况下，接口地址池中IP地址的租用有效期限为1天。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.在AR1上配置接口ip</p><pre class="line-numbers language-none"><code class="language-none">[AR1]int g0/0/1[AR1-GigabitEthernet0/0/1]ip add 192.168.2.254 24[AR1-GigabitEthernet0/0/1]int g0/0/0[AR1-GigabitEthernet0/0/0]ip add 192.168.1.254 24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.配置DHCP服务器</p><pre class="line-numbers language-none"><code class="language-none">[AR1]dhcp enableInfo: The operation may take a few seconds. Please wait for a moment.done.[AR1]int g0/0/0[AR1-GigabitEthernet0/0/0]dhcp select interface [AR1-GigabitEthernet0/0/0]dhcp server dns-list 192.168.1.254[AR1-GigabitEthernet0/0/0]dhcp server excluded-ip-address 192.168.1.1 192.168.1.9[AR1-GigabitEthernet0/0/0]dhcp server lease day 3[AR1-GigabitEthernet0/0/0]int g0/0/1[AR1-GigabitEthernet0/0/1]dhcp select interface <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.查看DHCP服务是否成功分配地址,可以看到已经成功分配了IP地址。</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ipconfigLink local IPv6 address...........: fe80::5689:98ff:fe4e:3c47IPv6 address......................: :: / 128IPv6 gateway......................: ::IPv4 address......................: 192.168.1.253Subnet mask.......................: 255.255.255.0Gateway...........................: 192.168.1.254Physical address..................: 54-89-98-4E-3C-47DNS server........................: 192.168.1.254PC&gt;ping 192.168.1.252Ping 192.168.1.252: 32 data bytes, Press Ctrl_C to breakFrom 192.168.1.252: bytes=32 seq=1 ttl=128 time=47 msFrom 192.168.1.252: bytes=32 seq=2 ttl=128 time=32 msFrom 192.168.1.252: bytes=32 seq=3 ttl=128 time=31 ms--- 192.168.1.252 ping statistics ---  3 packet(s) transmitted  3 packet(s) received  0.00% packet loss  round-trip min/avg/max = 31/36/47 msPC&gt;ping 192.168.2.254Ping 192.168.2.254: 32 data bytes, Press Ctrl_C to breakFrom 192.168.2.254: bytes=32 seq=1 ttl=255 time=63 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拓扑图（全局地址池）</p><img src="https://img-blog.csdnimg.cn/7da345e304884ce98dbe28c76c2ad5ed.png" style="zoom: 67%;"><p>实验步骤</p><p><img src="https://img-blog.csdnimg.cn/9b31ee23bedb4b5587d05c542d59b591.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQzODE1MTc4,size_16,color_FFFFFF,t_70,g_se,x_16"></p><pre class="line-numbers language-none"><code class="language-none">ip pool:用来创建全局地址池。network:用来配置全局地址池下可分配的网段地址。gateway-list:用来配置DHCP服务器全局地址池的出口网关地址。lease:用来配置DHCP全局地址池下的地址租期。缺省情况下，IP地址租期是1天。dhcp select global:用来给接口选择地址池。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.配置AR1的接口ip</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]int g0/0/0[Huawei-GigabitEthernet0/0/0]ip add 192.168.1.1 24[Huawei-GigabitEthernet0/0/0]int g0/0/1[Huawei-GigabitEthernet0/0/1]ip add 192.168.2.1 24[Huawei-GigabitEthernet0/0/1]q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.配置DHCP服务</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]dhcp enable Info: The operation may take a few seconds. Please wait for a moment.done.[Huawei]ip pool pool1Info: It's successful to create an IP address pool.[Huawei-ip-pool-pool1]gateway-list 192.168.1.1[Huawei-ip-pool-pool1]network 192.168.1.0 mask 255.255.255.0[Huawei-ip-pool-pool1]dns-list 1.1.1.1[Huawei-ip-pool-pool1]excluded-ip-address 192.168.1.10[Huawei-ip-pool-pool1]lease day 3[Huawei-ip-pool-pool1]q[Huawei]int g0/0/0[Huawei-GigabitEthernet0/0/0]dhcp select global [Huawei-GigabitEthernet0/0/0]q[Huawei]ip pool pool2Info: It's successful to create an IP address pool.[Huawei-ip-pool-pool2]gateway-list 192.168.2.1[Huawei-ip-pool-pool2]network 192.168.2.0 mask 24[Huawei-ip-pool-pool2]lease day 3[Huawei-ip-pool-pool2]q[Huawei]int g0/0/1[Huawei-GigabitEthernet0/0/1]dhcp select global [Huawei-GigabitEthernet0/0/1]q[Huawei]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.ipconfig查看DHCP是否配置成功</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ipconfig /renewIP ConfigurationLink local IPv6 address...........: fe80::5689:98ff:feef:2162IPv6 address......................: :: / 128IPv6 gateway......................: ::IPv4 address......................: 192.168.1.254Subnet mask.......................: 255.255.255.0Gateway...........................: 192.168.1.1Physical address..................: 54-89-98-EF-21-62DNS server........................: 1.1.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.使用display ip pool命令查看地址池,在这里可以看出，一共是506个地址  ，其中我排除了一个地址192.168.1.10，dhcp分配了2个地址，所以  Idle显示的就是503个地址</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]dis ip pool   -----------------------------------------------------------------------  Pool-name      : pool1  Pool-No        : 0  Position       : Local           Status           : Unlocked  Gateway-0      : 192.168.1.1       Mask           : 255.255.255.0  VPN instance   : --  -----------------------------------------------------------------------  Pool-name      : pool2  Pool-No        : 1  Position       : Local           Status           : Unlocked  Gateway-0      : 192.168.2.1       Mask           : 255.255.255.0  VPN instance   : --  IP address Statistic    Total       :506       Used        :2          Idle        :503       Expired     :0          Conflict    :0          Disable   :1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 全局、接口地址池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 13-DHCP+DNS+PPPOE</title>
      <link href="/2022-10-11-shu-tong-13-dhcp-dns-pppoe.html"/>
      <url>/2022-10-11-shu-tong-13-dhcp-dns-pppoe.html</url>
      
        <content type="html"><![CDATA[<h1 id="DHCP-DNS-PPPOE"><a href="#DHCP-DNS-PPPOE" class="headerlink" title="DHCP+DNS+PPPOE"></a><center>DHCP+DNS+PPPOE</center></h1><p><a href="https://so.csdn.net/so/search?q=DHCP&amp;spm=1001.2101.3001.7020">DHCP</a>(Dynamic Host Protocol),动态主机配置协议，是一个应用层协议。当我们将客户主机ip地址设置为动态获取方式时，DHCP服务器就会根据DHCP协议给客户端分配IP，使得客户机能够利用这个IP上网。</p><h3 id="DHCP报文类型"><a href="#DHCP报文类型" class="headerlink" title="DHCP报文类型"></a>DHCP报文类型</h3><p><img src="https://img-blog.csdnimg.cn/164e4cae08354c4396895584783f1887.png"></p><h3 id="DHCP工作原理"><a href="#DHCP工作原理" class="headerlink" title="DHCP工作原理"></a>DHCP工作原理</h3><p><img src="https://img-blog.csdnimg.cn/5606855b59ee428abc2b4ef51816c40d.png"></p><p>DHCP的实现分为4步，分别是：<br>第一步：Client端在局域网内发起一个DHCP　Discover<strong>广播</strong>包，目的是想发现能够给它提供IP的DHCP Server。<font color="red">（<strong>源IP：0.0.0.0 目的IP： 255.255.255.255</strong>）</font><br>第二步：可用的DHCP Server接收到Discover包之后，通过发送DHCP Offer包给予Client端应答，意在告诉Client端它可以提供IP地址。<font color="red">（<strong>只有华为设备发送Offer包是使用单播的方式，基于二层的Mac地址进行报文发送，客户端的MAC地址是在发送Discove广播包时知道的</strong>）</font><br>第三步：Client端接收到Offer包之后，发送DHCP Request包对请求配置确认。<font color="red">（<strong>在一个网络环境中可能存在多个DHCP Server，发送Request包作用是告诉网络中的DHCP Server，我已经收到了来自DHCP Server（A）的IP地址，来自其他DHCP Server的IP就不需要了。&nbsp; &nbsp;就像A和B同时向C表白，C接受了来自A的告白，拒绝了B</strong>）</font><br>第四步：DHCP Server发送ACK数据包，确认信息。</p><h3 id="DHCP租期更新"><a href="#DHCP租期更新" class="headerlink" title="DHCP租期更新"></a>DHCP租期更新</h3><p><img src="https://img-blog.csdnimg.cn/3ce34ecb92744b7aab165e2cfec311f5.png"></p><p>IP租期到达50%时，DHCP客户端会请求更新ip地址租约。</p><p><font color="red">（<strong>注意这里的DHCP Request和上面工作原理中的Request不是同一个，这是租期更新的Request，是单播</strong>）</font></p><p><font color="red">（<strong>工作原理中的Request，是向网络环境中的多台DHCP服务器发送的广播报文，因为不知道目标IP</strong>）</font></p><p><font color="red">（<strong>这里的Request，是客户端已经获取到了IP地址，向DHCP服务器发送的单播报文请求续约，是知道目标IP的</strong>）</font></p><h3 id="DHCP重绑定"><a href="#DHCP重绑定" class="headerlink" title="DHCP重绑定"></a>DHCP重绑定</h3><p><img src="https://img-blog.csdnimg.cn/166755b73b084f449f82159d9984edb8.png"></p><p>如果IP租期到达50%时，DHCP客户端请求更新ip地址租约时服务器没有响应。当DHCP客户端在租约期限到达87.5%时，还没收到服务器的响应，会申请重绑定（<strong>就是释放掉当前IP地址，之前DHCP的工作流程重新来一遍</strong>）。</p><h3 id="IP地址释放"><a href="#IP地址释放" class="headerlink" title="IP地址释放"></a>IP地址释放</h3><p><img src="https://img-blog.csdnimg.cn/0d08a1a4f2e94ff3a28c55ee50da92ae.png"></p><ul><li>如果IP租约到期前都没有收到服务器响应，客户端停止使用此IP地址。</li><li>如果DHCP客户端不再使用分配的IP地址，也可以主动向DHCP服务器发送DHCPRELEASE报文，释放该IP地址。</li></ul><pre class="line-numbers language-none"><code class="language-none">更加详细的DHCP工作原理请访问下面的链接https://blog.csdn.net/weixin_34481217/article/details/123425141<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center>=====================================================================================</center><p>网络地址转换技术NAT （<strong>Network Address Translation</strong>）主要用于实现位于内部 网络的主机访问外部网络的功能。当局域网内的主机需要访问外部网络时，通过NAT技术可以将其私网地址转换为公网地址，并且多个私网用户可以共用一个公网地址，这样既可保证网络互通，又节省了公网地址。</p><h3 id="静态NAT"><a href="#静态NAT" class="headerlink" title="静态NAT"></a>静态NAT</h3><p><img src="https://img-blog.csdnimg.cn/c608a17e98364279b4e91b6843b36560.png"></p><h3 id="动态NAT"><a href="#动态NAT" class="headerlink" title="动态NAT"></a>动态NAT</h3><p><img src="https://img-blog.csdnimg.cn/bb103022f18f43d098c2762ec4b91d15.png"></p><p><img src="https://img-blog.csdnimg.cn/abd7c699a5c540d3b27d7a733c1f1d33.png"></p><p><img src="https://img-blog.csdnimg.cn/b28b2789d9d144ee9d78fd47ba19b58d.png"></p><h3 id="NAPT"><a href="#NAPT" class="headerlink" title="NAPT"></a>NAPT</h3><p>前面的静态NAT和动态NAT在实际上是无法解决现实中的上网问题的，公网的ip地址是不够的。</p><p> <strong>网络地址端口转换——NAPT</strong></p><p>网络地址端口转换NAPT（Network Address Port Translation）是人们比较熟悉的一种转换方式。NAPT普遍应用于 <a href="http://baike.baidu.com/view/3401765.htm">接入设备</a>中，它可以将中小型的网络隐藏在一个合法的IP地址后面。NAPT与 <a href="http://baike.baidu.com/view/1449967.htm">动态地址</a>NAT不同，它将内部连接映射到外部网络中的一个单独的IP地址上，同时在该地址上加上一个由NAT设备选定的TCP <a href="http://baike.baidu.com/view/642103.htm">端口号</a>。</p><p>NAPT是一种较流行的NAT的变体通过转换TCP或UDP协议 <a href="http://baike.baidu.com/view/642103.htm">端口号</a>以及地址来提供并发性。除了一对源和目的IP地址以外，这个表还包括一对源和目的协议 <a href="http://baike.baidu.com/view/642103.htm">端口号</a>，以及NAT盒使用的一个协议端口号。<font color="red">注意：在NAPT中不是一台PC对应一个协议端口，而是一台PC中的一个进程（会话）对应一个协议端口。一共有65535个端口，且同一协议端口在被占用时，不会被其他进程同时占用。只有这个端口绑定的进程被网关释放掉才会重新回到池子里</font></p><p>NAPT的主要优势在于，能够使用一个全球有效IP地址获得通用性。主要缺点在于其通信仅限于TCP或UDP。只要所有通信都采用TCP或UDP，NAPT就允许一台内部计算机访问多台外部计算机，并允许多台内部 <a href="http://baike.baidu.com/view/23880.htm">主机</a>访问同一台外部计算机，相互之间不会发生冲突。</p><p><font color="red"><strong>NAPT与NAT的区别在于，NAPT不仅转换IP包中的IP地址，还对IP包中TCP和UDP的Port进行转换。这使得多台私有网主机利用1个NAT公共IP就可以同时和公共网进行通信。（NAPT多了对TCP和UDP的端口号的转换）</strong></font></p><p><img src="https://img-blog.csdnimg.cn/448e18989a424749ae4601475aa6ab06.png"></p><h3 id="Easy-IP"><a href="#Easy-IP" class="headerlink" title="Easy IP"></a>Easy IP</h3><p><img src="https://img-blog.csdnimg.cn/33b8de246dfc47259b09c62681d9baf2.png"></p><p><img src="https://img-blog.csdnimg.cn/ebbe33d9f27f44fbbd503f8ab849a8be.png"></p><h3 id="NAT服务器"><a href="#NAT服务器" class="headerlink" title="NAT服务器"></a>NAT服务器</h3><p><img src="https://img-blog.csdnimg.cn/a3c6723e2e6e4ee3a1734e009a1fff78.png"></p><center>=====================================================================================</center><h3 id="PPPoE"><a href="#PPPoE" class="headerlink" title="PPPoE"></a>PPPoE</h3><p>1.定义</p><p>PPPoE（PPP over Ethernet）协议是一种把PPP帧封装到以太网帧中的链路层协议。PPPoE可以使以太网网络中的多台主机连接到远端的宽带接入服务器。</p><p>2.目的</p><p>运营商希望把一个站点上的多台主机连接到同一台远程接入设备，同时接入设备能够提供与拨号上网类似的访问控制和计费功能。在众多的接入技术中，把多个主机连接到接入设备的最经济的方法就是以太网，而PPP协议可以提供良好的访问控制和计费功能，于是产生了在以太网上传输PPP报文的技术，即PPPoE。</p><p>PPPoE利用以太网将大量主机组成网络，通过一个远端接入设备连入因特网，并运用PPP协议对接入的每个主机进行控制，具有适用范围广、安全性高、计费方便的特点。</p><p>3.PPPoE拨号的过程</p><p><img src="https://img-blog.csdnimg.cn/7cb115fc3f1b4d85a269ce898998f928.png"></p><p>3.1.Discovery阶段</p><p>1)PPPoE Client广播发送一个PADI（PPPoE Active Discovery Initial）报文，在此报文中包含PPPoE Client想要得到的服务类型信息。</p><p>2)所有的PPPoE Server收到PADI报文之后，将其中请求的服务与自己能够提供的服务进行比较，如果可以提供，则单播回复一个PADO（PPPoE Active Discovery Offer）报文。</p><p>3)根据网络的拓扑结构，PPPoE Client可能收到多个PPPoE Server发送的PADO报文，PPPoE Client选择最先收到的PADO报文对应的PPPoE  Server做为自己的PPPoE Server，并单播发送一个PADR（PPPoE Active Discovery Request）报文。</p><p>4)PPPoE Server产生一个唯一的会话ID（Session ID），标识和PPPoE Client的这个会话，通过发送一个PADS（PPPoE  Active Discovery Session-confirmation）报文把会话ID发送给PPPoE  Client，会话建立成功后便进入PPPoE Session阶段。</p><p>完成之后通信双方都会知道PPPoE的Session_ID以及对方的以太网地址，它们共同确定了唯一的PPPoE Session。</p><p>3.2.Session阶段</p><p>PPPoE Session上的PPP协商和普通的PPP协商方式一致，分为LCP、认证、NCP三个阶段。</p><p>1)LCP阶段主要完成建立、配置和检测数据链路连接。</p><p>2)LCP协商成功后，开始进行认证，认证协议类型由LCP协商结果（CHAP或者PAP）决定。</p><p>3)认证成功后，PPP进入NCP阶段。NCP是一个协议族，用于配置不同的网络层协议，常用的是IP控制协议（IPCP），它主要负责协商用户的IP地址和DNS服务器地址。</p><p>PPPoE Session的PPP协商成功后，就可以承载PPP数据报文。</p><p>在PPPoE Session阶段所有的以太网数据包都是单播发送的。</p><p>3.3.Terminate阶段</p><p>PPP通信双方可以使用PPP协议自身来结束PPPoE会话，当无法使用PPP协议结束会话时可以使用PADT（PPPoE Active Discovery Terminate）报文。</p><p>进入PPPoE Session阶段后，PPPoE Client和PPPoE  Server都可以通过发送PADT报文的方式来结束PPPoE连接。PADT数据包可以在会话建立以后的任意时刻单播发送。在发送或接收到PADT后，就不允许再使用该会话发送PPP流量了。</p><p><img src="https://img-blog.csdnimg.cn/7873fb913c714b6cb593dec57b7a287a.png"></p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DHCP+DNS+PPPOE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AAA配置</title>
      <link href="/2022-10-10-aaa-pei-zhi.html"/>
      <url>/2022-10-10-aaa-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<p><em>AAA</em>是认证（Authentication）、授权（Authorization）和计费（Accounting）的简称，是网络安全中进行访问控制的一种安全管理机制，提供认证、授权和计费三种安全服务。</p><p><img src="https://img-blog.csdnimg.cn/c42fce4bed504a8dbe68b610fe651ba5.png"><img src="https://img-blog.csdnimg.cn/00ba3249d08f4dadb1a4ae4a7b5f0a5e.png"><img src="https://img-blog.csdnimg.cn/2f73e019c78345f3a421ed2d077721f2.png"><img src="https://img-blog.csdnimg.cn/1345823c0ae1434eaeef8ef8145fd836.png"><img src="https://img-blog.csdnimg.cn/f31e0c09504c4e18b22615a2af4ae77f.png"><img src="https://img-blog.csdnimg.cn/6b02a036e673482eb75ce55ced716741.png"></p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AAA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设备上架与调试步骤</title>
      <link href="/2022-10-10-she-bei-shang-jia-yu-diao-shi-bu-zou.html"/>
      <url>/2022-10-10-she-bei-shang-jia-yu-diao-shi-bu-zou.html</url>
      
        <content type="html"><![CDATA[<p>1．web界面 （网页调试）</p><p>显示的内容较少、有限；且一个功能默认参数不同</p><ul><li><p>适合：多台设备 同一个品牌 简单功能／小众品牌— 命令行不熟悉 方便—单机功能</p></li><li><p>不适合：功能性复杂 路由协议BGP ISIS MPLS—VPN—非单机功能</p></li></ul><p>2．命令行调试</p><p>不是学习命令行本身，而是学习功能的本身特点—系统层面—设备里的系统 </p><p><strong>本地调试／远程调试</strong></p><p>本地：多用于设备开局调试</p><table><thead><tr><th>电脑</th><th>CPU</th><th>内存</th><th>硬盘</th><th>电源</th></tr></thead><tbody><tr><td>网络设备</td><td>CPU</td><td>内存</td><td>Flash卡</td><td>电源</td></tr></tbody></table><p>4种 常见存储器：</p><p>1．FLASH卡—C盘一样 存放系统文件</p><ul><li>CF卡—传统卡—读取速度慢 数据稳定性高 不容易故障 </li><li>SD卡—读取速度快 容易故障</li></ul><p>启动系统：把FLASH卡的系统文件 读取到RAM中（内存）</p><p>2．RAM—内存条</p><p>3．ROM—主板存储器 存放引导系统—BIOS </p><p>4．NVRAM—存放配置文件</p><table><thead><tr><th>设备厂商</th><th>主系统</th><th>引入系统</th></tr></thead><tbody><tr><td>思科</td><td>ISO</td><td></td></tr><tr><td>华为</td><td>VRP</td><td></td></tr></tbody></table><p>主系统—配置系统 操作系统—display show等等</p><p>每一台设备—2套系统＝主系统＋引导系统</p><h3 id="设备系统升级方法"><a href="#设备系统升级方法" class="headerlink" title="设备系统升级方法"></a>设备系统升级方法</h3><p><img src="https://img-blog.csdnimg.cn/8603e60519ba4e378128f407c772d547.png"></p><p>波特率（B）：9600</p><p>—console接口 传输速度—紧急情况下有用</p><p>—设备升级 镜像系统—系统版本有bug／设备系统功能有bug／当前版本某个功能不支持</p><p>两种方法：</p><p>1．USB升级—携带usb接口—插入U盘 外置—面板上 直接连接 copy</p><p>2．FTP—文件传输协议—文件传到设备里</p><p>—远程调试—telnet不加密的 不安全／ssh—stelnet加密的＝用户权限 够的—设备系统—思科 华为 基础命令行开局调试—telnet—演示～～</p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设备上架与调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>掩码、通配符掩码、反掩码</title>
      <link href="/2022-10-09-yan-ma-tong-pei-fu-yan-ma-fan-yan-ma.html"/>
      <url>/2022-10-09-yan-ma-tong-pei-fu-yan-ma-fan-yan-ma.html</url>
      
        <content type="html"><![CDATA[<h3 id="掩码"><a href="#掩码" class="headerlink" title="掩码"></a>掩码</h3><ul><li>采用<strong>按位与</strong>运算，计算一个ip地址的网络号</li><li>0 &amp; 0 = 0  1 &amp; 0 = 0  即：x &amp; 0 = 0</li><li>0 &amp; 1 = 0  1 &amp; 1 = 1  即：x &amp; 1 = x</li><li>ip地址的结构 = 网络号 + 主机号</li><li>若要得到网络号，掩码的结构必然为<strong>前面是连续的1，后面是连续的0</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/02d6999a1dcd4cc28e5594e4f128aca1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAc3JfdW4=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><ul><li>0表示严格匹配，1表示无需匹配</li><li><strong>0和1可以连续也可以不连续</strong></li><li>通配符与掩码的功能完全不同，没有任何关系</li></ul><pre class="line-numbers language-none"><code class="language-none">例如：如何选择出192.x.1.x这样的地址？可以将通配符设置成00000000 11111111 00000000 11111111（0和1不连续）在ACL配置中    rule deny source 192.0.1.0 0.255.0.255    可以阻止所有原地址为192.x.1.x这样的包通过路由器或防火墙<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反掩码"><a href="#反掩码" class="headerlink" title="反掩码"></a>反掩码</h3><ul><li>反掩码可以看做<strong>特殊的通配符</strong></li><li>0和1连续</li><li>00000000 00000000 00000000 11111111（0和1连续）</li></ul><pre class="line-numbers language-none"><code class="language-none">在OSPF配置中network 192.168.1.0 0.0.0.255可以将网络号为192.168.1.0的接口加入ospf进程中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>掩码，用于计算ip地址的网络号，1代表网络位，0代表主机位</li><li>通配符，含义和功能与掩码完全无关，0代表严格匹配，1代表无需匹配，且0和1可以连续也可以不连续</li><li>反掩码，特殊的通配符，0代表严格匹配，1代表无需匹配，且0和1是连续的</li></ul>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 掩码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 12-ACL</title>
      <link href="/2022-10-09-shu-tong-12-acl.html"/>
      <url>/2022-10-09-shu-tong-12-acl.html</url>
      
        <content type="html"><![CDATA[<h1 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a><center>ACL</center></h1><p>ACL，中文名称是“访问控制列表”，它由一系列规则（即描述报文匹配条件的判断语句）组成。这些条件通常被称为五元组-分别是报文的源地址、目的地址、源端口、目的端口、端口号等。</p><p>访问控制列表ACL（Access Control List）是由一条或多条规则组成的集合。每条规则描述报文匹配条件（报文的源地址、目的地址、端口号等）的判断语句，设备基于这些规则进行报文匹配，可以过滤出特定的报文</p><p>ACL配置完成后，必须应用在业务模块中才能生效，设备根据应用ACL的业务模块的处理策略来允许或阻止该报文通过。</p><p><strong>为什么需要ACL？</strong></p><p>根据规则过滤的ACL，能够做到阻塞攻击报文、为不同类报文流提供差分服务、对Telnet登录/FTP文件下载进行控制等的功能，从而提高网络环境的安全性和网络传输的可靠性。</p><p><strong>ACL是怎么工作的？</strong></p><p>ACL工作主要是根据规则进行，ACL规则里包括他的规则编号（顺序），动作（允许或者拒绝）规则匹配的地址段（源/源-目的）生效时间段</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d5182025bf602e2ff53e7d21bb980f80.png"></p><h2 id="ACL分类"><a href="#ACL分类" class="headerlink" title="ACL分类"></a>ACL分类</h2><p>基于<strong>ACL规则定义方式</strong>的划分，可分为：</p><p>基本ACL、高级ACL、二层ACL、用户自定义ACL和用户ACL。</p><p>基于<strong>ACL标识方法</strong>的划分，则可分为：</p><p>数字型ACL和命名型ACL。</p><p>注意：用户在创建ACL时可以为其指定编号，不同的编号对应不同类型的ACL。同时，为了便于记忆和识别，用户还可以创建命名型ACL，即在创建ACL时为其设置名称。命名型ACL，也可以是“名称 数字”的形式，即在定义命名型ACL时，同时指定ACL编号。如果不指定编号，系统则会自动为其分配一个数字型ACL的编号。</p><p>通过名称代替编号来定义ACL，就像用域名代替IP地址一样，可以方便记忆，也让大家更容易识别此ACL的使用目的。</p><p><img src="https://pic3.zhimg.com/80/v2-3ac1a46b28786f1b7daf32e26b607a3a_720w.webp" alt="img"></p><p><strong>基本ACL：</strong></p><p>主要针对IP报文的源IP地址进行匹配，基本ACL的编号范围是2000-2999。</p><p>比如这个例子，创建的是acl 2000，就意味着创建的是基本ACL。</p><p><strong>高级ACL：</strong></p><p>可以根据IP报文中的源IP地址、目的IP地址、协议类型，TCP或UDP的源目端口号等元素进行匹配，可以理解为：基本ACL是高级ACL的一个子集，高级ACL可以比基本ACL定义出更精确、更复杂、更灵活的规则。</p><p><strong>ACL</strong></p><p>一条ACL可以由多条“deny或permit”语句组成，每一条语句描述一条规则，这些规则可能存在包含关系，也可能有重复或矛盾的地方，因此ACL的匹配顺序是十分重要的。</p><p>华为设备支持两种匹配顺序：自动排序（auto模式）和配置顺序（config模式）。缺省的ACL匹配顺序是config模式。</p><p>自动排序，是指系统使用“深度优先”的原则，将规则按照精确度从高到低进行排序，并按照精确度从高到低的顺序进行报文匹配。——这个比较复杂，这里就不具体展开了，感兴趣的同学可以课后查看资料。</p><p>配置顺序，系统按照ACL规则编号从小到大的顺序进行报文匹配，规则编号越小越容易被匹配。——这个就是我们前面提到的匹配顺序。</p><p>如果后面又添加了一条规则，则这条规则会被加入到相应的位置，报文仍然会按照从小到大的顺序进行匹配。</p><p>匹配结果：（如图所示，以192.168.1.3/24为例）</p><p>首先理解ACL 2000的含义：</p><p>rule 1：允许源IP地址为192.168.1.1的报文</p><p>rule 2：允许源IP地址为192.168.1.2的报文</p><p>rule 3：允许源IP地址为192.168.1.2的报文</p><p>rule 4：拒绝其他所有IP地址的报文</p><p><strong>ACL配置思路</strong></p><p>基本acl：只能匹配数据的源IP地址</p><p>高级ACL：匹配五元组信息<br>接口：接收到数据：入接口／入方向——＞inbound<br>接口：发送该数据：出接口／出方向——＞outbound</p><p>未来想要acl生效，必须在某个接口下将其<strong>挂接</strong>。</p><pre class="line-numbers language-none"><code class="language-none">acl配置思路：1．定义acl匹配的参数2．定义匹配参数的动作3．将acl挂接到某个接口下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>ACL 参数：</p><p>1．rule—id：规则的编号——＞如果不配置，默认5，并且会以5递增．．．</p><p>2．通配符掩码—反掩码（暂时）</p><p>255.255.255.0=255.255.255.255-255.255.255.0=0.0.0.255</p><p>如果为0，在抓取数据时，必须匹配。如果为1，在抓取数据时，无需匹配。</p><ul><li>华为：acl接口下调用时，默认会有一条命令 permit any——只要没拒绝，就是能通的</li><li>思科：acl接口下调用时，默认会有一条命令 denyany——只要没允许 就是不通的</li></ul><p>3.<font color="red"> <strong>一个接口的同一方向无法挂接多个ACL，但不同方向可以挂接</strong></font></p><h2 id="ACL的匹配机制"><a href="#ACL的匹配机制" class="headerlink" title="ACL的匹配机制"></a>ACL的匹配机制</h2><p><img src="https://img-blog.csdnimg.cn/36c44ffa57a443a28cc86d52ec37aa50.png"></p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p><img src="https://pic4.zhimg.com/80/v2-06d630df5a176a5029a7e4648758e107_720w.webp" alt="img"></p><p><strong>配置需求：</strong></p><p>在Router上部署基本ACL后，ACL将试图穿越Router的源地址为192.168.1.0/24网段的数据包过滤掉，并放行其他流量，从而禁止192.168.1.0/24网段的用户访问Router右侧的服务器网络。</p><p>在Router上创建基本ACL，禁止192.168.1.0/24网段访问服务器网络：</p><p>[Router] acl 2000</p><p>[Router-acl-basic-2000] rule deny source 192.168.1.0 0.0.0.255</p><p>[Router-acl-basic-2000] rule permit source any</p><p>由于从接口GE0/0/1进入Router，所以在接口GE0/0/1的入方向配置流量过滤：</p><p>[Router] interface GigabitEthernet 0/0/1</p><p>[Router-GigabitEthernet0/0/1] traffic-filter inbound acl 2000</p><p>[Router-GigabitEthernet0/0/1] quit</p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 00-小知识点</title>
      <link href="/2022-10-09-shu-tong-00-xiao-zhi-shi-dian.html"/>
      <url>/2022-10-09-shu-tong-00-xiao-zhi-shi-dian.html</url>
      
        <content type="html"><![CDATA[<p>作为网络工程师在组建网络初，需要购买公网IP和宽带</p><p>一般100人对应一个公网IP</p><p>经济化组网，以太网使用光纤    便宜</p><h3 id="802-3和802-11"><a href="#802-3和802-11" class="headerlink" title="802.3和802.11"></a>802.3和802.11</h3><p>802.3：以太网</p><p>802.11（abcd…）：无线网</p><h3 id="ICT"><a href="#ICT" class="headerlink" title="ICT"></a>ICT</h3><p>ICT=IT+CT</p><p>IT（information technology） 信息技术——PC、服务器属于IT</p><p>CT（communication technology）通信技术——网络互联属于CT</p><h3 id="五元组"><a href="#五元组" class="headerlink" title="五元组"></a>五元组</h3><p>五元组是通信术语。通常是指源IP地址，源端口，目的IP地址，目的端口和传输层协议</p><h3 id="掩码、通配符掩码、反掩码"><a href="#掩码、通配符掩码、反掩码" class="headerlink" title="掩码、通配符掩码、反掩码"></a>掩码、通配符掩码、反掩码</h3><ul><li>掩码，用于计算ip地址的网络号，1代表网络位，0代表主机位</li><li>通配符，含义和功能与掩码完全无关，0代表严格匹配，1代表无需匹配，且0和1可以连续也可以不连续</li><li>反掩码，特殊的通配符，0代表严格匹配，1代表无需匹配，且0和1是连续的</li></ul><h3 id="特殊地址"><a href="#特殊地址" class="headerlink" title="特殊地址"></a>特殊地址</h3><ul><li>0.0.0.0</li></ul><p>1.未指定的地址——DHCP发送报文</p><p>2.路由层面：全网所有地址</p><ul><li>127.0.0.0——环回地址   127.0.0.0——127.255.255.255</li></ul><p>用于设备内部的TCP/IP协议栈使用的</p><h3 id="DHCP-Snooping"><a href="#DHCP-Snooping" class="headerlink" title="DHCP-Snooping"></a>DHCP-Snooping</h3><p>当企业网内有dhcp服务器，有员工将一台无线AP接入交换机，那么PC就接收到来自DHCP服务器和无线AP的不同报文，这个时候就需要开启交换机的DHCP-Snooping，将交换机和DHCP Server之间的接口设为信任接口，阻止pc接收到来自AP的DHCP报文</p><p><strong>注意：snooping技术只能基于二层接口开启，三层接口不行</strong></p><p><img src="https://img-blog.csdnimg.cn/dd5430581b3f470781b04e42ff54b49c.png"></p><h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><p><img src="https://img-blog.csdnimg.cn/2e7529289d9c48af8dac320f0225c849.png"></p><h3 id="IDS、IPS、DDOS、CSRF、XSS"><a href="#IDS、IPS、DDOS、CSRF、XSS" class="headerlink" title="IDS、IPS、DDOS、CSRF、XSS"></a>IDS、IPS、DDOS、CSRF、XSS</h3><p>IDS：入侵检测系统</p><p>IPS：入侵防御系统</p><p>DDOS:拒绝服务攻击</p><p>CSRF：跨站请求伪造</p><p>XSS：跨站脚本攻击</p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp-ACL访问控制列表(二)</title>
      <link href="/2022-10-09-shi-yan-ensp-acl-fang-wen-kong-zhi-lie-biao-er.html"/>
      <url>/2022-10-09-shi-yan-ensp-acl-fang-wen-kong-zhi-lie-biao-er.html</url>
      
        <content type="html"><![CDATA[<h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><p>1.PC1——&gt;无法访问PC3和server 1</p><p>2.Client1——&gt;无法访问Server -icmp服务（Ping不通），但是可以访问其他服务</p><h4 id="ACL步骤："><a href="#ACL步骤：" class="headerlink" title="ACL步骤："></a>ACL步骤：</h4><p>1.创建一个访问控制规则</p><p>2.调用这个规则</p><h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><img src="https://img-blog.csdnimg.cn/11329296c4a2481ca0426286e87aba73.png"></p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a><strong>实验步骤</strong></h3><p>1.按照拓扑搭建实验环境，为PC配置好IP地址，单区域OSPF（ospf1 area 0）实现各设备之间互通。</p><table><thead><tr><th>PC1</th><th>192.168.1.100/24</th><th>192.168.1.1（AR1—g0/0/1）</th></tr></thead><tbody><tr><td>Client1</td><td>192.168.1.200/24</td><td>192.168.1.1（AR1—g0/0/1）</td></tr><tr><td>PC2</td><td>192.168.3.100/24</td><td>192.168.3.1（AR3—g0/0/1）</td></tr><tr><td>Server1</td><td>192.168.4.100/24</td><td>192.168.4.1（AR4—g0/0/1）</td></tr></tbody></table><p>2.在AR2上创建ACL规则1，PC1——&gt;无法访问PC3和server 1</p><pre class="line-numbers language-none"><code class="language-none">[R2]acl 2000[R2-acl-basic-2000]rule deny source 192.168.1.100 0.0.0.0[R2-acl-basic-2000]dis th[V200R003C00]#acl number 2000   rule 5 deny source 192.168.1.100 0 #return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.尝试用PC1区访问PC3、server1.可以看见网络还是通的，原因是acl 2000还没有<strong>挂接</strong></p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 192.168.4.100Ping 192.168.4.100: 32 data bytes, Press Ctrl_C to breakFrom 192.168.4.100: bytes=32 seq=1 ttl=252 time=62 msFrom 192.168.4.100: bytes=32 seq=2 ttl=252 time=47 msFrom 192.168.4.100: bytes=32 seq=3 ttl=252 time=63 msFrom 192.168.4.100: bytes=32 seq=4 ttl=252 time=31 msFrom 192.168.4.100: bytes=32 seq=5 ttl=252 time=31 ms--- 192.168.4.100 ping statistics ---  5 packet(s) transmitted  5 packet(s) received  0.00% packet loss  round-trip min/avg/max = 31/46/63 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.在AR2的入接口上挂接acl 2000</p><pre class="line-numbers language-none"><code class="language-none">[R2-acl-basic-2000]int g0/0/0[R2-GigabitEthernet0/0/0]traffic-filter inbound acl 2000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><font color="red"><strong>traffic-filter是流量过滤器的意思</strong></font></p><p>5.再次尝试用PC1区访问PC3、server1.可以看见网络已经不通了</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 192.168.4.100Ping 192.168.4.100: 32 data bytes, Press Ctrl_C to breakRequest timeout!Request timeout!Request timeout!Request timeout!Request timeout!--- 192.168.4.100 ping statistics ---  5 packet(s) transmitted  0 packet(s) received  100.00% packet loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.这里虽然不通，但数据是已经传到AR2；使用dis acl all查看</p><pre class="line-numbers language-none"><code class="language-none">[R2]dis acl all Total quantity of nonempty ACL number is 1 Basic ACL 2000, 1 ruleAcl's step is 5 rule 5 deny source 192.168.1.100 0 (5 matches)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到有5条数据被拦截</p><p>6.在Server 1上启动Http服务，选择文件（这里以桌面上的电子书为例），点击启动按钮，打开服务</p><p><img src="https://img-blog.csdnimg.cn/ecd7ba801aa84a3d88daf7f71aa737fb.png"></p><p>7.在Client上尝试访问Server1 ，选择客户端信息——&gt;HttpClient——&gt;输入server1的ip192.168.4.100——&gt;点击获取，可以看到成功获取到server上的内容，且出现保存弹窗。</p><p><img src="https://img-blog.csdnimg.cn/266a0894eb954401a228d743202247ca.png"></p><p>8.使用Client去Ping Server，同样可以Ping通</p><p><img src="https://img-blog.csdnimg.cn/6e5f2290f5704d1badc183c72f711b11.png"></p><p>9.创建acl规则，Client1——&gt;无法访问Server -icmp服务（Ping不通），但是可以访问其他服务。</p><p><strong>思路</strong></p><pre class="line-numbers language-none"><code class="language-none">拒绝ICMP      拒绝 源地址 192.168.1.200————&gt;192.168.4.100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：高级ACL在规则创建时需要先写协议类型，之后才是源和目的ip。比如这里需要阻止 icmp协议，就可以在deny后跟上1或者icmp。</p><pre class="line-numbers language-none"><code class="language-none">[R2-acl-adv-3999]rule deny ?  &lt;1-255&gt;  Protocol number  gre      GRE tunneling(47)  icmp     Internet Control Message Protocol(1)  igmp     Internet Group Management Protocol(2)  ip       Any IP protocol  ipinip   IP in IP tunneling(4)  ospf     OSPF routing protocol(89)  tcp      Transmission Control Protocol (6)  udp      User Datagram Protocol (17)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[R2]acl 3999[R2-acl-adv-3999]rule deny 1 source 192.168.1.200 0 destination 192.168.4.100 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><font color="red">10.将acl 3999挂接到AR2的g0/0/0的inbound口,可以看到报错了。这是因为一个设备下的一个接口的同一方向（inbound|outbound）只能挂接一个acl。一个acl下可以有多条规则</font></p><pre class="line-numbers language-none"><code class="language-none">[R2-GigabitEthernet0/0/0]traffic-filter inbound acl 3999Error: A simplified ACL has been applied in this view.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>11.这里可以将之前配置的acl 2000 undo，在acl 3999上配置第二条规则来满足要求一。</p><p>也可以在Ar2的outbound接口上挂接acl 3999.其他路由器接口也可以</p><pre class="line-numbers language-none"><code class="language-none">[R2-GigabitEthernet0/0/0]undo traffic-filter inbound [R2-GigabitEthernet0/0/0]traffic-filter inbound acl 3999<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>12.现在使用Client去Ping Server，不可以Ping通</p><p><img src="https://img-blog.csdnimg.cn/d8ac61ea3bfa423c950da616cc783c76.png"></p><p>13.在Client上尝试访问Server1 ，选择客户端信息——&gt;HttpClient——&gt;输入server1的ip192.168.4.100——&gt;点击获取，可以看到依旧成功获取到server上的内容，且出现保存弹窗。</p><p><img src="https://img-blog.csdnimg.cn/266a0894eb954401a228d743202247ca.png"></p><p>14.思考一下，现在从Server1可以Ping通Client1吗？显然是不可以的</p><p><img src="https://img-blog.csdnimg.cn/1d457d6c452b48c5a2e1188547846f81.png"></p><p>15.那么要如何实现，在Client1无法ping通Server1的同时，Server1却可以Ping通Client1呢</p><p>这里就要我们了解ICMP-Echo/Echo reply。</p><pre class="line-numbers language-none"><code class="language-none">[R2-acl-adv-3999]rule deny 1 source 192.168.1.200 0 destination 192.168.4.100 0 icmp-type echo//这条命令的意思就是阻止源ip为1.200的数据包进行echo-request请求，但是可以接收echo reply回复//从而实现了在Client1无法ping通Server1的同时，Server1却可以Ping通Client1[R2-acl-adv-3999]q[R2]int g0/0/0[R2-GigabitEthernet0/0/0]dis th[V200R003C00]#interface GigabitEthernet0/0/0 ip address 12.1.1.2 255.255.255.0  traffic-filter inbound acl 3999#return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/e415b0d9293a41129c8f0252184a5156.png"></p><p><img src="https://img-blog.csdnimg.cn/56a860e9fdbc4c64a9f96dbcb3c68b77.png"></p>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp-二层链路聚合配置</title>
      <link href="/2022-10-09-shi-yan-ensp-er-ceng-lian-lu-ju-he-pei-zhi.html"/>
      <url>/2022-10-09-shi-yan-ensp-er-ceng-lian-lu-ju-he-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<h1 id="二层链路聚合配置"><a href="#二层链路聚合配置" class="headerlink" title="二层链路聚合配置"></a><center>二层链路聚合配置</center></h1><h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><img src="https://img-blog.csdnimg.cn/e28b867e87814aba899979ad66353bf0.png"></p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>1.创建逻辑链路接口</p><pre class="line-numbers language-none"><code class="language-none">[S1]interface Eth-Trunk 1//创建逻辑链路接口[S1-Eth-Trunk1]mode manual load-balance //设置接口为手工模式（默认开启）[S1-Eth-Trunk1]dis th#interface Eth-Trunk1//看不见第二条命令，因为第二条命令是华为设备默认的#return[S1-Eth-Trunk1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.将需要聚合的<strong>成员接口</strong>加入逻辑接口Eth-trunk 1中</p><pre class="line-numbers language-none"><code class="language-none">[S1-Eth-Trunk1]trunkport Ethernet 0/0/1 to 0/0/2Info: This operation may take a few seconds. Please wait for a moment...done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.使用display eth-trunk 1命令去查看配置</p><pre class="line-numbers language-none"><code class="language-none">[S1-Eth-Trunk1]dis eth-trunk 1Eth-Trunk1's state information is:WorkingMode: NORMAL         Hash arithmetic: According to SIP-XOR-DIP         Least Active-linknumber: 1  Max Bandwidth-affected-linknumber: 8              Operate status: up          Number Of Up Port In Trunk: 2                     --------------------------------------------------------------------------------PortName                      Status      Weight Ethernet0/0/1                 Up          1      Ethernet0/0/2                 Up          1  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看见接口状态已经是up（Operate status: up）</p><p>4.使用display interface Eth-Trunk 1命令仔细查看聚合接口信息</p><pre class="line-numbers language-none"><code class="language-none">[S1-Eth-Trunk1]display interface Eth-Trunk 1Eth-Trunk1 current state : UPLine protocol current state : UPDescription:Switch Port, PVID :    1, Hash arithmetic : According to SIP-XOR-DIP,Maximal BW: 200M, Current BW: 200M, The Maximum Frame Length is 9216IP Sending Frames' Format is PKTFMT_ETHNT_2, Hardware address is 4c1f-cc80-6035Current system time: 2022-10-09 12:44:59-08:00    Input bandwidth utilization  :    0%    Output bandwidth utilization :    0%-----------------------------------------------------PortName                      Status      Weight-----------------------------------------------------Ethernet0/0/1                 UP          1Ethernet0/0/2                 UP          1-----------------------------------------------------The Number of Ports in Trunk : 2The Number of UP Ports in Trunk : 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要查看内容，可以看到最大带宽和当前带宽都是200M。这是因为两条成员链路都是100M</p><p><strong>注意：在LACP中备份链路也包括在计算当中</strong></p><pre class="line-numbers language-none"><code class="language-none">Maximal BW:最大带宽Current BW:当前带宽<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.尝试shutdown其中一条接口,再查看Eth-trunk 1。可以看到Maximal BW: 200M, Current BW: 100M。</p><p>这样代表这这条链路理论上可以转发200M是数据，实际上只可以转发100M。需要另一条shutdown的链路重新up才可以实现最大的带宽</p><pre class="line-numbers language-none"><code class="language-none">[S1-Ethernet0/0/1]shutdown [S1-Ethernet0/0/1]q[S1]int Eth-Trunk 1[S1-Eth-Trunk1]dis int Eth-Trunk 1Eth-Trunk1 current state : UPLine protocol current state : UPDescription:Switch Port, PVID :    1, Hash arithmetic : According to SIP-XOR-DIP,Maximal BW: 200M, Current BW: 100M, The Maximum Frame Length is 9216IP Sending Frames' Format is PKTFMT_ETHNT_2, Hardware address is 4c1f-cc80-6035Current system time: 2022-10-09 12:51:20-08:00    Input bandwidth utilization  :    0%    Output bandwidth utilization :    0%-----------------------------------------------------PortName                      Status      Weight-----------------------------------------------------Ethernet0/0/1                 DOWN        1Ethernet0/0/2                 UP          1-----------------------------------------------------The Number of Ports in Trunk : 2The Number of UP Ports in Trunk : 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.重新打开e0/0/1，再查看eth-trunk1</p><pre class="line-numbers language-none"><code class="language-none">[S1-Eth-Trunk1]int e0/0/1[S1-Ethernet0/0/1]undo shutdown [S1-Ethernet0/0/1]q[S1]int Eth-Trunk 1[S1-Eth-Trunk1]dis int Eth-Trunk 1Eth-Trunk1 current state : UPLine protocol current state : UPDescription:Switch Port, PVID :    1, Hash arithmetic : According to SIP-XOR-DIP,Maximal BW: 200M, Current BW: 200M, The Maximum Frame Length is 9216IP Sending Frames' Format is PKTFMT_ETHNT_2, Hardware address is 4c1f-cc80-6035Current system time: 2022-10-09 12:56:03-08:00    Input bandwidth utilization  :    0%    Output bandwidth utilization :    0%-----------------------------------------------------PortName                      Status      Weight-----------------------------------------------------Ethernet0/0/1                 UP          1Ethernet0/0/2                 UP          1-----------------------------------------------------The Number of Ports in Trunk : 2The Number of UP Ports in Trunk : 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二层链路聚合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 11-链路聚合</title>
      <link href="/2022-10-03-shu-tong-11-lian-lu-ju-he.html"/>
      <url>/2022-10-03-shu-tong-11-lian-lu-ju-he.html</url>
      
        <content type="html"><![CDATA[<h1 id="链路聚合"><a href="#链路聚合" class="headerlink" title="链路聚合"></a><center>链路聚合</center></h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>生成树——&gt;多根链路：最大的问题—线路会被阻塞掉<br>链路聚合是运行在STP之上——＞多根链路＝不阻塞</p><p>链路聚合 （端口聚合 链路捆绑）：<br>多根链路逻辑上的捆绑在一起，当STP进行拓扑计算时，此时会按照聚合之后的链路计算。</p><p><img src="https://img-blog.csdnimg.cn/bcc178867d184429a179aadcf8bd379c.png"></p><h3 id="链路聚合的特点"><a href="#链路聚合的特点" class="headerlink" title="链路聚合的特点"></a>链路聚合的特点</h3><p>1.提升带宽</p><p>2.提高网络的高可用性——当链路聚合的线路中有一条出现问题，能快速的切换到其他线路，不影响网络业务使用</p><p>3.负载分担——链路聚合只可以<strong>逐流</strong>进行负载分担，路由器可以<strong>逐包</strong>也可以逐流</p><p>注意：在HCIA阶段所学习的链路聚合属于原生的链路聚合，也就是<strong>点对点的两个设备之间聚合</strong>；后期在IP和IE阶段会学习<strong>跨设备的链路聚合</strong>，进行更深入的学习。 </p><img src="https://img-blog.csdnimg.cn/cc8ca03d333d4bcaa550a68f5e4b53be.png" style="zoom:50%;"><h3 id="链路聚合模式"><a href="#链路聚合模式" class="headerlink" title="链路聚合模式"></a>链路聚合模式</h3><img src="https://img-blog.csdnimg.cn/e38873b42d25413486543acff98235af.png" style="zoom:67%;"><p>手工负载分担模式是华为设备独有的，也是默认的链路聚合模式（只支持点对点的设备）；LACP模式是公有模式（可以支持跨设备的设备进行链路聚合——<strong>E-trunk</strong>）。</p><pre class="line-numbers language-none"><code class="language-none">E-trunk是一种实现跨设备链路聚合的机制，基于LACP进行了扩展；能够实现多台设备间的链路聚合，从而把链路可靠性从单板级提高到了设备级<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>手工负载分担模式下所有活动接口都参与数据的转发，分担负载流量（也就是说只要接口是up的就会向外发数据，不管线路连接是否正确）。</p></li><li><p>LACP模式支持链路备份（和手动模式不同，LACP支持检查错连，一旦发现线路错误那该线路不会发送数据，接口会直接断开）。</p><img src="https://img-blog.csdnimg.cn/8e195929c870464cb83221bba683ed8a.png" style="zoom: 67%;"></li></ul><p><font color="red"><strong>注意：华为设备一般在和其他厂商思科、锐捷的设备连接时会用到LACP来配置链路聚合，同是华为设备时一般的都用华为独有的手工模式，跟运营商互联的时候也用LACP。</strong></font></p><h3 id="数据流控制"><a href="#数据流控制" class="headerlink" title="数据流控制"></a>数据流控制</h3><img src="https://img-blog.csdnimg.cn/5a38e5c83cbb4b7aa5438738dc2230ed.png" style="zoom: 67%;"><p>Eth-Trunk链路两端相连的物理接口的数量、速率、双工方式、流控方式必须一致。</p><h3 id="二层链路聚合配置"><a href="#二层链路聚合配置" class="headerlink" title="二层链路聚合配置"></a>二层链路聚合配置</h3><p><img src="https://img-blog.csdnimg.cn/933e400fab4448a394192b201729d8e2.png"></p><h3 id="三层链路聚合配置"><a href="#三层链路聚合配置" class="headerlink" title="三层链路聚合配置"></a>三层链路聚合配置</h3><p><img src="https://img-blog.csdnimg.cn/1e808b69f7e6404aa896a80db132e8d7.png"></p><pre class="line-numbers language-none"><code class="language-none">[RTA]interface eth-trunk 1 //创建逻辑聚合接口[RTA-Eth-Trunk1Jundo portswitch//portswitch将接口变成二层口，undo portswitch将接口变成三层口。[RTA-Eth-Trunk1]ip address 100.1.1.1 24 //创建逻辑地址[RTA-Eth-Trunk1]quit[RTA]interface GigabitEthernet 0/0/1 //将需要聚合的接口放入创建的th-trunk口[RTA-GigabitEthernet0/0/1]eth-trunk 1 [RTA-GigabitEthernet0/0/1]quit[RTA]Jinterface GigabitEthernet0/0/2 [RTA-GigabitEthernet0/0/2]eth-trunk 1 [RTA-GigabitEthernet0/0/2]quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链路聚合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 10-VBST&amp;MSTP</title>
      <link href="/2022-10-03-shu-tong-10-vbst-mstp.html"/>
      <url>/2022-10-03-shu-tong-10-vbst-mstp.html</url>
      
        <content type="html"><![CDATA[<h1 id="VBST-amp-MSTP"><a href="#VBST-amp-MSTP" class="headerlink" title="VBST&amp;MSTP"></a><center>VBST&amp;MSTP</center></h1><p><font color="blue"><strong>本篇内容在HCIA阶段不要求掌握，只作了解即可。后期HCIP阶段会详细学习</strong></font></p><h2 id="STP-RSTP的缺陷：所有的vlan共享一颗生成树"><a href="#STP-RSTP的缺陷：所有的vlan共享一颗生成树" class="headerlink" title="STP/RSTP的缺陷：所有的vlan共享一颗生成树"></a>STP/RSTP的缺陷：所有的vlan共享一颗生成树</h2><ul><li>RSTP在STP基础上进行了改进，实现了网络拓扑快速收敛。</li><li>但RSTP和STP还存在同一个缺陷：由于局域网内所有的VLAN共享一棵生成树，因此无法在VLAN间实现数据流量的负载均衡，链路被阻塞后将不承载任何流量，还有可能造成部分VLAN的报文无法转发。</li></ul><p><img src="https://img-blog.csdnimg.cn/35418cbe4fe4472a8b0f1fc354c7c1a4.png"></p><h2 id="VBST：基于VLAN的生成树"><a href="#VBST：基于VLAN的生成树" class="headerlink" title="VBST：基于VLAN的生成树"></a>VBST：基于VLAN的生成树</h2><ul><li>华为公司提出了VBST（VLAN—Based Spanning Tree）生成树解决方案。该解决方案中，生成树的形成是基于VLAN的，不同VLAN间可形成相互独立的生成树，不同VLAN内的流量沿着各自的生成树转发，进而可实现流量的负载分担。</li></ul><p><img src="https://img-blog.csdnimg.cn/5f062c5986204d7ca589e2c78b3a4ba2.png"></p><h2 id="MSTP：多生成树"><a href="#MSTP：多生成树" class="headerlink" title="MSTP：多生成树"></a>MSTP：多生成树</h2><ul><li>为了弥补STP和RSTP的缺陷，IEEE于2002年发布的802.1s标准定义了MSTP。</li><li>MSTP兼容STP和RSTP，既可以快速收敛，又提供了数据转发的多个冗余路径，在数据转发过程中实现VLAN数据的负载均衡。</li></ul><p><img src="https://img-blog.csdnimg.cn/1133309aed0b41c3ade075554b2886c8.png"></p><h2 id="堆叠与园区网络树形结构组网状态"><a href="#堆叠与园区网络树形结构组网状态" class="headerlink" title="堆叠与园区网络树形结构组网状态"></a>堆叠与园区网络树形结构组网状态</h2><p><img src="https://img-blog.csdnimg.cn/c17379dff0aa4c1cb81fc5daa2721cf1.png"></p><h2 id="Smart-Link"><a href="#Smart-Link" class="headerlink" title="Smart Link"></a>Smart Link</h2><p><img src="https://img-blog.csdnimg.cn/5b7c2d7ebe094029bc6f5bbba489c0cb.png"></p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VBST&amp;MSTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 09-RSTP</title>
      <link href="/2022-10-02-shu-tong-09-rstp.html"/>
      <url>/2022-10-02-shu-tong-09-rstp.html</url>
      
        <content type="html"><![CDATA[<h1 id="RSTP"><a href="#RSTP" class="headerlink" title="RSTP"></a><center>RSTP</center></h1><p>​        STP协议虽然能够解决环路问题，但是收敛速度慢，影响了用户通信质量。IEEE于2001年发布的802.1w标准定义了快速生成树协议RSTP（Rapid Spanning-Tree Protocol），RSTP在STP基础上进行了改进，实现了网络拓扑快速收敛。</p><h2 id="RSTP相关概念"><a href="#RSTP相关概念" class="headerlink" title="RSTP相关概念"></a>RSTP相关概念</h2><h2 id="backup、alternate端口"><a href="#backup、alternate端口" class="headerlink" title="backup、alternate端口"></a>backup、alternate端口</h2><p>如图所示，RSTP的端口角色共有4种：根端口、指定端口、Alternate端口和Backup端口，与STP相比，新增加了Backup和Alternate 2种端口角色。</p><p><img src="https://img-blog.csdnimg.cn/84c1c39aecdf4d62a868c5cf7791daac.png"></p><table><thead><tr><th>角色</th><th>描述</th></tr></thead><tbody><tr><td>Backup（备份端口）</td><td><strong>Backup端口</strong>作为<strong>指定端口</strong>的备份，提供了另外一条从根桥到非根桥的备份链路。</td></tr><tr><td>Alternate（预备端口）</td><td><strong>Alternate端口</strong>作为<strong>根端口</strong>的备份端口，提供了从指定桥到根桥的另一条备份路径。</td></tr></tbody></table><p>RSTP选举原理和STP类似：选举根交换机-选举非根交换机上的根端口-选举指定端口-选举预备端口和备份端口。</p><h3 id="边缘端口"><a href="#边缘端口" class="headerlink" title="边缘端口"></a>边缘端口</h3><p><img src="https://img-blog.csdnimg.cn/bfb434697d4f4712bbcdcea04e972c54.png"></p><h3 id="端口状态"><a href="#端口状态" class="headerlink" title="端口状态"></a>端口状态</h3><p>不同于STP的5种端口状态，RSTP将端口状态缩减为3种。</p><table><thead><tr><th><strong>STP</strong></th><th><strong>RSTP</strong></th><th><strong>端口角色</strong></th><th><strong>数据转发情况</strong></th></tr></thead><tbody><tr><td>Disabled</td><td>Discarding</td><td>Disable</td><td>不转发用户流量也不学习MAC地址</td></tr><tr><td>Blocking</td><td>Discarding</td><td>Alternate端口、Backup端口</td><td>不转发用户流量也不学习MAC地址</td></tr><tr><td>Listening</td><td>Discarding</td><td>根端口、指定端口</td><td>不转发用户流量也不学习MAC地址</td></tr><tr><td>Learning</td><td>Learning</td><td>根端口、指定端口</td><td>不转发用户流量，但是学习MAC地址</td></tr><tr><td>Forwarding</td><td>Forwarding</td><td>根端口、指定端口</td><td>既转发用户流量又学习MAC地址</td></tr></tbody></table><h2 id="RST-BPDU"><a href="#RST-BPDU" class="headerlink" title="RST BPDU"></a>RST BPDU</h2><p>除了部分参数不同，RST  BPDU报文和STP的BPDU报文类似。</p><ol><li><p>BPDU Type用来区分STP的BPDU报文和RST BPDU报文。</p><ul><li>STP的配置BPDU报文的BPDU Type值为0(0x00)。</li></ul></li></ol><pre><code>- TCN BPDU报文的BPDU Type值为128 (0x80）。- RST BPDU报文的BPDU Type值为2 (0x02)。</code></pre><ol start="2"><li><p>Flags字段，使用了原来保留的中间6位</p><ul><li>STP的BPDU报文的Flags字段中只定义了拓扑变化TC标志和拓扑变化确认TCA标志，其他字段保留。</li></ul></li></ol><ul><li><p>在RST BPDU报文的Flags字段里，除了TC和TCA，还使用了其他字段。包括P/A进程字段和定义端口角色以及端口状态的字段。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/33cb31a9275a79ab500999b70aa5e705.png"></p></li></ul><ol start="3"><li><p>发送BPDU的方式不同</p><ul><li>STP中，当网络拓扑稳定后，根桥按照Hello Timer规定的时间间隔发送配置BPDU报文，非根桥设备只有在收到上游设备发来的配置BPDU报文后，才会触发发出配置BPDU报文。</li></ul></li></ol><pre><code>- RSTP种，当网络拓扑稳定后，无论非根桥设备是否接收到根桥传来的配置BPDU报文，都会按照Hello Timer规定的时间间隔发送配置BPDU。</code></pre><p>​      </p><p>​      </p><h5 id="RSTP对STP改进的5大场景以及相对应的实验请参考大佬的笔记"><a href="#RSTP对STP改进的5大场景以及相对应的实验请参考大佬的笔记" class="headerlink" title="RSTP对STP改进的5大场景以及相对应的实验请参考大佬的笔记"></a><font color="red"><strong>RSTP对STP改进的5大场景以及相对应的实验请参考大佬的笔记</strong></font></h5><p>————————————————<br>本篇笔记大部分取自csdn上阿豪的笔记，感谢大佬精心制作的笔记。<br>原文链接：<a href="https://blog.csdn.net/qq_32044265/article/details/125656277">https://blog.csdn.net/qq_32044265/article/details/125656277</a></p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 08-STP</title>
      <link href="/2022-10-01-shu-tong-08-stp.html"/>
      <url>/2022-10-01-shu-tong-08-stp.html</url>
      
        <content type="html"><![CDATA[<h1 id="STP-生成树"><a href="#STP-生成树" class="headerlink" title="STP 生成树"></a><strong><center>STP 生成树</center></strong></h1><h2 id="技术背景："><a href="#技术背景：" class="headerlink" title="技术背景："></a>技术背景：</h2><p><img src="https://img-blog.csdnimg.cn/5f7508b9a2804b7a96f42abfbc137988.png"></p><p>环路带来的问题：</p><p><img src="https://img-blog.csdnimg.cn/7c72dca549ea440f8f21405517acb616.png"></p><p>生成树协议是在网络中部署生成树后，交换机之间会进行生成树协议报文的交互并进行无环拓扑计算，最终将网络中的某个接口进行堵塞（block）从而打破环路。</p><p><img src="https://img-blog.csdnimg.cn/ecf770f551b248f4b048ecd6fb13049e.png"></p><p>交换机上运行的生成树协议会持续监控网络的拓扑结构，当网络拓扑结构发生变化时，生成树可以感知这些变化，并自动做出调整。因此，生成树既能解决二层环路问题，也能为网络的冗余性提供一种方案。</p><h2 id="二层环路以及三层环路"><a href="#二层环路以及三层环路" class="headerlink" title="二层环路以及三层环路"></a>二层环路以及三层环路</h2><p><img src="https://img-blog.csdnimg.cn/96dc480f6f724481ba4c0259e0b3825b.png"></p><pre class="line-numbers language-none"><code class="language-none">相对于二层环路来说三层环路危害更小，IP报文在经过一定次数的转发TTL值会变为0，该报文就会被丢弃。而二层环路会无休止的复制转发报文，不会丢弃报文。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="生成树协议在园区网络中的应用"><a href="#生成树协议在园区网络中的应用" class="headerlink" title="生成树协议在园区网络中的应用"></a>生成树协议在园区网络中的应用</h2><p><img src="https://img-blog.csdnimg.cn/7032a48bec31423a9255b3a823917fe2.png"></p><h2 id="stp基本概念："><a href="#stp基本概念：" class="headerlink" title="stp基本概念："></a>stp基本概念：</h2><h5 id="1-桥id"><a href="#1-桥id" class="headerlink" title="1.桥id"></a><strong>1.桥id</strong></h5><p>每一台运行stp的交换机都拥有一个唯一的桥id，桥id一共8byte，包含16bit的<font color="red"><strong>桥优先级</strong></font>和48bit的<font color="red"><strong>桥MAC地址</strong></font>，其中桥优先级占据桥id的高16bit，而mac地址占据其余的48bit。</p><h5 id="2-根桥"><a href="#2-根桥" class="headerlink" title="2.根桥"></a>2.根桥</h5><p>STP的主要作用之一是在整个交换网路中计算出一颗无环的“树”，这棵树一旦生成，网络中的无环拓扑也就形成了。对于这棵树而言，树根是非常重要的，树根一旦明确了，“树枝”才能沿着网络拓扑进行延展，STP的根桥就是这棵树的树根，树根的角色至关重要，STP的一系列计算均以树根为参考点。当STP开始工作后，第一件事就是在网络中选举出根桥。在一个交换网络中，根桥只会有一个。<br>网络中拥有最小桥ID的交换机将成为根桥。在比较桥id时，首先比的时桥优先级，桥优先级的值最小的交换机将胜出成为根桥，如果桥优先级相等，那摩MAC地址最 小的交换机将成为根桥。<br>华为交换机缺省的桥优先级为32768.可在系统视图下使用<strong>stp priority</strong>命令修改，<font color="red"><strong>桥优先级</strong></font><strong>的取值范围是0~61440，并且必须为4096的倍数，例如0、4096、8192等</strong>。</p><img src="https://img-blog.csdnimg.cn/3c39e79e1bed4645bf947040439e71ec.png" style="zoom: 50%;"><p><font color="blue">可以使用display stp查看哪台交换机是根桥</font></p><pre class="line-numbers language-none"><code class="language-none">[Huawei]dis stp-------[CIST Global Info][Mode MSTP]-------CIST Bridge         :32768.4c1f-cc8e-09b5Config Times        :Hello 2s MaxAge 20s FwDly 15s MaxHop 20Active Times        :Hello 2s MaxAge 20s FwDly 15s MaxHop 20CIST Root/ERPC      :32768.4c1f-cc8e-09b5 / 0//这里显示的就是根桥的桥ipCIST RegRoot/IRPC   :32768.4c1f-cc8e-09b5 / 0//可以看出本交换机的桥ip和根桥的桥ip一致，说明这台交换机就是根桥CIST RootPortId     :0.0BPDU-Protection     :DisabledTC or TCN received  :2TC count per hello  :0STP Converge Mode   :Normal Time since last TC  :0 days 0h:1m:17sNumber of TC        :2Last TC occurred    :Ethernet0/0/2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="blue">可以使用display int vlan 1查看本交换机的MAC地址</font></p><pre class="line-numbers language-none"><code class="language-none">[Huawei]dis int vlan 1Vlanif1 current state : UPLine protocol current state : DOWNDescription:Route Port,The Maximum Transmit Unit is 1500Internet protocol processing : disabledIP Sending Frames' Format is PKTFMT_ETHNT_2, Hardware address is 4c1f-cc8e-09b5//这里显示的就是桥ipCurrent system time: 2022-10-02 19:44:44-08:00    Input bandwidth utilization  : --    Output bandwidth utilization : --<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-开销（Cost）与根路径开销（Root-Path-Cost，RPC）"><a href="#3-开销（Cost）与根路径开销（Root-Path-Cost，RPC）" class="headerlink" title="3.开销（Cost）与根路径开销（Root Path Cost，RPC）"></a>3.开销（Cost）与根路径开销（Root Path Cost，RPC）</h5><p>每一个激活了STP的接口都维护着一个Cost值，接口的Cost主要用于计算RPC，也就是计算到达根的开销。接口的缺省Cost除了与其速率、工作模式有关，还与交换机使用的Stp Cost计算方法有关。华为的交换产品支持3种计算方法，它们分别是IEEE802.1D-1998标准方法、IEEE802.1t标准方法以及华为私有的计算方法。<br>在交换机的系统视图下使用<strong>stp pathcost-standard</strong>命令，可修改Cost计算方法，该命令有3个可选关键字。</p><pre><code>dot1d-1998：IEEE 802.1D-1998标准方法。dot1t：IEEE802.1t标准方法。legacy：华为计算方法。</code></pre><p><img src="https://img-blog.csdnimg.cn/886964f081574b5b85112a92f43aaae4.png"></p><p><strong>注：当然修改交换机Cost计算方法需要非常谨慎，如果确实需要修改，那么需保证交换网络中所有STP设备使用一致的计算方法。</strong><br>接口Cost是一个非常重要的变量，它将影响STP对于链路的优选。在STP的拓扑计算过程中，一个非常重要的环节就是“丈量”交换机某个接口到根桥的“成本”，我们将这个“成本”称为RPC(Root Path Cost，根路径开销)。</p><h5 id="4-接口id（Port-Identification）"><a href="#4-接口id（Port-Identification）" class="headerlink" title="4.接口id（Port Identification）"></a>4.接口id（Port Identification）</h5><p>运行STP的交换机使用接口ID来标识每个接口，接口id主要用于在特定场景下选举指定接口。接口ID长度为16bit，由两部分组成，其中高4bit是接口优先级，低12bit是接口编号。以华为S5700交换机为例，缺省时接口优先级为128，可在接口视图下使用<strong>stp port priority</strong>命令修改，<strong>端口优先级</strong>的取值范围是0~240，并且必须是16的倍数，例如0、16、32等。</p><h2 id="STP的基本操作过程"><a href="#STP的基本操作过程" class="headerlink" title="STP的基本操作过程"></a>STP的基本操作过程</h2><h4 id="STP通过4个步骤来保证网络中不存在二层环路-STP计算过程-："><a href="#STP通过4个步骤来保证网络中不存在二层环路-STP计算过程-：" class="headerlink" title="STP通过4个步骤来保证网络中不存在二层环路(STP计算过程)："></a>STP通过4个步骤来保证网络中不存在二层环路(STP计算过程)：</h4><pre class="line-numbers language-none"><code class="language-none">1、选出根桥：每个交换机运行了stp，有一个桥id，桥id最小的交换机为根桥2、选出根端口：每个非根桥上，选出1个根端口，收到bpdu最优的端口3、选出指定端口：一个接口，发的bpdu，比收到的bpdu，更优，是指定端口4、阻塞其他端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-在交换机网络中选举一个根桥（Root-Bridge，RB）"><a href="#1-在交换机网络中选举一个根桥（Root-Bridge，RB）" class="headerlink" title="1.在交换机网络中选举一个根桥（Root Bridge，RB）"></a>1.在交换机网络中选举一个根桥（Root Bridge，RB）</h5><p>网络中拥有最小桥ID的交换机将成为根桥。在比较桥id时，首先比的时桥优先级，桥优先级的值最小的交换机将胜出成为根桥，如果桥优先级相等，那摩MAC地址最小的交换机将成为根桥。STP的正常工作依赖于该协议所使用的报文的正常交互，这种报文就是BPDU(Bridge Protocol Data Unit，网桥协议数据单元)。</p><h5 id="2-在每个非根桥上选举一个根接口（Root-Port，RP）"><a href="#2-在每个非根桥上选举一个根接口（Root-Port，RP）" class="headerlink" title="2.在每个非根桥上选举一个根接口（Root Port，RP）"></a>2.在每个非根桥上选举一个根接口（Root Port，RP）</h5><p>在一个交换网络中，除了根桥之外的其他交换机都是非根桥，STP将为每个非根桥选举一个根接口，所谓根接口，实际上是非根桥上所有接口中收到最优BPDU的接口，可以简单地将其理解为交换机在STP树上“朝向”根桥的接口。非根桥可能会有一个或多个接口接入同一个交换网络，STP将会在这些接口中选举并且只会选出一个根接口。在STP收敛完成后，根桥依然会周期性的向网络中发送BPDU，而非根桥则会周期性的在自己的根接口上收到BPDU,并沿着STP树向下游转发。</p><p>使用display stp brief命令可以确定交换机的根接口</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]dis stp brief MSTID  Port                        Role  STP State     Protection   0    Ethernet0/0/1               ROOT  FORWARDING      NONE//root 就是RP   0    Ethernet0/0/2               ALTE  DISCARDING      NONE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-选举指定接口（Designated-Port，DP）"><a href="#3-选举指定接口（Designated-Port，DP）" class="headerlink" title="3.选举指定接口（Designated Port，DP）"></a><strong>3.选举指定接口（Designated Port，DP）</strong></h5><p>STP将在每个网段中选举一个指定接口，这个接口是该网段内所有接口到达根桥的最优接口。此外，指定接口还负责向该网段发送BPDU。<br>对于非根桥而言，其所有接口中收到最优BPDU的接口将成为该设备的根接口，随后该非根桥使用自己接受的最优BPDU，为本设备上的其他接口各计算一个BPDU，然后使用计算出的BPDU与接口上所维护的BPDU（接口自身也会从网络中收到BPDU，并将该BPDU保存起来）进行比较，如果前者更优，那么该接口将成为指定接口，并且其所保存的BPDU也被前者替代，交换机将替代后的BPDU从该指定接口转发给下游交换机；如果后者更优，那么该接口将成为非指定接口（非指定接口指的是既不是根接口，也不是指定接口的接口）。<br>综上所述，对于非根桥而言，根接口的选举过程是非根桥将自己所收到的所有BPDU进行比较，而制定接口的选举过程则是非根桥用自己计算出的BPDU与别的设备发过来的BPDU进行比较。<br>一般而言，根桥的所有接口都是指定接口。</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]dis stp brief MSTID  Port                        Role  STP State     Protection   0    Ethernet0/0/1               DESI  FORWARDING      NONE//DESI就是DP   0    Ethernet0/0/2               DESI  FORWARDING      NONE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-阻塞非指定接口，打破二层环路"><a href="#4-阻塞非指定接口，打破二层环路" class="headerlink" title="4.阻塞非指定接口，打破二层环路"></a>4.阻塞非指定接口，打破二层环路</h5><p>经STP计算后，如果交换机的某个（或某些）接口既不是根接口又不是指定接口（我们将这种接口称为非指定接口），那么该接口将会被STP阻塞，如此一来网络中的二层环路也就被打破了。</p><h2 id="STP报文"><a href="#STP报文" class="headerlink" title="STP报文"></a>STP报文</h2><p>在一个交换网络中，STP能够正常工作的基本前提是BPDU的正常交互。STP的BPDU有两种类型：配置BPDU(Configuration BPDU)及TCN BPDU(Topology Change Notification BPDU)。两种BPDU各有各的用途。BPDU载荷被直接封装在以太网数据帧中，数据帧的目的MAC地址是组播MAC地址：0180-C200-0000。<br><strong>1.配置BPDU</strong><br><strong>配置BPDU是STP进行拓扑计算的关键。</strong>在交换网络的初始化过程中，每台交换机都从自己激活了STP的接口向外发送配置BPDU。当STP收敛完成后，只有根桥才会周期性的发送配置BPDU（缺省时，以2s为周期发送配置BPDU，可以在设备的系统视图下使用stp timer hello命令修改发送周期），而非根桥则会在自己的根接口上收到上游发送过来的配置BPDU，并立即被触发而产生自己的配置BPDU，然后从自己的指定接口发送出去。这一过程看起来就像是根桥发出的配置BPDU逐跳地“经过”了其他的交换机。<br><strong>2.TCN BPDU</strong><br>TCN BPDU的格式非常简单，只有“协议ID”、”协议版本ID”以及”BPDU类型”三个字段，并且“BPDU”字段的值为0x80。TCN BPDU用于在网络拓扑发成变化时向根桥通知变化的发生。<br>对于STP而言，当拓扑发生变更时，远离变更点的交换机无法直接感知到变化的发生，此时它们的MAC地址表项还是老旧的，如果依然通过这些MAC地址表项来指导数据转发，便有可能出现问题。因此STP需要一种机制，用于在网络中发生拓扑变更时促使全网的交换机尽快老化自己的MAC地址表项，以适应新的网络拓扑。当拓扑稳定时，网路中只会出现配置BPDU，而当拓扑发生变更时，STP会使用TCN BPDU，以及两种特殊的配置BPDU。<br><strong>（1）TCN BPDU</strong><br>TCN BPDU用于在网络拓扑发生变化时向根桥通知变化的发生。TCN BPDU需要从发现拓扑变更的交换机传递到根桥，而该交换机与根桥之间可能隔着多台交换机，感知到拓扑变化的交换机会从其根接口发送TCN BPDU，也就是朝着根桥的方向发送TCN BPDU，该报文会一跳一跳的向上游传递，直至抵达根桥。<br><strong>（2）“标志”字段中TCA比特位被设置为1的配置BPDU</strong><br>STP要求TCN BPDU从发现拓扑变更的交换机传递到根桥的过程时可靠的，因此当一台交换机收到下游发送上来的TCN BPDU后，需要使用“标志”字段中TCA比特位被设置为1的配置BPDU回应对方并向自己的上游发送TCN BPDU。这个过程将一直持续，直到根桥收到该TCN BPDU。<br><strong>（3）“标志”字段中TC比特位被设置为1的配置BPDU</strong><br>根桥收到TCN BPDU后，也就意识到了拓扑变化的发生，接下来它要将该变化通知到全网，它将向网络中泛洪“标志”字段中TC比特位被设置为1的配置BPDU，网络中的交换机收到该配置BPDU后，会立即将其MAC地址表的老化时间从原有的值调整为一个较小的值（该值等于转发延迟时间），使MAC地址表能够尽快刷新，以便适应新的网络拓扑。</p><h3 id="配置BPDU的报文格式"><a href="#配置BPDU的报文格式" class="headerlink" title="配置BPDU的报文格式"></a>配置BPDU的报文格式</h3><p><img src="https://img-blog.csdnimg.cn/f7b5ef60527e404a8132af13b951ff50.png"></p><h3 id="配置BPDU的比较原则"><a href="#配置BPDU的比较原则" class="headerlink" title="配置BPDU的比较原则"></a>配置BPDU的比较原则</h3><p><font color="red"><strong>注意：在选取RP和DP时也是采用这一原则</strong></font></p><p><img src="https://img-blog.csdnimg.cn/8c8009bfab57457db68ce9e7e6f50d29.png"></p><h3 id="思考题：识别以下拓扑中的根桥以及各种接口角色"><a href="#思考题：识别以下拓扑中的根桥以及各种接口角色" class="headerlink" title="思考题：识别以下拓扑中的根桥以及各种接口角色"></a>思考题：识别以下拓扑中的根桥以及各种接口角色</h3><p><img src="https://img-blog.csdnimg.cn/5ba050398fb34a8782345413cdf2a1e5.png"></p><pre class="line-numbers language-none"><code class="language-none">1.先判断根桥SW1——网络中拥有最小桥ID的交换机将成为根桥2.再判断根接口SW2-GE0/0/1、SW3-GE0/0/2、SW4-GE0/0/1——每个非根桥选举一个根接口，所谓根接口，实际上是非根桥上所有接口中收到最优BPDU的接口（参照BPDU的比较原则）3.再判断指定接口SW2-GE0/0/2、SW3-GE0/0/1、SW1-GE0/0/1|GE0/0/2——这个接口是该网段内所有接口到达根桥的最优接口。（参照BPDU的比较原则）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="STP的接口状态"><a href="#STP的接口状态" class="headerlink" title="STP的接口状态"></a>STP的接口状态</h3><table><thead><tr><th align="center">状态名称</th><th>状态描述</th></tr></thead><tbody><tr><td align="center">禁用（Disable）</td><td>该接口不能收发BPDU，也不能收发业务数据帧，例如接口为down</td></tr><tr><td align="center">阻塞（Blocking）</td><td>该接口被STP阻塞。处于阻塞状态的接口不能发送BPDU，但是会持续侦听BPDU，而且不能收发业务数据帧，也不会进行MAC地址学习</td></tr><tr><td align="center">侦听（Listening）</td><td>当接口处于该状态时，表明STP初步认定该接口为根接口或指定接口，但接口依然处于STP计算的过程中，此时接口可以收发BPDU，但是不能收发业务数据帧，也不会进行MAC地址学习</td></tr><tr><td align="center">学习（Learning）</td><td>当接口处于该状态时，会侦听业务数据帧（但是不能转发业务数据帧），并且在收到业务数据帧后进行MAC地址学习</td></tr><tr><td align="center">转发（Forwarding）</td><td>处于该状态的接口可以正常地收发业务数据帧，也会进行BPDU处理。接口的角色需是根接口或指定接口才能进入转发状态</td></tr></tbody></table><h2 id="STP的接口状态迁移"><a href="#STP的接口状态迁移" class="headerlink" title="STP的接口状态迁移"></a>STP的接口状态迁移</h2><p><img src="https://img-blog.csdnimg.cn/03e741afadc749b1aca40c5b61e31dd7.png"></p><h2 id="STP的时间参数"><a href="#STP的时间参数" class="headerlink" title="STP的时间参数"></a>STP的时间参数</h2><p><strong>STP定义的三个重要的时间参数。</strong></p><ul><li><strong>Hello Time（Hello时间）</strong>：运行了STP的交换机发送配置BPDU的时间间隔，缺省为2s。如需修改STP发送配置BPDU的时间间隔，那么必须在根桥上修改，修改完成后，所有的非根桥都与根桥对其该时间值。</li><li><strong>Forward Delay（转发延时）</strong>：运行了STP的接口从侦听状态进入学习状态，或者从学习状态进入转发状态的延迟时间，缺省为15s。为了避免在生成树收敛过程中网络接口可能出现临时环路，或者短暂的数据帧泛洪现象，STP定义了侦听及学习这两种接口状态，并要求接口从阻塞状态进入转发状态前必须先经历这两个状态，而且分别在这两个状态各停留一个转发延时时间。这意味着对STP而言，一个被阻塞的接口被选举为根接口或指定接口后，进入转发状态之前至少需要经历30s的时间。</li><li><strong>MAX Age（最大生存时间）</strong>：BPDU的最大生存时间，也被称为BPDU的老化时间，缺省为20s。以非根桥的根接口为例，该设备将在这个接口上保存来自上游的最优BPDU，这个BPDU关联着一个最大生存时间，如果在该BPDU到达最大生存时间之间，接口再一次收到了BPDU，那么其最大生存时间将被重置，而如果接口一直没有收到BPDU从而导致该接口上保存的BPDU到达最大生存时间，那么该BPDU将被老化，此时设备将会重新在接口上选择最优BPDU，也就是重新进行根接口的选举。受限于几个时间参数的设计，一个STP接口要从阻塞状态进入转发状态可能需要花费约30~50s左右的时间，而这段时间内，网络中的业务可能就会受到影响。</li></ul><p>STP的基础配置命令</p><p>1.配置生成树工作模式</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]stp mode {stp|rstp|mstp}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.（可选）配制根桥</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]stp root primary<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.(可选)备份根桥</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]stp root secondary<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.(可选)配置交换机的STP优先级</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]stp priority 优先级取值(32768为缺省情况)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.（可选）配置接口路径开销</p><p>设置接口开销计算方法</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]stp pathcost-standard{dot1d-1998|dot1t|legacy}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置当前路径开销</p><pre class="line-numbers language-none"><code class="language-none">[Huawei-GigabitEthernet0/0/1]stp cost 开销值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.（可选）配置接口优先级</p><pre class="line-numbers language-none"><code class="language-none">[Huawei-intf]stp priority 优先级数（128为缺省情况）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.启用STP/RSTP/MSTP</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]stp enable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp-三层通信过程解析</title>
      <link href="/2022-10-01-shi-yan-ensp-san-ceng-tong-xin-guo-cheng-jie-xi.html"/>
      <url>/2022-10-01-shi-yan-ensp-san-ceng-tong-xin-guo-cheng-jie-xi.html</url>
      
        <content type="html"><![CDATA[<h1 id="三层通信过程解析"><a href="#三层通信过程解析" class="headerlink" title="三层通信过程解析"></a><center>三层通信过程解析</center></h1><h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><img src="https://img-blog.csdnimg.cn/1f197205a6f644359b86a879c2ac23f4.png"></p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a><strong>实验步骤</strong></h3><p>前半部分的步骤和三层交换机实验一致，就是多了一台路由器。</p><p>1.在LSW1上创建vlan30</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]vlan batch 10 20 30[Huawei-Vlanif20]int vlan 30[Huawei-Vlanif30]ip add 192.168.30.2 24[Huawei]int g0/0/2[Huawei-GigabitEthernet0/0/2]port link-type access [Huawei-GigabitEthernet0/0/2]port default vlan 30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在LSW1上ping192.168.30.1</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]ping 192.168.30.1  PING 192.168.30.1: 56  data bytes, press CTRL_C to break    Reply from 192.168.30.1: bytes=56 Sequence=1 ttl=255 time=60 ms    Reply from 192.168.30.1: bytes=56 Sequence=2 ttl=255 time=40 ms    Reply from 192.168.30.1: bytes=56 Sequence=3 ttl=255 time=10 ms    Reply from 192.168.30.1: bytes=56 Sequence=4 ttl=255 time=30 ms    Reply from 192.168.30.1: bytes=56 Sequence=5 ttl=255 time=40 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.PC1上Ping 192.168.30.2</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 192.168.30.2Ping 192.168.30.2: 32 data bytes, Press Ctrl_C to breakFrom 192.168.30.2: bytes=32 seq=1 ttl=255 time=31 msFrom 192.168.30.2: bytes=32 seq=2 ttl=255 time=47 msFrom 192.168.30.2: bytes=32 seq=3 ttl=255 time=31 msFrom 192.168.30.2: bytes=32 seq=4 ttl=255 time=16 msFrom 192.168.30.2: bytes=32 seq=5 ttl=255 time=31 ms--- 192.168.30.2 ping statistics ---  5 packet(s) transmitted  5 packet(s) received  0.00% packet loss  round-trip min/avg/max = 16/31/47 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.但是现在PC1和路由器AR1之间是无法Ping通的，还需要配置静态路由，告诉路由器192.168.10.0 和192.168.20.0需要从哪个接口发出去</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]ip route-static 192.168.10.0 24 192.168.30.2[Huawei]ip route-static 192.168.20.0 24 192.168.30.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.PC去ping 路由器，成功</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 192.168.30.1Ping 192.168.30.1: 32 data bytes, Press Ctrl_C to breakFrom 192.168.30.1: bytes=32 seq=1 ttl=254 time=62 msFrom 192.168.30.1: bytes=32 seq=2 ttl=254 time=63 msFrom 192.168.30.1: bytes=32 seq=3 ttl=254 time=62 msFrom 192.168.30.1: bytes=32 seq=4 ttl=254 time=63 msFrom 192.168.30.1: bytes=32 seq=5 ttl=254 time=62 ms--- 192.168.30.1 ping statistics ---  5 packet(s) transmitted  5 packet(s) received  0.00% packet loss  round-trip min/avg/max = 62/62/63 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 三层通信过程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp-多区域OSPF基本配置</title>
      <link href="/2022-10-01-shi-yan-ensp-duo-qu-yu-ospf-ji-ben-pei-zhi.html"/>
      <url>/2022-10-01-shi-yan-ensp-duo-qu-yu-ospf-ji-ben-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<h1 id="实验ensp-多区域OSPF基本配置"><a href="#实验ensp-多区域OSPF基本配置" class="headerlink" title="实验ensp-多区域OSPF基本配置"></a><center>实验ensp-多区域OSPF基本配置</center></h1><h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><img src="https://img-blog.csdnimg.cn/5324693a2ea5434bacc77e57f4f02326.png"></p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><h4 id="步骤一：搭建实验环境并完成基本配置"><a href="#步骤一：搭建实验环境并完成基本配置" class="headerlink" title="步骤一：搭建实验环境并完成基本配置"></a>步骤一：搭建实验环境并完成基本配置</h4><h4 id="步骤二：OSPF-基本配置"><a href="#步骤二：OSPF-基本配置" class="headerlink" title="步骤二：OSPF 基本配置"></a>步骤二：OSPF 基本配置</h4><p><strong>RTA 的两个接口都属于 OSPF 区域 0，RTB 的两个接口分别属于 OSPF 区域 0 和区域 1，RTC 的两个接口都属于 OSPF 区域 1。依据该区域划分完成基本 OSPF 配置。在 RTA 完成基本 OSPF 配置，并在相关网段使能 OSPF，其完整命令为</strong></p><pre class="line-numbers language-none"><code class="language-none">[RTA]router id 1.1.1.1 [RTA]ospf 1[RTA-ospf-1]area 0.0.0.0[RTA-ospf-1-area-0.0.0.0]network 1.1.1.1 0.0.0.0[RTA-ospf-1-area-0.0.0.0]network 10.0.0.0 0.0.0.255[RTA-ospf-1-area-0.0.0.0]network 20.0.0.0 0.0.0.255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在RTB完成基本OSPF配置，并配置正确的区域以及在相关网段使能 OSPF，其完整命令为：</p><pre class="line-numbers language-none"><code class="language-none">[RTB]router id 2.2.2.2 [RTB]ospf 1[RTB-ospf-1]area 0.0.0.0[RTB-ospf-1-area-0.0.0.0]network 2.2.2.2 0.0.0.0[RTB-ospf-1-area-0.0.0.0]network 20.0.0.0 0.0.0.255 [RTB-ospf-1-area-0.0.0.0]quit[RTB-ospf-1-area]area 1[RTB-ospf-1-area-0.0.0.1]network 30.0.0.0 0.0.0.255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 在 RTC 上完成基本 OSPF 配置，并在相关网段使能 OSPF，其完整命令为：</p><pre class="line-numbers language-none"><code class="language-none">[RTC]router id 3.3.3.3 [RTC]ospf 1[RTC-ospf-1]area 1[RTC-ospf-1-area-0.0.0.1]network 3.3.3.3 0.0.0.0[RTC-ospf-1-area-0.0.0.1]network 10.1.0.0 0.0.0.255[RTC-ospf-1-area-0.0.0.1]network 30.0.0.0 0.0.0.255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="步骤三：检查路由器-OSPF-邻居状态及路由表"><a href="#步骤三：检查路由器-OSPF-邻居状态及路由表" class="headerlink" title="步骤三：检查路由器 OSPF 邻居状态及路由表"></a>步骤三：检查路由器 OSPF 邻居状态及路由表</h4><pre class="line-numbers language-none"><code class="language-none">[Huawei]dis ospf peer  OSPF Process 1 with Router ID 2.2.2.2 Neighbors  Area 0.0.0.0 interface 20.0.0.2(GigabitEthernet0/0/0)'s neighbors Router ID: 1.1.1.1          Address: 20.0.0.1           State: Full  Mode:Nbr is  Slave  Priority: 1   DR: 20.0.0.1  BDR: 20.0.0.2  MTU: 0       Dead timer due in 40  sec    Retrans timer interval: 5    Neighbor is up for 00:02:20        Authentication Sequence: [ 0 ]  Neighbors  Area 0.0.0.1 interface 30.0.0.1(GigabitEthernet0/0/1)'s neighbors Router ID: 3.3.3.3          Address: 30.0.0.2           State: Full  Mode:Nbr is  Master  Priority: 1   DR: 30.0.0.1  BDR: 30.0.0.2  MTU: 0       Dead timer due in 35  sec    Retrans timer interval: 5    Neighbor is up for 00:00:30        Authentication Sequence: [ 0 ] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        在 RTB 上使用**(21)** <strong>display ospf peer</strong>   查看路由器 OSPF 邻居状态，根据输出信息可以得知， 在 Area 0.0.0.0 内，RTB 的 G0/0 接口与 RTA 配置 IP 地址为**(22)**  <strong>20.0.0.1</strong>        的接口建立邻居关系， 该邻居所在的网段为 20.0.0.0/24，RTB 配置 IP 地址为 20.0.0.2 的接口为该网段的**(23)**  <strong>DR</strong>   路由器；在 Area 0.0.0.1 内，RTB 的 G0/1 接口与 RTC 配置 IP 地址为**(24)**  <strong>30.0.01</strong>       的接口建立邻居关系， 该邻居所在的网段为 30.0.0.0/24，RTC 配置IP 地址为 30.0.0.1 的接口为该网段的**(25)**   <strong>DR</strong>  路由器。</p><p>​        在 RTB 上使用**(26)**  <strong>display ospf routing</strong>            命令查看路由器 OSPF 路由表，使用**(27)**   <strong>display ip routing-table</strong>       命令查看路由器全局路由表。</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]dis ospf routing  OSPF Process 1 with Router ID 2.2.2.2  Routing Tables  Routing for Network  Destination        Cost  Type       NextHop         AdvRouter       Area 20.0.0.0/24        1     Transit    20.0.0.2        2.2.2.2         0.0.0.0 30.0.0.0/24        1     Transit    30.0.0.1        2.2.2.2         0.0.0.1 1.1.1.1/32         1     Stub       20.0.0.1        1.1.1.1         0.0.0.0 10.0.0.0/24        2     Stub       20.0.0.1        1.1.1.1         0.0.0.0 10.1.0.0/24        2     Stub       30.0.0.2        3.3.3.3         0.0.0.1 Total Nets: 5   Intra Area: 5  Inter Area: 0  ASE: 0  NSSA: 0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="步骤四：检查网络连通性"><a href="#步骤四：检查网络连通性" class="headerlink" title="步骤四：检查网络连通性"></a>步骤四：检查网络连通性</h4><p>​     在 ClientA 上 ping ClientB(IP 地址为 10.1.0.1)，其结果是**(28)**  <strong>可以</strong>  可以/不可以互通； 在 ClientB 上 ping ClientA(IP 地址为 10.0.0.1)，其结果是**(29)**  <strong>可以</strong>  可以/不可以互通。</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 10.1.0.1Ping 10.1.0.1: 32 data bytes, Press Ctrl_C to breakRequest timeout!From 10.1.0.1: bytes=32 seq=2 ttl=125 time=32 msFrom 10.1.0.1: bytes=32 seq=3 ttl=125 time=31 msFrom 10.1.0.1: bytes=32 seq=4 ttl=125 time=16 msFrom 10.1.0.1: bytes=32 seq=5 ttl=125 time=31 ms--- 10.1.0.1 ping statistics ---  5 packet(s) transmitted  4 packet(s) received  20.00% packet loss  round-trip min/avg/max = 0/27/32 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多区域OSPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp-VLAN-Hybrid的配置</title>
      <link href="/2022-09-29-shi-yan-ensp-vlan-hybrid-de-pei-zhi.html"/>
      <url>/2022-09-29-shi-yan-ensp-vlan-hybrid-de-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<h1 id="VLAN-Hybrid的配置"><a href="#VLAN-Hybrid的配置" class="headerlink" title="VLAN-Hybrid的配置"></a><strong><center>VLAN-Hybrid的配置</center></strong></h1><h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><img src="https://img-blog.csdnimg.cn/f5df266b60f948ee91020507d370013a.png"></p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>步骤一：</p><p>配置PC1、PC2、Server1的IP和<a href="https://so.csdn.net/so/search?q=%E5%AD%90%E7%BD%91&amp;spm=1001.2101.3001.7020">子网</a>掩码</p><table><thead><tr><th align="center">名称</th><th align="center">IP</th><th align="center">子网掩码</th></tr></thead><tbody><tr><td align="center">PC1</td><td align="center">10.1.1.1</td><td align="center">255.255.255.0</td></tr><tr><td align="center">PC2</td><td align="center">20.1.1.1</td><td align="center">255.255.255.0</td></tr><tr><td align="center">server1</td><td align="center">100.1.1.1</td><td align="center">255.255.255.0</td></tr></tbody></table><p> 步骤二：</p><p>划分vlan和配置hybrid接口</p><p><strong>SW1：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;system-view[Huawei]sysname SW1[SW1]vlan batch 10 20 100[SW1]interface Ethernet 0/0/1[SW1-Ethernet0/0/1]port link-type hybrid[SW1-Ethernet0/0/1]port hybrid pvid vlan 10[SW1-Ethernet0/0/1]port hybrid untagged vlan 10 100     计算机是无法识别tag的出去我们不用标记[SW1-Ethernet0/0/1]quit[SW1]interface Ethernet 0/0/2[SW1-Ethernet0/0/2]port link-type hybrid[SW1-Ethernet0/0/2]port hybrid pvid vlan 20[SW1-Ethernet0/0/2]port hybrid untagged vlan 20 100[SW1-Ethernet0/0/2]quit[SW1]interface GigabitEthernet 0/0/1[SW1-GigabitEthernet0/0/1]port link-type hybrid[SW1-GigabitEthernet0/0/1]port hybrid tagged vlan 10 20 100  [SW1-GigabitEthernet0/0/1]quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看vlan</p><p>视图模式下输入命令：display vlan</p><pre class="line-numbers language-none"><code class="language-none">[S1]dis vlanThe total number of vlans is : 4--------------------------------------------------------------------------------U: Up;         D: Down;         TG: Tagged;         UT: Untagged;MP: Vlan-mapping;               ST: Vlan-stacking;#: ProtocolTransparent-vlan;    *: Management-vlan;--------------------------------------------------------------------------------VID  Type    Ports                                                          --------------------------------------------------------------------------------1    common  UT:GE0/0/1(U)      GE0/0/2(U)      GE0/0/3(U)      GE0/0/4(D)                      GE0/0/5(D)      GE0/0/6(D)      GE0/0/7(D)      GE0/0/8(D)                      GE0/0/9(D)      GE0/0/10(D)     GE0/0/11(D)     GE0/0/12(D)                     GE0/0/13(D)     GE0/0/14(D)     GE0/0/15(D)     GE0/0/16(D)                     GE0/0/17(D)     GE0/0/18(D)     GE0/0/19(D)     GE0/0/20(D)                     GE0/0/21(D)     GE0/0/22(D)     GE0/0/23(D)     GE0/0/24(D)     10   common  UT:GE0/0/1(U)                                                                   TG:GE0/0/3(U)                                                      20   common  UT:GE0/0/2(U)                                                                   TG:GE0/0/3(U)                                                      100  common  UT:GE0/0/1(U)      GE0/0/2(U)                                                   TG:GE0/0/3(U)                                                      VID  Status  Property      MAC-LRN Statistics Description      --------------------------------------------------------------------------------1    enable  default       enable  disable    VLAN 0001                         10   enable  default       enable  disable    VLAN 0010                         20   enable  default       enable  disable    VLAN 0020                         100  enable  default       enable  disable    VLAN 0100 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>SW2：</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;system-view[Huawei]sysname SW2[SW2]vlan batch 10 20 100[SW2]interface GigabitEthernet 0/0/2[SW2-GigabitEthernet0/0/2]port link-type hybrid [SW2-GigabitEthernet0/0/2]port hybrid pvid vlan 100[SW2-GigabitEthernet0/0/2]port hybrid untagged vlan 10 20 100[SW2-GigabitEthernet0/0/2]quit[SW2]interface GigabitEthernet 0/0/1[SW2-GigabitEthernet0/0/1]port link-type hybrid[SW2-GigabitEthernet0/0/1]port hybrid tagged vlan 10 20 100[SW2-GigabitEthernet0/0/1]quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看vlan</p><p>视图模式下输入命令：display vlan</p><pre class="line-numbers language-none"><code class="language-none">[S2]dis vlanThe total number of vlans is : 4--------------------------------------------------------------------------------U: Up;         D: Down;         TG: Tagged;         UT: Untagged;MP: Vlan-mapping;               ST: Vlan-stacking;#: ProtocolTransparent-vlan;    *: Management-vlan;--------------------------------------------------------------------------------VID  Type    Ports                                                          --------------------------------------------------------------------------------1    common  UT:GE0/0/1(U)      GE0/0/2(U)      GE0/0/3(D)      GE0/0/4(D)                      GE0/0/5(D)      GE0/0/6(D)      GE0/0/7(D)      GE0/0/8(D)                      GE0/0/9(D)      GE0/0/10(D)     GE0/0/11(D)     GE0/0/12(D)                     GE0/0/13(D)     GE0/0/14(D)     GE0/0/15(D)     GE0/0/16(D)                     GE0/0/17(D)     GE0/0/18(D)     GE0/0/19(D)     GE0/0/20(D)                     GE0/0/21(D)     GE0/0/22(D)     GE0/0/23(D)     GE0/0/24(D)     10   common  UT:GE0/0/1(U)                                                                   TG:GE0/0/2(U)                                                      20   common  UT:GE0/0/1(U)                                                                   TG:GE0/0/2(U)                                                      100  common  UT:GE0/0/1(U)                                                                   TG:GE0/0/2(U)                                                      VID  Status  Property      MAC-LRN Statistics Description      --------------------------------------------------------------------------------1    enable  default       enable  disable    VLAN 0001                         10   enable  default       enable  disable    VLAN 0010                         20   enable  default       enable  disable    VLAN 0020                         100  enable  default       enable  disable    VLAN 0100 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 实验测试结果：</p><p>PC1 ping通Server1 但ping不通PC2；同理，PC2 ping通Server 但ping不通PC1</p><p><img src="https://img-blog.csdnimg.cn/f22bca5ea7d04083afa4f8b45bd5a6f6.png"></p>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VLAN-Hybrid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSPF-DR与BDR详解</title>
      <link href="/2022-09-27-ospf-dr-yu-bdr-xiang-jie.html"/>
      <url>/2022-09-27-ospf-dr-yu-bdr-xiang-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、DR简介："><a href="#一、DR简介：" class="headerlink" title="一、DR简介："></a>一、DR简介：</h3><p>一个广播性、多接入网络中的指定路由器（Designated Router）</p><h3 id="二、BDR简介："><a href="#二、BDR简介：" class="headerlink" title="二、BDR简介："></a>二、BDR简介：</h3><p>为减小多路访问网络中OSPF流量，OSPF会选择一个指定路由器（DR）和一个备份指定路由器（BDR）。当多路访问网络发生变化时，DR负责更新其他所有OSPF路由器。BDR会监控DR 的状态，并在当前DR发生故障时接替其角色。</p><h3 id="三、OSPF邻居关系规律及缺点："><a href="#三、OSPF邻居关系规律及缺点：" class="headerlink" title="三、OSPF邻居关系规律及缺点："></a>三、OSPF邻居关系规律及缺点：</h3><p><img src="https://img-blog.csdnimg.cn/961bc626034140feaa54c21a3e3bf7de.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5a2k5Z-OMjg2,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h4 id="（１）、-邻居关系数量变化规律："><a href="#（１）、-邻居关系数量变化规律：" class="headerlink" title="（１）、 邻居关系数量变化规律："></a><strong>（１）、 邻居关系数量变化规律：</strong></h4><pre class="line-numbers language-none"><code class="language-none">n*（n-1）/2  //n当前路由器个数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（２）、邻居关系过多缺点："><a href="#（２）、邻居关系过多缺点：" class="headerlink" title="（２）、邻居关系过多缺点："></a><strong>（２）、邻居关系过多缺点：</strong></h4><p>（1）大量产生hello包，消耗CPU性能</p><p>（2）产生重复路由通告，消耗CPU性能（R4将路由通告给R1、R2、R3，然后R2又查找邻居，继 续通告4.4.4.0的路由，导致通告重复）</p><p>（3）任何一台路由器的路由变化都会导致多次传递,浪费了带宽资源</p><h3 id="四、为什么选举DR和BDR"><a href="#四、为什么选举DR和BDR" class="headerlink" title="四、为什么选举DR和BDR:"></a>四、为什么选举DR和BDR:</h3><p>在一个共享的广播网络多台路由器建立OSPF，有可能会产生大量的OSPF邻居<br>在这些大量的OSPF邻居发送大量的OSPF报文，造成其他路<br>器接收到大量的OSPF重复报文浪费带宽资源和设备CPU计算资源<br>.</p><h3 id="五、解决方法：引入DR、BDR"><a href="#五、解决方法：引入DR、BDR" class="headerlink" title="五、解决方法：引入DR、BDR"></a>五、解决方法：引入DR、BDR</h3><h4 id="解决过程："><a href="#解决过程：" class="headerlink" title="解决过程："></a><strong>解决过程：</strong></h4><p><img src="https://img-blog.csdnimg.cn/72ef356584274f1e8b367f59b6074023.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5a2k5Z-OMjg2,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p> 如图：当DR和BDR选举完成之后，R4将路由通告给R1和R2，然而R2作为BDR，此时他知道DR还在（不会去代替DR，去通告其他DRother），所以R2收到路由存放在本地之后不会通告出去，而是由BR通告给R3。此时减少了重复通告，优化设备性能。</p><hr><h3 id="六、DR及BDR的选举："><a href="#六、DR及BDR的选举：" class="headerlink" title="六、DR及BDR的选举："></a>六、DR及BDR的选举：</h3><p>1、DR/BDR的选举是基于接口的。</p><p>2、接口的DR优先级越大越优先，一开始默认值为1，DR优先级可以进行调整，调整的范围是0-255，数值越大优先。</p><pre><code>int f0/0 ip ospf priority 2</code></pre><p>3、接口的DR优先级相等时，Router ID越大越优先。（如果没有router id则会以环回接口为router id，如果没有环回接口则会选择最大IP的物理接口为router id）</p><p>4、DR没有抢占性</p><p>5、DR和BDR的选举过程是先选BDR再选DR</p><p>注意：当接口启用OSPF之后，假设等待40s（wait time），仍然没有其他路由器声称自己是DR和BDR，我自己就把该接口设置为DR一般是谁先配置谁是DR，其次是BDR。</p><p>DR是没有抢占性的，当BDR变为老大时，DR无法自动再次成为老大，当某天DR挂了，则BDR会升级为DR，然后再DRother中选择一个作为BDR。</p><p>从宏观角度来说，一开始先选择BDR出来，然后BDR判断网络中有没有DR，没有DR，则BDR升级为DR，再选择一个BDR出来</p><hr><h3 id="七、DR和BDR选举情况："><a href="#七、DR和BDR选举情况：" class="headerlink" title="七、DR和BDR选举情况："></a>七、DR和BDR选举情况：</h3><p><img src="https://img-blog.csdnimg.cn/e6ef4ab3c3064c92a5a491750a4d6920.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5a2k5Z-OMjg2,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>DR和BDR选举在广播的网络类型， 只有在广播的网络才会选举DR和BDR</p><p><img src="https://img-blog.csdnimg.cn/0363c965e4134ff5aceb586c50d01e0c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5a2k5Z-OMjg2,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p> 查看图：</p><p><img src="https://img-blog.csdnimg.cn/0c19c42dee3346c9b429528777d31cf1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5a2k5Z-OMjg2,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="八、拓展："><a href="#八、拓展：" class="headerlink" title="八、拓展："></a>八、拓展：</h3><p>（1）、OSPF协议采用组播，组播地址:224.0.0.5和224.0.0.6，其中DR /BDR监听目的IP地址为224.0.0.6的数据包，DRother监听目的IP地址为224.0.0.5的数据包;LSDBD、LSU发送的单播地址（在路由更新的时候，如果说路由IP地址为224.0.0.6的，仅仅只有DR和BDR能够接收目的IP地址为224.0.0.6的数据包，然后进行处理｜｜如果我DR和BDR想给普通DRother发送一些路由同步，当DRother查看发现路由IP地址为224.0.0.5，肯定是DR和BDR发的，然后处理）</p><p>（２）、hello包通常发送目的IP地址为224.0.0.5，TＴL为1（只能传一跳），点对点和广播网络类型下heｌlo包发送间隔时间10秒，死亡超时时间为40秒，在帧中继网络环境hello包发送间隔时间30秒，死亡超时为120秒<br>－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</p><h3 id="九、DR和BDR出现的环境下"><a href="#九、DR和BDR出现的环境下" class="headerlink" title="九、DR和BDR出现的环境下"></a>九、DR和BDR出现的环境下</h3><p>—在广播链路类型下选出DR BDR和DR DRother;什么接口才是广播类型?以太接口(E\F\G\T)<br>—-选举DR和BDR有个等待的40秒时间，我等待了40秒次链路还没有选举出来DR，我就成为DR;DR没有抢占<br>——先比较接口优先级，接口优先级默认为1，如果接口优先级相同在比较RID，数值越大越好;（接口优先级为0代表不参与DR和BDR选举）在华为里面优先级0代表最小的数值;<br>.—–RID可以手工指定或者自动选举，如果自动选举则优先使用环回接口，如果有多个环回接口选择数值最大的那个，没有环回接口选择物理接口数值最大的那个作为自己的RID<br>-－－先选择BDR出来，再由BDR判断当前网络有没有DR，如果没有则升级为DR，重新选举一个BDR出来<br>-－－DR和BDR一旦选举出来，为了OSPF的稳定性，新加入一台路由器就算优先级比我当前DR和BDR都高也没有用，除非O6SF协议重收敛!没有抢占性!<br>—–DRohter 要和DR以及BDR形成完全邻接关系full，只有完全邻接关系full才能互相通告同步数据库，DRother之间邻居关系只能到达2-WAY状态（双向邻居状态）在2-WAY状态下不能同步数据库</p><p>－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－ </p><h3 id="十、选举DR和BDR的好处"><a href="#十、选举DR和BDR的好处" class="headerlink" title="十、选举DR和BDR的好处"></a>十、选举DR和BDR的好处</h3><p>—在一个广播网络类型下减少了OSPF邻接关系，减少了泛洪流量和重复接受的数据库;这样就节省了设备资源和带宽资源<br>————————————————<br>版权声明：本文为CSDN博主「孤城286」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_62311779/article/details/122889602">https://blog.csdn.net/qq_62311779/article/details/122889602</a></p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DR&amp;BDR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loopback本地回环接口</title>
      <link href="/2022-09-27-loopback-ben-di-hui-huan-jie-kou.html"/>
      <url>/2022-09-27-loopback-ben-di-hui-huan-jie-kou.html</url>
      
        <content type="html"><![CDATA[<h1 id="loopback"><a href="#loopback" class="headerlink" title="loopback"></a><center><strong>loopback</strong></center></h1><p>​        回环接口是些逻辑的接口,即虚拟的软件接口，它们并不是真正的路由器接口。在ospf路由协议中配置使用回环接口是为了确保在ospf进程中总有一个激活的接口，回环接口可以用于ospf的配置和诊断</p><p>​        本地环回接口(或地址)，亦称回送地址(loopback address)。 此类接口是应用最为广泛的一种虚接口，几乎在每台<a href="https://so.csdn.net/so/search?q=%E8%B7%AF%E7%94%B1%E5%99%A8&amp;spm=1001.2101.3001.7020">路由器</a>上都会使用。常见于如下用途：</p><ol><li><p>作为一台路由器的管理地址</p><p> 系统管理员完成网络规划之后，为了方便管理，会为每一台路由器创建一个loopback 接口，并在该接口上单独指定一个IP 地址作为管理地址 ，管理员会使用该地址对路由器<a href="https://so.csdn.net/so/search?q=%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95&amp;spm=1001.2101.3001.7020">远程登录</a>（telnet ），该地址实际上起到了类似设备名称一类的功能。</p><pre><code>       但是通常每台路由器上存在众多接口和地址，为何不从当中随便挑选一个呢 ？              原因如下：由于telnet 命令使用TCP 报文，会存在如下情况：路由器的某一个接口由于故障down  掉了，但是其他的接口却仍旧可以telnet ， 也就是说，到达这台路由器的TCP 连接依旧存在。所以选择的telnet  地址必须是永远也不会down 掉的，而虚接口恰好满足此类要求。由于此类接口没有与对端互联互通的需求，所以为了节约地址资源，loopback  接口的地址通常指定为32 位掩码。</code></pre></li><li><p>使用该接口地址作为动态路由协议OSPF 、BGP 的router id 动态路由协议OSPF  、BGP 在运行过程中需要为该协议指定一个Router id ，作为此路由器的唯一标识，并要求在整个自治系统内唯一。</p><p>​        由于router id  是一个32 位的无符号整数，这一点与IP 地址十分相像 。而且IP 地址是 不会出现重复现 象的 ， 所以通常将路由器的router id  指定为与该设备上的某个接口的地址相同。由于loopback 接口的IP 地址通常被视为路由器的标识 ，所以也就成了router id  的最佳选择。</p></li><li><p>使用该接口地址作为BGP 建立TCP 连接的源地址<br> 在BGP 协议中，两个运行BGP 的路由器之间建立邻居关系是通过TCP 建立连接完成的。<br> 在配置邻居时通常指定loopback 接口为建立TCP 连接的源地址（通常只用于IBGP ，原因同2.1 ，都是为了增强TCP 连接的健壮性）<br> 配置命令如下：</p><pre class="line-numbers language-none"><code class="language-none">router id 61.235.66.1 interface loopback 0 ip address 61.235.66.1 255.255.255.255 router bgp 100 neighbor 61.235.66.7 remote-as 200 neighbor 61.235.66.7 update-source LoopBack0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在Windows系统中，采用127.0.0.1作为本地环回地址。</p></li><li><p>BGP Update-Source<br> 因为Loopback口只要Router还健在，则它就会一直保持Active，这样，只要BGP的Peer的Loopback口之间满足路由可达，就可以建立BGP 回话，总之BGP中使用loopback口可以提高网络的健壮性。</p> <pre class="line-numbers language-none"><code class="language-none">neighbor 215.17.1.35 update-source loopback 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Router ID</p><p>   使用该接口地址作为OSPF 、BGP 的Router-ID，作为此路由器的唯一标识，并要求在整个自治系统内唯一，在Ipv6中的BGP/O  SPF的Router-ID仍然是32位的IP地址。在OSPF中的路由器优先级是在接口下手动设置的，接着才是比较OSPF的Router-ID（Router-ID的选举在这里就不多说了，PS：一台路由器启动OSPF路由协议后，将选取物理接口的最大IP地址作为其RouterID，但是如果配置Loopback接口，则从Loopback中选取IP地址最大者为RouterID。另外一旦选取RouterID，OSPF为了保证稳定性，不会轻易更改，除非作为RouterID的IP地址被删除或者OSPF被重新启动），在OSPF和BGP中的Router-ID都是可以手动在路由配置模式下设置的。</p><pre class="line-numbers language-none"><code class="language-none">OSPF: Router-ID …BGP:BGP Router-ID …<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>IP Unnumbered Interfaces<br> 无编号地址可以借用强壮的loopback口地址，来节约网络IP地址的分配。<br> 例子：</p> <pre class="line-numbers language-none"><code class="language-none">interface loopback 0 ip address 215.17.3.1 255.255.255.255 ! interface Serial 5/0 bandwidth 128 ip unnumbered loopback 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> loopback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp OSPF配置实验</title>
      <link href="/2022-09-27-shi-yan-ensp-ospf-pei-zhi-shi-yan.html"/>
      <url>/2022-09-27-shi-yan-ensp-ospf-pei-zhi-shi-yan.html</url>
      
        <content type="html"><![CDATA[<h1 id="OSPF配置实验"><a href="#OSPF配置实验" class="headerlink" title="OSPF配置实验"></a><center>OSPF配置实验</center></h1><h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><img src="https://img-blog.csdnimg.cn/ded1ccb138544c8d9513b85283b4e032.png"></p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>1.搭建实训环境并完成基本配置</p><p>包括接口ip地址以及回环接口的地址：</p><pre class="line-numbers language-none"><code class="language-none">[RTA]int loopback 0#进入回环接口[RTA-LoopBack0]ip address 1.1.1.1 32  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.检查网络连通性和路由器路由表</p><p>​        在PC1上ping PC2 (IP 地址为 192.168.3.1)，结果是无法互通，导致这种结果的原因是RTA 上只有直连路由，没有到达PC2的路由表，故从PC1 上来的数据报文无法转发给PC2。</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 192.168.3.1Ping 192.168.3.1: 32 data bytes, Press Ctrl_C to breakRequest timeout!Request timeout!Request timeout!Request timeout!Request timeout!--- 192.168.3.1 ping statistics ---  5 packet(s) transmitted  0 packet(s) received  100.00% packet loss    [RTA]display ip routing-table Route Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations : 10       Routes : 10       Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface      127.0.0.0/8   Direct  0    0           D   127.0.0.1       InLoopBack0      127.0.0.1/32  Direct  0    0           D   127.0.0.1       InLoopBack0127.255.255.255/32  Direct  0    0           D   127.0.0.1       InLoopBack0    192.168.1.0/24  Direct  0    0           D   192.168.1.254   GigabitEthernet0/0/0  192.168.1.254/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/0  192.168.1.255/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/0    192.168.2.0/24  Direct  0    0           D   192.168.2.1     GigabitEthernet0/0/1    192.168.2.1/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/1  192.168.2.255/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/1255.255.255.255/32  Direct  0    0           D   127.0.0.1       InLoopBack0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.配置OSPF</p><p>在 RTA 上完成 OSPF 如下配置：</p><pre class="line-numbers language-none"><code class="language-none">[RTA]router id 1.1.1.1[RTA]ospf 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如上配置中，数字 1 的含义是 <font color="red"><strong>OSPF进程号</strong></font>，缺省情况下取值为 1;router id 是将回环地址(loopback)的地址作为Router-ID(<font color="red"><strong>路由器的唯一标识</strong></font>)，作为该路由器的唯一标识。</p><pre class="line-numbers language-none"><code class="language-none">[RTA-ospf-1]area 0.0.0.0#将该路由器放进区域0[RTA-ospf-1-area-0.0.0.0]network 1.1.1.10.0.0.0#宣告回环接口（loopback）网段[RTA-ospf-1-area-0.0.0.0]network 192.168.1.00.0.0.255#宣告接口网段[RTA-ospf-1-area-0.0.0.0]network 192.168.2.00.0.0.255#宣告接口网段<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在OSPF区域内指定网段接口上启动OSPF时，是否必须包含Router ID的地址？为什么配置是往往会将Router ID的地址包含在内？</strong></p><pre class="line-numbers language-none"><code class="language-none">不需要。OSPF区域指定网段接口上启动OSPF时，配置Router ID地址其实是发布路由器的loopback接口地址 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 RTB 上完成 OSPF 如下配置：</p><pre class="line-numbers language-none"><code class="language-none">[RTB]router id 2.2.2.2[RTB]ospf 1[RTB-ospf-1]area 0.0.0.0#将该路由器放进区域0[RTB-ospf-1-area-0.0.0.0]network 2.2.2.20.0.0.0#宣告回环接口（loopback）网段[RTB-ospf-1-area-0.0.0.0]network 192.168.2.00.0.0.255#宣告接口网段[RTB-ospf-1-area-0.0.0.0]network 192.168.3.00.0.0.255#宣告接口网段<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.检查路由器 OSPF 邻居状态及路由表</p><p>使用display ospf peer brief（查看ospf邻居的摘要信息）命令查看OSPF邻居表</p><pre class="line-numbers language-none"><code class="language-none">[RTA]dis ospf peer brief  OSPF Process 1 with Router ID 1.1.1.1  Peer Statistic Information ---------------------------------------------------------------------------- Area Id          Interface                        Neighbor id      State     0.0.0.0          GigabitEthernet0/0/1             2.2.2.2          Full         ----------------------------------------------------------------------------[RTB]dis ospf peer brief  OSPF Process 1 with Router ID 2.2.2.2  Peer Statistic Information ---------------------------------------------------------------------------- Area Id          Interface                        Neighbor id      State     0.0.0.0          GigabitEthernet0/0/1             1.1.1.1          Full         ----------------------------------------------------------------------------  可以看到在RTA和RTB的OSPF邻居表上均发现了对应路由器的route-ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用display ospf lsdb命令查看路由器之间的链路状态数据库信息,由内容就代表着已经建立了邻接关系</p><pre class="line-numbers language-none"><code class="language-none">[RTA]dis ospf lsdb OSPF Process 1 with Router ID 1.1.1.1 Link State Database          Area: 0.0.0.0 Type      LinkState ID    AdvRouter          Age  Len   Sequence   Metric Router    2.2.2.2         2.2.2.2            367  48    80000004       1 Router    1.1.1.1         1.1.1.1            358  60    80000008       1 Network   192.168.2.1     1.1.1.1            358  32    80000002       0   [RTB]dis ospf lsdb OSPF Process 1 with Router ID 2.2.2.2 Link State Database          Area: 0.0.0.0 Type      LinkState ID    AdvRouter          Age  Len   Sequence   Metric Router    2.2.2.2         2.2.2.2            404  48    80000004       1 Router    1.1.1.1         1.1.1.1            397  60    80000008       1 Network   192.168.2.1     1.1.1.1            397  32    80000002       0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 display ip routing-table protocol ospf命令，查看OSPF路由表。可以看到在RTA上已经发现了一条去往3.0网段的路由信息，他的下一条是192.168.2.2，出接口是g0/0/1</p><pre class="line-numbers language-none"><code class="language-none">[RTA]dis ip routing-table protocol ospfRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Public routing table : OSPF         Destinations : 1        Routes : 1        OSPF routing table status : &lt;Active&gt;         Destinations : 1        Routes : 1Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface        2.2.2.2/32  OSPF    10   1           D   192.168.2.2     GigabitEthernet0/0/1OSPF routing table status : &lt;Inactive&gt;         Destinations : 0        Routes : 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.PC1去Ping PC2,检验设备的连通性</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 192.168.3.1Ping 192.168.3.1: 32 data bytes, Press Ctrl_C to breakRequest timeout!From 192.168.3.1: bytes=32 seq=2 ttl=126 time=31 msFrom 192.168.3.1: bytes=32 seq=3 ttl=126 time=16 msFrom 192.168.3.1: bytes=32 seq=4 ttl=126 time=16 msFrom 192.168.3.1: bytes=32 seq=5 ttl=126 time=15 ms--- 192.168.3.1 ping statistics ---  5 packet(s) transmitted  4 packet(s) received  20.00% packet loss  round-trip min/avg/max = 0/19/31 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 07-OSPF</title>
      <link href="/2022-09-25-shu-tong-07-ospf.html"/>
      <url>/2022-09-25-shu-tong-07-ospf.html</url>
      
        <content type="html"><![CDATA[<h1 id="OSPF"><a href="#OSPF" class="headerlink" title="OSPF"></a><strong><center>OSPF</center></strong></h1><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p>​        开放式最短路径优先OSPF（Open Shortest Path First）是IETF组织开发的一个基于链路状态的内部网关协议（Interior Gateway Protocol）。本文的OSPF均指对IPv4协议使用的OSPFv2。</p><h3 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h3><p>​        由于RIP协议存在收敛慢、路由环路及扩展性差等问题，不适合大规模网络。与RIP等路由协议相比，OSPF具有如下特点：</p><ul><li>适应范围广：支持各种规模的网络，特别是大型网络。</li><li>收敛速度快：在网络拓扑结构发生变化后立即发送更新报文，并将变化在AS（Autonomous System，自治系统即由一组使用相同路由协议来交换路由信息的路由设备组成的网络）中同步。</li><li>无路由自环：OSPF根据收集到的链路状态利用最短路径树算法计算路由，从算法本身保证了不会形成路由自环。</li><li>支持区域划分：允许将网络划分成不同区域来分层管理，区域间传送的路由信息被进一步抽象，从而减少了占用的网络带宽。</li><li>支持等价路由：支持到同一目的地址的多条等价路由。</li><li>支持组播：在某些类型的链路上以组播地址发送协议报文，减少对其它设备的干扰。</li><li>OSPF中对路由信息的描述都是封装在链路状态通告LSA（Link State Advertisement）中发布出去的。</li></ul><h3 id="3、路由设备ID号"><a href="#3、路由设备ID号" class="headerlink" title="3、路由设备ID号"></a>3、路由设备ID号</h3><p>​        一台路由设备如果要运行OSPF协议，则必须存在Router ID（路由设备ID）。Router ID是一个32比特无符号整数，可以在一个自治系统中唯一的标识一台路由设备。Router  ID可以由系统选举产生，也可以手动进行配置。Router ID选举规则如下：</p><ul><li>若存在配置IP地址的Loopback接口，则选择Loopback接口地址中最大的作为Router ID；</li><li>若没有配置IP地址的Loopback接口，则从IP接口中选择IP地址最大的作为Router ID；</li><li>若IP地址已经被其它OSPF进程选用，则不能被该进程选用；</li><li>若没有配置任何IP地址，则无法选举Router ID，无法创建进程，只能手动配置Router ID。</li></ul><h3 id="4、OSPF的网络类型"><a href="#4、OSPF的网络类型" class="headerlink" title="4、OSPF的网络类型"></a>4、OSPF的网络类型</h3><p>​        根据链路层协议类型，OSPF将网络分为以下几种类型：</p><ul><li><p><strong>广播（Broadcast）类型</strong>：当链路层协议是Ethernet或FDDI时，OSPF缺省认为网络类型是Broadcast。在该类型的网络中，通常以组播形式（组播地址为224.0.0.5和224.0.0.6）发送协议报文。</p></li><li><p>P2MP（Point-to-MultiPoint，点到多点）类型：没有一种链路层协议会被缺省的认为是P2MP类型，必须是由其他的网络类型强制更改的。常用做法是将NBMA改为P2MP。在该类型的网络中，缺省情况下，以组播形式（组播地址为224.0.0.5）发送协议报文。可以根据用户需要，以单播形式发送协议报文。</p></li><li><p><strong>P2P（Point-to-Point，点到点）类型</strong>：当链路层协议是PPP或HDLC（High-Level Data Link  Control，高级数据链路控制）时，OSPF缺省认为网络类型是P2P。在该类型的网络中，以组播形式（组播地址为224.0.0.5）发送协议报文。</p></li><li><p>NBMA（Non-Broadcast Multi-Access）类型：当链路层协议是帧中继、X.25时，缺省情况下，OSPF认为网络类型是NBMA。在该类型的网络中，以单播形式发送协议报文。</p><p><strong><font color="red">注意现在只有P2P和广播的OSPF网络类型，其他两个已经淘汰</font></strong></p></li></ul><h3 id="5、OSPF的5种报文"><a href="#5、OSPF的5种报文" class="headerlink" title="5、OSPF的5种报文"></a>5、OSPF的5种报文</h3><p>OSPF协议报文主要包括以下几种：</p><img src="https://img-blog.csdnimg.cn/img_convert/e22449df9ad170a48963665d8c12485f.jpeg" alt="img" style="zoom: 80%;"><h3 id="6-OSPF的3张表"><a href="#6-OSPF的3张表" class="headerlink" title="6.OSPF的3张表"></a>6.OSPF的3张表</h3><p>​        OSPF的工作过程分为三大步骤，分别是形成邻居关系、形成邻接关系、计算路由。</p><p>​        OSPF建立邻居必须要收集lsa，收集完成形成邻接，收集到的lsa计算路由。完成这三个步骤，会分别形成三张表OSPF邻居表、LSDB邻接表、OSPF路由表。</p><h4 id="邻居和邻接："><a href="#邻居和邻接：" class="headerlink" title="邻居和邻接："></a>邻居和邻接：</h4><p>​        在OSPF网络中，邻居设备之间为了交换路由信息，邻居设备之间首先要建立邻接关系，邻居（Neighbors）关系和邻接（Adjacencies）关系是两个不同的概念：</p><ul><li><p><strong>邻居关系</strong>：OSPF设备启动后，会通过OSPF接口向外发送Hello报文，收到Hello报文的OSPF设备会检查报文中所定义的参数，如果双方一致就会形成邻居关系，两端设备互为邻居。</p></li><li><p><strong>邻接关系</strong>：形成邻居关系后，如果两端设备成功交换DD报文和LSA，才建立邻接关系。</p></li></ul><p>​        邻居和邻接状态是通过OSPF状态机表现的，OSPF共有8种邻居状态机，分别是Down、Attempt、Init、2-way、Exstart、Exchange、Loading、Full，如下图所示。Down、2-way、Full是稳定状态，Attempt、Init、Exstart、Exchange、Loading是不稳定状态。不稳定状态是在转换过程中瞬间存在的状态，一般不会超过几分钟。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/573bb75c6c87e2d382495c03b9b3abd8.jpeg" alt="img"></p><p>OSPF邻居状态机及含义如下表：</p><img src="https://img-blog.csdnimg.cn/img_convert/88fe6feea3f48daef6b58dc2af32cb47.jpeg" alt="img" style="zoom:80%;"><h3 id="7、OSPF路由的计算过程"><a href="#7、OSPF路由的计算过程" class="headerlink" title="7、OSPF路由的计算过程"></a>7、OSPF路由的计算过程</h3><p>OSPF协议中，路由的计算过程如下：</p><ul><li>每台OSPF路由设备根据网络拓扑结构生成LSA，并通过更新报文将LSA发送给网络中的其它OSPF路由设备。</li><li>每台OSPF路由设备都会收集其它路由设备通告的LSA，所有的LSA组成了LSDB。LSA是对路由设备周围网络拓扑结构的描述，LSDB则是对整个自治系统的网络拓扑结构的描述。</li><li>OSPF路由设备将LSDB转换成一张带权值的有向图，这张图便是对整个网络拓扑结构的真实反映。各个路由设备得到的有向图是完全相同的。</li><li>每台路由设备根据有向图，使用SPF（Shortest Path First，最短路径优先）算法计算出一棵以自己为根的最短路径树，这棵树给出了到自治系统中各节点的路由。</li></ul><h3 id="8-OSPF邻接关系建立流程"><a href="#8-OSPF邻接关系建立流程" class="headerlink" title="8.OSPF邻接关系建立流程"></a>8.OSPF邻接关系建立流程</h3><img src="https://img-blog.csdnimg.cn/bc4e167f037f497fb7e6a4528e932d96.png" style="zoom: 33%;"><img src="https://img-blog.csdnimg.cn/5ca3eebd92b0421389ab211a63dcb61a.png" style="zoom:33%;"><img src="https://img-blog.csdnimg.cn/d88c09c33a564b78ac32063f01531ebe.png" style="zoom: 50%;"><h3 id="9-OSPF的4种路由类型"><a href="#9-OSPF的4种路由类型" class="headerlink" title="9.OSPF的4种路由类型"></a>9.OSPF的4种路由类型</h3><p><strong>1、区域内路由器</strong>                </p><p>​      Internal Router    </p><p>​      该类设备的所有接口都属于同一个OSPF区域。    </p><p><strong>2、区域边界路由器ABR</strong>                </p><p>​      Area Border Router    </p><p>​      该类设备可以同时属于两个以上的区域，但其中一个必须是骨干区域。    </p><p>​      ABR用来连接骨干区域和非骨干区域，它与骨干区域之间既可以是物理连接，也可以是逻辑上的连接。    </p><p><strong>3、骨干路由器</strong>                </p><p>​      Backbone Router    </p><p>​      该类设备至少有一个接口属于骨干区域。    </p><p>​      所有的ABR和位于Area0的内部设备都是骨干路由器。    </p><p><strong>4、自治系统边界路由器ASBR</strong>                </p><p>​      AS Boundary Router    </p><p>​      与其他AS交换路由信息的设备称为ASBR。    </p><p>​      ASBR并不一定位于AS的边界，它可能是区域内设备，也可能是ABR。只要一台OSPF设备引入了外部路由的信息，它就成为ASBR。  </p><h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><p>1、两台空配置的 MSR 路由器通过图示的方式连接，通过配置 IP 地址，两台路由器的 GE0/0 接口可以互通。如今分别在两台路由器上增加如下配置： </p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image002.png" alt="img"></p><p>RTA：</p><p>[RTA]ospf </p><p>[RTA-ospf-1]area 0 </p><p>[RTA-ospf-1-area-0.0.0.0]network 192.168.1.1 0.0.0.3 </p><p>[RTA-GigabitEthernet0/0]ospf dr-priority 2 </p><p>RTB：</p><p>[RTB]ospf </p><p>[RTB-ospf-1]area 0 </p><p>[RTB-ospf-1-area-0.0.0.0]network 192.168.1.2 0.0.0.3 </p><p>[RTB-GigabitEthernet0/0]ospf dr-priority 2</p><p>那么在 OSPF邻居状态稳定后，_<strong>B</strong>_____。</p><p>A. OSPF 接口优先级相同，在 192.168.1.0/30网段上不进行 OSPF DR选举 </p><p>B. 两台路由器中，一台为DR，一台为 BDR </p><p>C. 两台路由器中，一台为DR，一台为DRother </p><p>D. 两台路由器的邻居状态分别为FULL、2-Way </p><p>实验验证，并截图显示路由器的邻居信息放入下表中：</p><p>​     <img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg" alt="img">  <img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image006.png" alt="img">  </p><p>2、三台 MSR 路由器通过图示的方式连接，192.168.1.0/30 为 RTA 和 RTB 之间的互连网段， 10.10.10.0/30 是 RTB 和 RTC 之间的互连网段。在三台路由器的互连接口上都运行了 OSPF 而且都属于 Area 0，同时在 Area0 里都只发布了三台路由器互连接口网段。假设 OSPF 运行正常，OSPF 邻居建立成功，那么**__**<strong>ACD_</strong>___。 </p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image007.png" alt="说明: 298.png"></p><p>A. 如果三台路由器之间的链路都是以太网，那么网络中至少有两个 DR </p><p>B. 如果三台路由器之间的链路都是以太网，那么网络中可能只有一个 DR </p><p>C. 三台路由器的 OSPF 邻居状态稳定后，三台路由器有同样的 LSDB </p><p>D. RTB 的路由表中没有 OSPF路由 </p><p>实验验证，并截图显示路由器的邻居信息放入下表中：</p><p>  <img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image009.jpg" alt="img">     <img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image011.jpg" alt="img">     <img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image013.jpg" alt="img">  <img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image014.png" alt="img">  <img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image016.jpg" alt="img">  </p><p>3、三台 MSR 路由器通过图示的方式连接。三台路由器都属于 OSPFArea0，同时在 Area0 里通过 network 命令发布了三台路由器的互连网段。在 RTC 上，网段 NET-1 也通过 network 命令在 OSPFArea0 中发布了。三台路由器之间的 OSPF Cost 如图所示。目前三台路由器的邻居状态稳定，那么____<strong>AB</strong>__。</p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image017.png" alt="说明: 299.png"></p><p>A. 在 RTA 的路由表只有一条到达 NET-1 网段的 OSPF 路由</p><p>B. 在 RTB 的路由表有两条去往目的网段 NET-1 的 OSPF 路由 </p><p>C. 对 RTB 而言，到达目的网段 NET-1 会优先选择 RTB—&gt;RTC 路径 </p><p>D. 网络状态稳定后，在接下来的 45 分钟之内，网络上 OSPF 邻居之间只有 Hello 报文传递</p><p>4、在四台 MSR 路由器之间运行 OSPF 并划分区域，其连接以及划分方式如图。已知网络中所有链路的OSPF Cost 值都为10，那么关于此图描述正确的是_**_**<strong>D_</strong>__。</p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image019.png" alt="说明: 435.png"></p><p>A. 网络中四台路由器都是ABR(Area Border Router)</p><p>B.Area 0之间的链路故障后，RTA访问RTB 的路径为 RTA-&gt;RTD-&gt;RTC-&gt;RTB </p><p>C. RTA访问RTC有两条等值路径，分别为 RTA-&gt;RTB-&gt;RTC和 RTA-&gt;RTD-RTC </p><p>D. RTD访问RTB 会优先选择 RTD-&gt;RTA-&gt;RTB路径 </p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSPF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 06-路由</title>
      <link href="/2022-09-25-shu-tong-06-lu-you.html"/>
      <url>/2022-09-25-shu-tong-06-lu-you.html</url>
      
        <content type="html"><![CDATA[<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a><strong><center>路由</center></strong></h1><h3 id="路由的分类"><a href="#路由的分类" class="headerlink" title="路由的分类"></a>路由的分类</h3><table><thead><tr><th>路由分类</th><th>备注</th></tr></thead><tbody><tr><td>直连路由</td><td>路由器接口上的网络（接口配置了IP地址并且开启）</td></tr><tr><td>静态路由</td><td>管理员手工添加的网络</td></tr><tr><td>动态路由</td><td>路由器之间动态学习形成的网络</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/45343550ff1e4dc9afd33a3b8bb1b103.png" alt="请添加图片描述"></p><h3 id="路由优先级的比较过程"><a href="#路由优先级的比较过程" class="headerlink" title="路由优先级的比较过程"></a>路由优先级的比较过程</h3><ol><li>首先比较路由的掩码，掩码长的优先</li><li>然后比较路由的preference，数字小的优先</li><li>然后比较路由的cost，数字小的优先</li><li>如果都相同，则形成等价路由</li></ol><h3 id="缺省路由"><a href="#缺省路由" class="headerlink" title="缺省路由"></a>缺省路由</h3><ul><li><p>缺省路由是一种特殊的路由，当报文没有在路由表中找到匹配的具体路由表项时才使用的路由。如果报文的目的地址不能与路由表的任何目的地址相匹配，那么该报文将选取缺省路由进行转发。</p></li><li><p>缺省路由在路由表中的形式为0.0.0.0／0，缺省路由也被叫做默认路由。</p></li></ul><img src="https://img-blog.csdnimg.cn/29d10bbbc34d4b7f9188ae0d77df3896.png" style="zoom:50%;"><h3 id="路由递归"><a href="#路由递归" class="headerlink" title="路由递归"></a>路由递归</h3><ul><li><p>路由必须有直连的下一跳才能够指导转发，但是路由生成时下一跳可能不是直连的，因此需要计算出一个直连的下一跳和对应的出接口，这个过程就叫做路由递归。</p></li><li><p>路由递归也被称为路由迭代。</p></li></ul><img src="https://img-blog.csdnimg.cn/fc01daed52424fa696ab416a1bfb9455.png" style="zoom: 50%;"><h3 id="等价路由"><a href="#等价路由" class="headerlink" title="等价路由"></a>等价路由</h3><ul><li>来源相同、开销相同的路由都会被加入路由表，形成的路由为等价路由（两个路由条目指向的目的网段相同，但是具有不同的下一跳地址），路由转发会将流量分布到多条路径上。</li></ul><h3 id="浮动路由"><a href="#浮动路由" class="headerlink" title="浮动路由"></a>浮动路由</h3><ul><li><p>静态路由支持配置时手动指定优先级，可以通过配置目的地址／掩码相同、优先级不同、下一跳不同的静态路由，实现转发路径的备份。</p></li><li><p>浮动路由是主用路由的备份，保证链路故障时提供备份路由。主用路由下一跳可达时该备份路由不会出现在路由表。</p></li></ul><img src="https://img-blog.csdnimg.cn/7031af4572054474a7b15a03c86e634f.png" style="zoom:50%;"><h3 id="路由汇总"><a href="#路由汇总" class="headerlink" title="路由汇总"></a>路由汇总</h3><h5 id="路由汇总的需求"><a href="#路由汇总的需求" class="headerlink" title="路由汇总的需求"></a>路由汇总的需求</h5><ul><li>子网划分、VLSM解决了地址空间浪费的问题，但同时也带了新的问题：路由表中的路由条目数量增加。为减少路由条目数量可以使用路由汇总。</li></ul><img src="https://img-blog.csdnimg.cn/0052d5fb5f4b4d069c60f9f18052bda4.png" style="zoom:50%;"><h5 id="汇总计算"><a href="#汇总计算" class="headerlink" title="汇总计算"></a>汇总计算</h5><ul><li><p>基于一系列连续的、有规律的IP网段，如果需计算相应的汇总路由，且确保得出的汇总路由刚好“囊括”上述IP网段，则需保证汇总路由的掩码长度尽可能长。</p></li><li><p>诀窍在于：将明细路由的目的网络地址都换算成二进制，然后排列起来，找出所有目的网络地址中“相同的比特位”。</p></li></ul><img src="https://img-blog.csdnimg.cn/d579a39ef4834540a1fe52ab0af46b11.png" style="zoom:50%;"><h5 id="汇总引发的问题"><a href="#汇总引发的问题" class="headerlink" title="汇总引发的问题"></a>汇总引发的问题</h5><p>形成环路</p><p><img src="https://img-blog.csdnimg.cn/5022146f769845ee989259eb570c12f3.png"></p><p>解决方法</p><pre class="line-numbers language-none"><code class="language-none">[RTB]ip route-static 10.1.0.0 16 0 NULL0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在RTB上增加一条指向Null0的路由，即可解决上述问题。因此，在部署路由汇总的时候要格外注意，要规避环路问题。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp-中小型网络系统综合实验</title>
      <link href="/2022-09-18-shi-yan-ensp-zhong-xiao-xing-wang-luo-xi-tong-zong-he-shi-yan.html"/>
      <url>/2022-09-18-shi-yan-ensp-zhong-xiao-xing-wang-luo-xi-tong-zong-he-shi-yan.html</url>
      
        <content type="html"><![CDATA[<h1 id="中小型网络系统综合实验"><a href="#中小型网络系统综合实验" class="headerlink" title="中小型网络系统综合实验"></a><center>中小型网络系统综合实验</center></h1><h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><ol><li>网络中有三个不同部门，均可自动获取地址</li><li>各部门之间可以互相访问，同时也可以访问内网服务器172.16.100.1</li><li>PC1可以访问互联网，PC2和PC3可以访问互联网</li><li>内网服务器对外发布的地址为64.1.1.3，Internet用户可以访问这台服务器</li><li>内网服务器的域名为<a href="http://www.jya.net,各pc可以通过域名访问/">www.jya.net，各PC可以通过域名访问</a></li></ol><h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><img src="https://img-blog.csdnimg.cn/d607f4a83a024e7bb45686e163d948be.png"></p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a><strong>实验步骤</strong></h3><p>1.S1和S2为二层交换机，S3为三层交换机。首先实现各部门自动寻址,在S2上创建vlan20、30，在相对应的接口上分配vlan以及连接类型</p><pre class="line-numbers language-none"><code class="language-none">[S2]vlan batch 20 30[S2]int e0/0/2[S2-Ethernet0/0/2]port link-type access [S2-Ethernet0/0/2]port default vlan 20[S2-Ethernet0/0/2]int e0/0/3[S2-Ethernet0/0/3]port link-type access[S2-Ethernet0/0/3]port default vlan 30[S2-Ethernet0/0/3]dis th#interface Ethernet0/0/3 port link-type access port default vlan 30#return[S2-Ethernet0/0/3]int e0/0/1[S2-Ethernet0/0/1]port link-type trunk [S2-Ethernet0/0/1]port trunk allow-pass vlan all <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在S3上同样先创建vlan 10 20 30 40，其中Vlan 40为服务器单独划分的vlan。</p><pre class="line-numbers language-none"><code class="language-none">[S3]vlan batch 10 20 30 40<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.为各个vlan添加网关</p><pre class="line-numbers language-none"><code class="language-none">[S3]int vlan 20[S3-Vlanif20]ip add 192.168.20.254 24[S3-Vlanif20]int vlan 10[S3-Vlanif10]ip add 192.168.10.254 24[S3-Vlanif10]int vlan 30[S3-Vlanif30]ip add 192.168.30.254 24[S3-Vlanif30]int vlan 40[S3-Vlanif40]ip add 172.16.100.254 24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.打开DHCP，在每个vlan下添加dns-list</p><pre class="line-numbers language-none"><code class="language-none">[S3]dhcp enable[S3]int vlan 10[S3-Vlanif10]dhcp select interface      //在vlanif10 下选择打开dhcp[S3-Vlanif10]dhcp server dns-list 172.16.100.1//添加dns[S3-Vlanif10]dis th#interface Vlanif10 ip address 192.168.10.254 255.255.255.0 dhcp select interface dhcp server dns-list 172.16.100.1#return[S3-Vlanif10]int vlan 20[S3-Vlanif20]dhcp select interface[S3-Vlanif20] dhcp server dns-list 172.16.100.1[S3-Vlanif20]dis th#interface Vlanif20 ip address 192.168.20.254 255.255.255.0 dhcp select interface dhcp server dns-list 172.16.100.1#return[S3-Vlanif20]int vlan 30[S3-Vlanif30]dhcp select interface[S3-Vlanif30] dhcp server dns-list 172.16.100.1[S3-Vlanif30]dis th#interface Vlanif30 ip address 192.168.30.254 255.255.255.0 dhcp select interface dhcp server dns-list 172.16.100.1#return[S3-Vlanif30]q[S3]dis ip interface brief *down: administratively down^down: standby(l): loopback(s): spoofingThe number of interface that is UP in Physical is 3The number of interface that is DOWN in Physical is 4The number of interface that is UP in Protocol is 2The number of interface that is DOWN in Protocol is 5Interface                         IP Address/Mask      Physical   Protocol  MEth0/0/1                         unassigned           down       down      NULL0                             unassigned           up         up(s)     Vlanif1                           unassigned           up         down      Vlanif10                          192.168.10.254/24    up         up        Vlanif20                          192.168.20.254/24    down       down      Vlanif30                          192.168.30.254/24    down       down      Vlanif40                          172.16.100.254/24    down       down      [S3]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.接口配置vlan</p><pre class="line-numbers language-none"><code class="language-none">[S3]int g0/0/2[S3-GigabitEthernet0/0/2]port link-type access [S3-GigabitEthernet0/0/2]port default vlan 10[S3]int g0/0/3[S3-GigabitEthernet0/0/3]port link-type trunk [S3-GigabitEthernet0/0/3]port trunk allow-pass vlan all [S3-GigabitEthernet0/0/3]int g0/0/4[S3-GigabitEthernet0/0/4]port link-type access [S3-GigabitEthernet0/0/4]port default vlan 40<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.配置DNS服务器</p><p><img src="https://img-blog.csdnimg.cn/8983afc146b440eeb62dd6f987326455.png"></p><p><img src="https://img-blog.csdnimg.cn/e377bea8371443b98970e07b5152d1ef.png"></p><p>7.现在查看ipconfig可以看到已经自动获取地址，且可以通过域名访问dns服务器</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ipconfigLink local IPv6 address...........: fe80::5689:98ff:fea6:918IPv6 address......................: :: / 128IPv6 gateway......................: ::IPv4 address......................: 192.168.10.253Subnet mask.......................: 255.255.255.0Gateway...........................: 192.168.10.254Physical address..................: 54-89-98-A6-09-18DNS server........................: 172.16.100.1PC&gt;ping 172.16.100.1Ping 172.16.100.1: 32 data bytes, Press Ctrl_C to breakFrom 172.16.100.1: bytes=32 seq=1 ttl=254 time=46 msFrom 172.16.100.1: bytes=32 seq=2 ttl=254 time=63 msFrom 172.16.100.1: bytes=32 seq=3 ttl=254 time=47 msFrom 172.16.100.1: bytes=32 seq=4 ttl=254 time=47 msFrom 172.16.100.1: bytes=32 seq=5 ttl=254 time=31 ms--- 172.16.100.1 ping statistics ---  5 packet(s) transmitted  5 packet(s) received  0.00% packet loss  round-trip min/avg/max = 31/46/63 msPC&gt;ping www.jya.netPing www.jya.net [172.16.100.1]: 32 data bytes, Press Ctrl_C to breakFrom 172.16.100.1: bytes=32 seq=1 ttl=254 time=47 msFrom 172.16.100.1: bytes=32 seq=2 ttl=254 time=32 msFrom 172.16.100.1: bytes=32 seq=3 ttl=254 time=62 msFrom 172.16.100.1: bytes=32 seq=4 ttl=254 time=31 msFrom 172.16.100.1: bytes=32 seq=5 ttl=254 time=47 ms--- 172.16.100.1 ping statistics ---  5 packet(s) transmitted  5 packet(s) received  0.00% packet loss  round-trip min/avg/max = 31/43/62 msPC&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.到这一步为止内网的配置就已经完成</p><p>9.给核心交换机S3和路由器R1之间的接口配上IP地址10.10.10.和10.10.10.2，实现互通</p><pre class="line-numbers language-none"><code class="language-none">//先给R1的g0/0/0接口配置地址[R1]int g0/0/0[R1-GigabitEthernet0/0/0]ip add 10.10.10.1 24//给S3的g0/0/1接口配上地址，注意交换机接口不能直接配置IP地址，会报错。所以先创建一个vlan 100，在valn里配置地址[S3]vlan 100[S3-vlan100]q[S3]int g0/0/1[S3-GigabitEthernet0/0/1]port link-type access [S3-GigabitEthernet0/0/1]port default vlan 100[S3-GigabitEthernet0/0/1]q[S3]int vlan 10[S3-Vlanif100]ip add 10.10.10.2 24[S3-Vlanif100]dis th#interface Vlanif100 ip address 10.10.10.2 255.255.255.0#return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.完成上面的配置后，核心交换机和R1之间实现互通</p><pre class="line-numbers language-none"><code class="language-none">[S3]ping 10.10.10.1  PING 10.10.10.1: 56  data bytes, press CTRL_C to break    Reply from 10.10.10.1: bytes=56 Sequence=1 ttl=255 time=110 ms    Reply from 10.10.10.1: bytes=56 Sequence=2 ttl=255 time=30 ms    Reply from 10.10.10.1: bytes=56 Sequence=3 ttl=255 time=10 ms    Reply from 10.10.10.1: bytes=56 Sequence=4 ttl=255 time=10 ms    Reply from 10.10.10.1: bytes=56 Sequence=5 ttl=255 time=20 ms  --- 10.10.10.1 ping statistics ---    5 packet(s) transmitted    5 packet(s) received    0.00% packet loss    round-trip min/avg/max = 10/36/110 ms[S3]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.给路由器配上外网地址</p><pre class="line-numbers language-none"><code class="language-none">[R1]int g0/0/1[R1-GigabitEthernet0/0/1]ip add 64.1.1.1 24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>12.在S3上配置一条去外网的路由</p><pre class="line-numbers language-none"><code class="language-none">[S3]ip route-static 0.0.0.0 0.0.0.0 10.10.10.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>13.在R1上配置路由</p><pre class="line-numbers language-none"><code class="language-none">[R1]ip route-static 0.0.0.0 0.0.0.0 64.1.1.10[R1]ip route-static 192.168.0.0 255.255.0.0 10.10.10.2[R1]ip route-static 172.16.100.0 255.255.255.0 10.10.10.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>14.配置内网访问外网的NAT，创建ACL 2000，规则允许源地址为192.168.0.0网段</p><pre class="line-numbers language-none"><code class="language-none">[R1]acl 2000[R1-acl-basic-2000]rule permit source 192.168.0.0 0.0.255.255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>15.创建nat地址池</p><pre class="line-numbers language-none"><code class="language-none">[R1]nat address-group 1 64.1.1.5 64.1.1.5[R1]int g0/0/1[R1-GigabitEthernet0/0/1]nat outbound 2000 address-group 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">//这个时候内网三个部门的PC均可访问外网的地址PC&gt;ping 8.8.8.8Ping 8.8.8.8: 32 data bytes, Press Ctrl_C to breakRequest timeout!Request timeout!From 8.8.8.8: bytes=32 seq=3 ttl=252 time=78 msFrom 8.8.8.8: bytes=32 seq=4 ttl=252 time=47 msFrom 8.8.8.8: bytes=32 seq=5 ttl=252 time=62 ms--- 8.8.8.8 ping statistics ---  5 packet(s) transmitted  3 packet(s) received  40.00% packet loss  round-trip min/avg/max = 0/62/78 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>16.创建acl2001，阻止PC1访问互联网</p><pre class="line-numbers language-none"><code class="language-none">[R1]acl 2001[R1-acl-basic-2001]rule deny source 192.168.10.0 0.0.0.255[R1-acl-basic-2001]rule permit source any[R1]int g0/0/0[R1-GigabitEthernet0/0/0]traffic-filter inbound acl 2001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>//PC1无法访问互联网</p><p>17.配置静态NAT给服务器绑定公网ip</p><pre class="line-numbers language-none"><code class="language-none">[R1-GigabitEthernet0/0/0]int g0/0/1[R1-GigabitEthernet0/0/1]nat static enable [R1-GigabitEthernet0/0/1]nat static global 64.1.1.3 inside 172.16.100.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">x现在外网的PC就可以访问内网的服务器PC&gt;ping 64.1.1.3Ping 64.1.1.3: 32 data bytes, Press Ctrl_C to breakFrom 64.1.1.3: bytes=32 seq=1 ttl=252 time=62 msFrom 64.1.1.3: bytes=32 seq=2 ttl=252 time=32 msFrom 64.1.1.3: bytes=32 seq=3 ttl=252 time=31 msFrom 64.1.1.3: bytes=32 seq=4 ttl=252 time=47 msFrom 64.1.1.3: bytes=32 seq=5 ttl=252 time=15 ms--- 64.1.1.3 ping statistics ---  5 packet(s) transmitted  5 packet(s) received  0.00% packet loss  round-trip min/avg/max = 15/37/62 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ensp实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp-Telnet远程登录实验</title>
      <link href="/2022-09-17-shi-yan-ensp-telnet-yuan-cheng-deng-lu-shi-yan.html"/>
      <url>/2022-09-17-shi-yan-ensp-telnet-yuan-cheng-deng-lu-shi-yan.html</url>
      
        <content type="html"><![CDATA[<h1 id="通过Telnet远程登录到网络设备"><a href="#通过Telnet远程登录到网络设备" class="headerlink" title="通过Telnet远程登录到网络设备"></a><center><strong>通过Telnet远程登录到网络设备</strong></center></h1><p><strong>实验目的</strong></p><p>1.理解Telnet的应用场景</p><p>2.掌握Telnet的基本配置</p><p>3.掌握Telnet密码验证的配置</p><p>4.掌握Telnet用户级别的修改方法</p><p><strong>实验内容</strong></p><p>本实验模拟公司网络场景。路由器R1是公司机房的一台设备，公司员工的办公区与机房不在同一个楼层，路由器R2和R3模拟员工主机，通过交换机S1与机房设备相连。为了方便用户的管理，现需要在路由器R1上配置Telnet使用户能在办公区远程管理机房设备。为了提高安全性，Telnet需要使用密码认证，只有网络管理员能对设备进行配置和管理，普通用户仅能监控设备。</p><p><strong>实验拓扑</strong></p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg" alt="img"></p><p><strong>实验步骤</strong></p><p>1 实验编址</p><table><thead><tr><th>设备</th><th>接口</th><th>IP地址</th><th>子网掩码</th><th>默认网关</th></tr></thead><tbody><tr><td>R1</td><td>GE  0/0/0</td><td>10.1.1.254</td><td>255.255.255.0</td><td></td></tr><tr><td>R2</td><td>GE  0/0/0</td><td>10.1.1.1</td><td>255.255.255.0</td><td></td></tr><tr><td>R3</td><td>GE  0/0/0</td><td>10.1.1.2</td><td>255.255.255.0</td><td></td></tr></tbody></table><p>2 基本配置</p><p>根据实验编址进行相应的基本配置，并使用ping命令测试各直连链路的连通性。</p><p>（测试截图）</p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg" alt="img"></p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image006.jpg" alt="img"></p><p>3配置Telnet的密码验证</p><p>（配置命令）</p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image007.png" alt="img"></p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image009.jpg" alt="img"></p><p>4 在用户设备R2和R3上使用Telnet连接R1</p><p>（截图）</p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image010.png" alt="img"><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image011.png" alt="img"></p><p>5 配置Telnet区分不同用户的权限</p><p>（配置命令）</p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image012.png" alt="img"></p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image013.png" alt="img"></p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image014.png" alt="img"></p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image015.png" alt="img"></p><p>6.配置完成后，R2模拟成普通用户设备，测试到R1的Telnet连接</p><p>（截图）</p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image011.png" alt="img"></p><p>7 管理员是使用自己单独的用户名和密码登录设备。进入AAA视图配置本地用户名admin和密文密码hello，并且将该用户的用户级别修改为3（管理级）。</p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image016.png" alt="img"></p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image017.png" alt="img"></p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image018.png" alt="img"></p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image019.png" alt="img"></p><p>（配置命令）</p><p>8 将R3模拟成管理员用户设备，测试到R1的Telnet连接。</p><p>（截图）</p><p><img src="file:///C:/Users/Okra/AppData/Local/Temp/msohtmlclip1/01/clip_image020.png" alt="img"></p><p><strong>思考题</strong></p><p>\1.   Telnet是基于TCP协议还是UDP协议的应用？</p><p>是基于TCP协议</p><p>\2.   Telnet应用安全吗？为什么？</p><p>不安全，是明文传输，可以在wireshark抓包直接看到用户和密码</p>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Telnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp-NAT网络地址转换</title>
      <link href="/2022-09-16-shi-yan-ensp-nat-wang-luo-di-zhi-zhuan-huan.html"/>
      <url>/2022-09-16-shi-yan-ensp-nat-wang-luo-di-zhi-zhuan-huan.html</url>
      
        <content type="html"><![CDATA[<h1 id="NAT网络地址转化"><a href="#NAT网络地址转化" class="headerlink" title="NAT网络地址转化"></a><center>NAT网络地址转化</center></h1><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a><strong>知识点</strong></h3><p>一般服务器使用静态NAT，为Server绑定一个固定的公网IP</p><p>终端为动态NAT</p><h3 id="NAT的分类"><a href="#NAT的分类" class="headerlink" title="NAT的分类"></a>NAT的分类</h3><h4 id="静态NAT"><a href="#静态NAT" class="headerlink" title="静态NAT"></a>静态NAT</h4><ul><li>静态NAT实现了私网地址和公网地址的一对一映射</li><li>一个公网IP只会分配给唯一且固定的内网主机</li><li>缺点：无法有效解决公网地址稀缺的问题</li><li>优点：避免外网设备的攻击，仅提高了安全性</li></ul><hr><p><img src="https://img2022.cnblogs.com/blog/2823710/202206/2823710-20220611203536417-1391640044.png" alt="img"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">注意：nat <span class="token keyword">static</span> enable  nat <span class="token keyword">static</span> global 公网地址 inside 私网地址以上两条命令都是在路由出口接口模式下配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>每个私有地址都有一个与之对应并且固定的公网地址，即私网IP地址和公网IP地址之间的关系是<strong>一一对应</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">出口网关设备的NAT数据配置：interface GigabitEthernet <span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">1</span>  <span class="token comment">//进入接口GE 0/0/1</span>ip address <span class="token number">12.1</span><span class="token number">.2</span><span class="token number">.1</span> <span class="token number">24</span>  <span class="token comment">//配置接口IP地址</span>nat <span class="token keyword">static</span> enable  <span class="token comment">//开启静态nat</span>nat <span class="token keyword">static</span> global <span class="token number">12.1</span><span class="token number">.2</span><span class="token number">.1</span> inside <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.1</span>  <span class="token comment">//将内网地址192.168.1.1映射到公网地址12.1.2.1</span>nat <span class="token keyword">static</span> global <span class="token number">12.1</span><span class="token number">.2</span><span class="token number">.2</span> inside <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.2</span>nat <span class="token keyword">static</span> global <span class="token number">12.1</span><span class="token number">.2</span><span class="token number">.3</span> inside <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="NAT-Server和NAT-Static的区别是什么"><a href="#NAT-Server和NAT-Static的区别是什么" class="headerlink" title="NAT Server和NAT Static的区别是什么"></a>NAT Server和NAT Static的区别是什么</h1><p>外网主动访问内网时，NAT Server和NAT Static无差别。</p><p>NAT Server对于内网主动访问外网的情况不做端口替换，仅作地址替换，即当流量的源IP匹配到NAT server规则的内网IP，不论端口号多少，都会转换IP地址。</p><p>NAT Static对于内网主动访问外网的情况会同时替换地址和端口号。</p><p>当希望内网用户可以正常访问外网服务器，外网用户可以正常访问内网服务器时，如果在Router上同时配置了NAT Server和Easy IP功能，由于NAT  Server对于内网主动访问外网的情况不做端口替换，仅作地址替换，可能会存在流表建立失败的情况，建议用户在这种情况可将NAT  Server配置改为NAT Static。</p><h4 id="动态NAT"><a href="#动态NAT" class="headerlink" title="动态NAT"></a>动态NAT</h4><ul><li>所有可用的公网地址组成地址池；</li><li>当内部主机访问外部网络时，临时分配一个地址池中的未使用的公网IP地址，并将该地址标记为“In Use”。当该主机不再访问外部网络时回收分配的地址，重新标记为“Not Use”。</li><li>动态NAT选择地址池中的地址进行地址转换时，不会转换端口，即No-PAT，导致了公网地址与私网地址还是1:1的映射关系，无法提高公网地址利用率</li></ul><p><img src="https://img2022.cnblogs.com/blog/2823710/202206/2823710-20220611203600999-1191581879.png" alt="img"></p><hr><pre class="line-numbers language-c" data-language="c"><code class="language-c">出口网关设备的NAT数据配置：nat address<span class="token operator">-</span>group <span class="token number">1</span> <span class="token number">12.1</span><span class="token number">.1</span><span class="token number">.2</span> <span class="token number">12.1</span><span class="token number">.1</span><span class="token number">.5</span>  <span class="token comment">//创建一个地址池address-group 1，共有4个公网IP地址</span>acl <span class="token number">2000</span>  <span class="token comment">//创建acl 规则</span>rule <span class="token number">5</span> permit source <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.255</span>  <span class="token comment">//配置策略,允许源IP网段(也可以允许某个IP)通过</span>quitinterface GigabitEthernet <span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">1</span>  <span class="token comment">//进入GE 0/0/1接口</span>nat outbound <span class="token number">2000</span> address<span class="token operator">-</span>group <span class="token number">1</span> no<span class="token operator">-</span>pat  <span class="token comment">//将acl 2000策略应用到该接口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拓扑图（动态NAT）"><a href="#拓扑图（动态NAT）" class="headerlink" title="拓扑图（动态NAT）"></a>拓扑图（动态NAT）</h3><p><img src="https://img-blog.csdnimg.cn/210a5e3865ae43dcb2f7a90a4f76043b.png"></p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>1.按照拓扑图搭建实验环境，从PC去Ping外网ip。可以看见64.1.1.1可以ping通，但是64.1.1.10超时。</p><p>原因：在PC发送报文时发现64.1.1.10和自己不在同一网段，就将数据包发给网关，网关发现64.1.1.1和64.1.1.10是直连路由，数据包就发送给1.10；但是R2作为公网路由器是没有去私网IP192.168.1.1的路由，所以无法将报文转发回来。</p><p>解决方法：Nat将内网192.168.1.1的IP转换为64.1的公网IP。</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 64.1.1.1Ping 64.1.1.1: 32 data bytes, Press Ctrl_C to breakFrom 64.1.1.1: bytes=32 seq=1 ttl=255 time=31 msFrom 64.1.1.1: bytes=32 seq=2 ttl=255 time=31 msFrom 64.1.1.1: bytes=32 seq=3 ttl=255 time=31 msFrom 64.1.1.1: bytes=32 seq=4 ttl=255 time=32 msFrom 64.1.1.1: bytes=32 seq=5 ttl=255 time=16 ms--- 64.1.1.1 ping statistics ---  5 packet(s) transmitted  5 packet(s) received  0.00% packet loss  round-trip min/avg/max = 16/28/32 msPC&gt;ping 64.1.1.10Ping 64.1.1.10: 32 data bytes, Press Ctrl_C to breakRequest timeout!Request timeout!Request timeout!Request timeout!Request timeout!--- 64.1.1.10 ping statistics ---  5 packet(s) transmitted  0 packet(s) received  100.00% packet loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看R2的路由表，可以看到没有192.168的路由只有64.1的路由</p><pre class="line-numbers language-none"><code class="language-none">[R2]dis ip routing-table Route Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations : 4        Routes : 4        Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface       64.1.1.0/24  Direct  0    0           D   64.1.1.10       GigabitEthernet0/0/0      64.1.1.10/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/0      127.0.0.0/8   Direct  0    0           D   127.0.0.1       InLoopBack0      127.0.0.1/32  Direct  0    0           D   127.0.0.1       InLoopBack0[R2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.用ACL定义那些数据包要进行数据转换</p><pre class="line-numbers language-none"><code class="language-none">[R1]acl 2000//创建序号2000的基础acl[R1-acl-basic-2000]rule 10 permit source 192.168.0.0 0.0.255.255//规则允许源IP为192.168.0.0的地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.创建NAT地址池</p><pre class="line-numbers language-none"><code class="language-none">[R1]nat address-group 1 64.1.1.2 64.1.1.6//创建nat地址池，编号为1，分配了从1.2到1.6的5个公网IP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.进入g0/0/1接口</p><pre class="line-numbers language-none"><code class="language-none">[R1-GigabitEthernet0/0/1]nat outbound 2000 address-group 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><img src="https://img-blog.csdnimg.cn/1488f9ae75c046aeac6ed7ffc7e85313.png"></li><li>NO-PAT 是不做端口转换，只作<a href="https://www.baidu.com/s?wd=IP%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao">IP地址转换</a>，也就是BASIC NAT 。而如果是NAPT的话，NO-PAT是不配置的。建议不要配置NO-PAT，不然同一个进程只能使用一个IP地址 </li></ul><p>5.现在就可以Ping通了</p><h3 id="拓扑图（静态NAT）"><a href="#拓扑图（静态NAT）" class="headerlink" title="拓扑图（静态NAT）"></a>拓扑图（静态NAT）</h3><p><img src="https://img-blog.csdnimg.cn/2f4d50eafcc64db6acf7338db762637a.png"></p><h3 id="实验步骤-1"><a href="#实验步骤-1" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>1.配置IP</p><p>2.在AR1上配置静态路由</p><pre class="line-numbers language-none"><code class="language-none">[R1]ip route-static 200.200.200.0 24 119.1.1.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.配置静态NAT</p><pre class="line-numbers language-none"><code class="language-none">[R1-GigabitEthernet0/0/1]nat static enable [R1-GigabitEthernet0/0/1]nat static global 119.1.1.123 inside 172.16.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.用外网客户端分别去Ping内网服务器的公网IP和私网IP，可以看到NAT分配的公网IP可以PING通，内网IP不可以</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 119.1.1.123Ping 119.1.1.123: 32 data bytes, Press Ctrl_C to breakRequest timeout!Request timeout!From 119.1.1.123: bytes=32 seq=3 ttl=126 time=15 msFrom 119.1.1.123: bytes=32 seq=4 ttl=126 time=16 msFrom 119.1.1.123: bytes=32 seq=5 ttl=126 time=15 ms--- 119.1.1.123 ping statistics ---  5 packet(s) transmitted  3 packet(s) received  40.00% packet loss  round-trip min/avg/max = 0/15/16 msPC&gt;ping 172.16.0.1Ping 172.16.0.1: 32 data bytes, Press Ctrl_C to breakRequest timeout!Request timeout!Request timeout!Request timeout!Request timeout!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NAT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp-ACL访问控制列表(一)</title>
      <link href="/2022-09-16-shi-yan-ensp-acl-fang-wen-kong-zhi-lie-biao-yi.html"/>
      <url>/2022-09-16-shi-yan-ensp-acl-fang-wen-kong-zhi-lie-biao-yi.html</url>
      
        <content type="html"><![CDATA[<h1 id="ACL访问控制列表-一"><a href="#ACL访问控制列表-一" class="headerlink" title="ACL访问控制列表(一)"></a><center>ACL访问控制列表(一)</center></h1><h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><p>通过ACL访问控制，Vlan10 可以访问Vlan20，但Vlan10不能访问Vlan30</p><h4 id="ACL步骤："><a href="#ACL步骤：" class="headerlink" title="ACL步骤："></a>ACL步骤：</h4><p>1.创建一个访问控制规则</p><p>2.调用这个规则</p><h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><img src="https://img-blog.csdnimg.cn/989e874c66354ecfa85dbecc66ffe234.png"></p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a><strong>实验步骤</strong></h3><p>1.按照拓扑搭建实验环境，为PC配置好IP地址</p><p>2.在LSW1上创建VLAN 10、20、30</p><pre class="line-numbers language-none"><code class="language-none">[LSW1]vlan 10[LSW1-vlan10]vlan 20[LSW1-vlan20]vlan 30[LSW1-vlan30]q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.在LSW1上给各个接口划分vlan</p><pre class="line-numbers language-none"><code class="language-none">[LSW1]int g0/0/1[LSW1-GigabitEthernet0/0/1]port link-type access [LSW1-GigabitEthernet0/0/1]port default  vlan 10[LSW1-GigabitEthernet0/0/1]dis this#interface GigabitEthernet0/0/1 port link-type access port default vlan 10#return[LSW1-GigabitEthernet0/0/1]int g0/0/2[LSW1-GigabitEthernet0/0/2]port link-type access [LSW1-GigabitEthernet0/0/2]port default vlan 20[LSW1-GigabitEthernet0/0/2]dis th#interface GigabitEthernet0/0/2 port link-type access port default vlan 20#return[LSW1-GigabitEthernet0/0/2]int g0/0/3[LSW1-GigabitEthernet0/0/3]port link-type access [LSW1-GigabitEthernet0/0/3]port de[LSW1-GigabitEthernet0/0/3]port default vlan 30[LSW1-GigabitEthernet0/0/3]dis th#interface GigabitEthernet0/0/3 port link-type access port default vlan 30#return[LSW1-GigabitEthernet0/0/3]int g0/0/4[LSW1-GigabitEthernet0/0/4][LSW1-GigabitEthernet0/0/4]port link-type trunk [LSW1-GigabitEthernet0/0/4]port trunk allow-pass vlan all [LSW1-GigabitEthernet0/0/4]dis th#interface GigabitEthernet0/0/4 port link-type trunk port trunk allow-pass vlan 2 to 4094#return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.dis vlan查看是否配置成功</p><pre class="line-numbers language-none"><code class="language-none">[LSW1]dis vlanThe total number of vlans is : 4--------------------------------------------------------------------------------U: Up;         D: Down;         TG: Tagged;         UT: Untagged;MP: Vlan-mapping;               ST: Vlan-stacking;#: ProtocolTransparent-vlan;    *: Management-vlan;--------------------------------------------------------------------------------VID  Type    Ports                                                          --------------------------------------------------------------------------------1    common  UT:GE0/0/4(U)      GE0/0/5(D)      GE0/0/6(D)      GE0/0/7(D)                      GE0/0/8(D)      GE0/0/9(D)      GE0/0/10(D)     GE0/0/11(D)                     GE0/0/12(D)     GE0/0/13(D)     GE0/0/14(D)     GE0/0/15(D)                     GE0/0/16(D)     GE0/0/17(D)     GE0/0/18(D)     GE0/0/19(D)                     GE0/0/20(D)     GE0/0/21(D)     GE0/0/22(D)     GE0/0/23(D)                     GE0/0/24(D)                                                     10   common  UT:GE0/0/1(U)                                                                   TG:GE0/0/4(U)                                                      20   common  UT:GE0/0/2(U)                                                                   TG:GE0/0/4(U)                                                      30   common  UT:GE0/0/3(U)                                                                   TG:GE0/0/4(U)                                                      VID  Status  Property      MAC-LRN Statistics Description      --------------------------------------------------------------------------------1    enable  default       enable  disable    VLAN 0001                         10   enable  default       enable  disable    VLAN 0010                         20   enable  default       enable  disable    VLAN 0020                         30   enable  default       enable  disable    VLAN 0030 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.在LSW2三层交换机上配置</p><pre class="line-numbers language-none"><code class="language-none">[LSW2]vlan 10[LSW2-vlan10]vlan 20[LSW2-vlan20]vlan 30[LSW2-vlan30]q[LSW2][LSW2]int g0/0/1[LSW2-GigabitEthernet0/0/1]port link-type trunk[LSW2-GigabitEthernet0/0/1]port trunk allow-pass vlan all[LSW2]int vlan 10[LSW2-Vlanif10]ip add 192.168.10.254 24[LSW2-Vlanif10]int vlan 20[LSW2-Vlanif20]ip add 192.168.20.254 24[LSW2-Vlanif20]int vlan 30[LSW2-Vlanif30]ip address 192.168.30.254 24[LSW2-Vlanif30]q[LSW2]dis vlanThe total number of vlans is : 4--------------------------------------------------------------------------------U: Up;         D: Down;         TG: Tagged;         UT: Untagged;MP: Vlan-mapping;               ST: Vlan-stacking;#: ProtocolTransparent-vlan;    *: Management-vlan;--------------------------------------------------------------------------------VID  Type    Ports                                                          --------------------------------------------------------------------------------1    common  UT:GE0/0/1(U)      GE0/0/2(D)      GE0/0/3(D)      GE0/0/4(D)                      GE0/0/5(D)      GE0/0/6(D)      GE0/0/7(D)      GE0/0/8(D)                      GE0/0/9(D)      GE0/0/10(D)     GE0/0/11(D)     GE0/0/12(D)                     GE0/0/13(D)     GE0/0/14(D)     GE0/0/15(D)     GE0/0/16(D)                     GE0/0/17(D)     GE0/0/18(D)     GE0/0/19(D)     GE0/0/20(D)                     GE0/0/21(D)     GE0/0/22(D)     GE0/0/23(D)     GE0/0/24(D)     10   common  20   common  30   common  VID  Status  Property      MAC-LRN Statistics Description      --------------------------------------------------------------------------------1    enable  default       enable  disable    VLAN 0001                         10   enable  default       enable  disable    VLAN 0010                         20   enable  default       enable  disable    VLAN 0020                         30   enable  default       enable  disable    VLAN 0030  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.相互Ping，现在三台PC都可以相互Ping通</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 192.168.30.1Ping 192.168.30.1: 32 data bytes, Press Ctrl_C to breakFrom 192.168.30.1: bytes=32 seq=1 ttl=127 time=234 msFrom 192.168.30.1: bytes=32 seq=2 ttl=127 time=156 msFrom 192.168.30.1: bytes=32 seq=3 ttl=127 time=172 msFrom 192.168.30.1: bytes=32 seq=4 ttl=127 time=141 msFrom 192.168.30.1: bytes=32 seq=5 ttl=127 time=171 ms--- 192.168.30.1 ping statistics ---  5 packet(s) transmitted  5 packet(s) received  0.00% packet loss  round-trip min/avg/max = 141/174/234 msPC&gt;ping 192.168.20.1Ping 192.168.20.1: 32 data bytes, Press Ctrl_C to breakFrom 192.168.20.1: bytes=32 seq=1 ttl=127 time=265 msFrom 192.168.20.1: bytes=32 seq=2 ttl=127 time=156 msFrom 192.168.20.1: bytes=32 seq=3 ttl=127 time=172 msFrom 192.168.20.1: bytes=32 seq=4 ttl=127 time=171 msFrom 192.168.20.1: bytes=32 seq=5 ttl=127 time=156 ms--- 192.168.20.1 ping statistics ---  5 packet(s) transmitted  5 packet(s) received  0.00% packet loss  round-trip min/avg/max = 156/184/265 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建ACL"><a href="#创建ACL" class="headerlink" title="创建ACL"></a><strong>创建ACL</strong></h3><p>ACL分类</p><pre class="line-numbers language-none"><code class="language-none">advanceAdvance ACL(相较于基本 ACL，高级 ACL 提供更高的扩展性，可以对流量进行更精细的匹配。通过配置高级 ACL，可以阻止特定主机或者整个网段的源或者目标。)basicBasic ACL(基本 ACL 规则只包含源 IP 地址，对设备的 CPU 消耗较少，可用于简单的部署，但是使用场景有限，不能提供强大的安全保障。)linkLink ACL(使用二层 ACL，可以根据源 MAC 地址、目的 MAC 地址、802.1p 优先级、二层协议类型等二层信息对流量进行管控。)userUSer ACL(用户 ACL 在高级 ACL 的基础上增加了用户组的配置项，可以实现对不同用户组的流量管控。)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>1.在LSW2三层交换机进入ACL,创建vlan 10 不能访问 vlan 30的规则</p><pre class="line-numbers language-none"><code class="language-none">[LSW2]acl name test advance //选择打开高级ACL 名字为test[LSW2-acl-adv-test]rule deny ip source 192.168.10.0 0.0.0.255 destination 192.168.30.0 0.0.0.255//添加规则 拒绝10.0的ip访问30.0，注意这里的语法要求子网掩码反写[LSW2-acl-adv-test]rule permit ip source  any destination any //允许其他网段相互访问[LSW2-acl-adv-test]dis th#acl name test 3999 rule 5 deny ip source 192.168.10.0 0.0.0.255 destination 192.168.30.0 0.0.0.255 rule 10 permit ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在接口g0/0/1中调用这一名叫test的ACL过滤规则</p><pre class="line-numbers language-none"><code class="language-none">[LSW2]int g0/0/1[LSW2-GigabitEthernet0/0/1]traffic-filter inbound acl name test//调用过滤规则<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.10.0   Ping     30.0</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 192.168.30.1Ping 192.168.30.1: 32 data bytes, Press Ctrl_C to breakRequest timeout!Request timeout!Request timeout!Request timeout!Request timeout!--- 192.168.30.1 ping statistics ---  5 packet(s) transmitted  0 packet(s) received  100.00% packet loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp-三层交换机&amp;单臂路由实验</title>
      <link href="/2022-09-15-shi-yan-ensp-san-ceng-jiao-huan-ji-dan-bi-lu-you-shi-yan.html"/>
      <url>/2022-09-15-shi-yan-ensp-san-ceng-jiao-huan-ji-dan-bi-lu-you-shi-yan.html</url>
      
        <content type="html"><![CDATA[<h1 id="三层交换机-amp-单臂路由实验"><a href="#三层交换机-amp-单臂路由实验" class="headerlink" title="三层交换机&amp;单臂路由实验"></a><center>三层交换机&amp;单臂路由实验</center></h1><h3 id="拓扑图1"><a href="#拓扑图1" class="headerlink" title="拓扑图1"></a>拓扑图1</h3><p><img src="https://img-blog.csdnimg.cn/8e262fdd24ec4cfeb221ad1444d8b10c.png"></p><h3 id="实验步骤（三层交换机）"><a href="#实验步骤（三层交换机）" class="headerlink" title="实验步骤（三层交换机）"></a><strong>实验步骤</strong>（三层交换机）</h3><p>1.按照拓扑搭建实验</p><p><img src="https://img-blog.csdnimg.cn/3e43efd4c3574a5990da2e0928ea2b9d.png"></p><p>2.在底下的二层交换机配置,首先创建vlan10和vlan20</p><pre class="line-numbers language-none"><code class="language-none">[LSW2]vlan 10[LSW2-vlan10]vlan 20[LSW2-vlan10][LSW2-vlan20]q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.给各接口配置vlan</p><pre class="line-numbers language-none"><code class="language-none">[LSW2]int g0/0/1[LSW2-GigabitEthernet0/0/1]port link-type access [LSW2-GigabitEthernet0/0/1]port default vlan 10[LSW2-GigabitEthernet0/0/1]int g0/0/2[LSW2-GigabitEthernet0/0/2]port link-type access [LSW2-GigabitEthernet0/0/2]port default vlan 20[LSW2-GigabitEthernet0/0/2]int g0/0/3[LSW2-GigabitEthernet0/0/3]port link-type trunk [LSW2-GigabitEthernet0/0/3]port trunk allow-pass vlan all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.在三层交换机进行配置</p><pre class="line-numbers language-none"><code class="language-none">[LSW3]vlan 10[LSW3-vlan10]vlan 20[LSW3-vlan20]q[LSW3]int g0/0/1[LSW3-GigabitEthernet0/0/1]port link-type trunk [LSW3-GigabitEthernet0/0/1]port trunk allow-pass vlan all [LSW3-GigabitEthernet0/0/1]q[LSW3]int vlan10[LSW3-Vlanif10]ip address 1.1.1.254 24[LSW3-Vlanif10]int vlanif 20[LSW3-Vlanif20]ip address 2.2.2.254 24[LSW3-Vlanif20]q[LSW3]dis vlanThe total number of vlans is : 3--------------------------------------------------------------------------------U: Up;         D: Down;         TG: Tagged;         UT: Untagged;MP: Vlan-mapping;               ST: Vlan-stacking;#: ProtocolTransparent-vlan;    *: Management-vlan;--------------------------------------------------------------------------------VID  Type    Ports                                                          --------------------------------------------------------------------------------1    common  UT:GE0/0/1(U)      GE0/0/2(D)      GE0/0/3(D)      GE0/0/4(D)                      GE0/0/5(D)      GE0/0/6(D)      GE0/0/7(D)      GE0/0/8(D)                      GE0/0/9(D)      GE0/0/10(D)     GE0/0/11(D)     GE0/0/12(D)                     GE0/0/13(D)     GE0/0/14(D)     GE0/0/15(D)     GE0/0/16(D)                     GE0/0/17(D)     GE0/0/18(D)     GE0/0/19(D)     GE0/0/20(D)                     GE0/0/21(D)     GE0/0/22(D)     GE0/0/23(D)     GE0/0/24(D)     10   common  TG:GE0/0/1(U)                                                      20   common  TG:GE0/0/1(U)                                                      VID  Status  Property      MAC-LRN Statistics Description      --------------------------------------------------------------------------------1    enable  default       enable  disable    VLAN 0001                         10   enable  default       enable  disable    VLAN 0010                         20   enable  default       enable  disable    VLAN 0020<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.ping</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 2.2.2.254Ping 2.2.2.254: 32 data bytes, Press Ctrl_C to breakFrom 2.2.2.254: bytes=32 seq=1 ttl=255 time=94 msFrom 2.2.2.254: bytes=32 seq=2 ttl=255 time=47 msFrom 2.2.2.254: bytes=32 seq=3 ttl=255 time=31 msFrom 2.2.2.254: bytes=32 seq=4 ttl=255 time=46 msFrom 2.2.2.254: bytes=32 seq=5 ttl=255 time=63 ms--- 2.2.2.254 ping statistics ---  5 packet(s) transmitted  5 packet(s) received  0.00% packet loss  round-trip min/avg/max = 31/56/94 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拓扑图2（单臂路由）"><a href="#拓扑图2（单臂路由）" class="headerlink" title="拓扑图2（单臂路由）"></a><strong>拓扑图2（单臂路由）</strong></h3><p><img src="https://img-blog.csdnimg.cn/716b0b03079f48e3bc9bea952b0b83d3.png"></p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>1.按照拓扑图进行ip配置</p><p>2.在交换机的各个接口配置vlan</p><pre class="line-numbers language-none"><code class="language-none">[LSW]vlan 10[LSW-vlan10]vlan 20//创建vlan 10和vlan 20[LSW-vlan20]q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[LSW]int g0/0/1[LSW-GigabitEthernet0/0/1]port link-type access [LSW-GigabitEthernet0/0/1]port default vlan 10[LSW-GigabitEthernet0/0/1]int g0/0/2[LSW-GigabitEthernet0/0/2]port link-type access [LSW-GigabitEthernet0/0/2]port default vlan 20[LSW-GigabitEthernet0/0/2]int g0/0/3[LSW-GigabitEthernet0/0/3]port link-type trunk [LSW-GigabitEthernet0/0/3]port trunk allow-pass vlan all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.配置路由器：首先使用<font color="red"><em><strong>int g0/0/0.10</strong></em></font>和<font color="red">*** int g0/0/0.20***</font>将路由器的g0/0/0口分为两个<font color="red"><em><strong>子接口</strong></em></font>，每个子接口对应一个vlan（单臂路由的定义）</p><pre class="line-numbers language-none"><code class="language-none">[R1]int g0/0/0.10[R1-GigabitEthernet0/0/0.10]dot1q termination  vid 10//指定这个子接口和哪个vlan相关联，vid后跟的就是vlan号[R1-GigabitEthernet0/0/0.10]arp broadcast enable //允许arp广播[R1-GigabitEthernet0/0/0.10]ip address 1.1.1.254 24//配置IP地址，同时也是vlan10的网关<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.display this查看该接口下配置的命令是否正确</p><pre class="line-numbers language-none"><code class="language-none">[R1-GigabitEthernet0/0/0.10]dis this#interface GigabitEthernet0/0/0.10 dot1q termination vid 10 ip address 1.1.1.254 255.255.255.0 arp broadcast enable#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.同理，配置g0/0/0.20子接口的命令</p><pre class="line-numbers language-none"><code class="language-none">[R1-GigabitEthernet0/0/0.20]dot1q termination vid 20[R1-GigabitEthernet0/0/0.20]arp broadcast enable [R1-GigabitEthernet0/0/0.20]ip add[R1-GigabitEthernet0/0/0.20]ip address 2.2.2.254 24[R1-GigabitEthernet0/0/0.20]display this#interface GigabitEthernet0/0/0.20 dot1q termination vid 20 ip address 2.2.2.254 255.255.255.0 arp broadcast enable#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.Ping</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 2.2.2.1Ping 2.2.2.1: 32 data bytes, Press Ctrl_C to breakFrom 1.1.1.1: Destination host unreachableFrom 2.2.2.1: bytes=32 seq=1 ttl=127 time=297 msFrom 2.2.2.1: bytes=32 seq=2 ttl=127 time=94 msFrom 2.2.2.1: bytes=32 seq=3 ttl=127 time=78 msFrom 2.2.2.1: bytes=32 seq=4 ttl=127 time=78 msFrom 2.2.2.1: bytes=32 seq=5 ttl=127 time=78 ms--- 2.2.2.1 ping statistics ---  5 packet(s) transmitted  5 packet(s) received  0.00% packet loss  round-trip min/avg/max = 78/125/297 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单臂路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp-VLAN实验</title>
      <link href="/2022-09-15-shi-yan-ensp-vlan-shi-yan.html"/>
      <url>/2022-09-15-shi-yan-ensp-vlan-shi-yan.html</url>
      
        <content type="html"><![CDATA[<h1 id="VLAN实验"><a href="#VLAN实验" class="headerlink" title="VLAN实验"></a><center>VLAN实验</center></h1><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a><strong>知识点</strong></h3><p>交换机的接口模式：</p><ul><li><p>Access：用来连接终端，电脑，打印机</p></li><li><p>Trunk：用来连接其他的交换机</p></li></ul><h3 id="拓扑图1"><a href="#拓扑图1" class="headerlink" title="拓扑图1"></a>拓扑图1</h3><p><img src="https://img-blog.csdnimg.cn/06ec646728fe4808b7f58d391ecb9e58.png"></p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>1.按照拓扑图配置</p><p>2.用PC1去Ping PC2，是通的。</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 1.1.1.2Ping 1.1.1.2: 32 data bytes, Press Ctrl_C to breakFrom 1.1.1.2: bytes=32 seq=1 ttl=128 time=47 msFrom 1.1.1.2: bytes=32 seq=2 ttl=128 time=47 msFrom 1.1.1.2: bytes=32 seq=3 ttl=128 time=47 msFrom 1.1.1.2: bytes=32 seq=4 ttl=128 time=31 msFrom 1.1.1.2: bytes=32 seq=5 ttl=128 time=46 ms--- 1.1.1.2 ping statistics ---  5 packet(s) transmitted  5 packet(s) received  0.00% packet loss  round-trip min/avg/max = 31/43/47 msPC&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.创建VLAN10和VLAN20</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]vlan 10[Huawei-vlan10]q[Huawei]vlan 20[Huawei-vlan20]q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.查看VLAN是否创建成功</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]disp vlanThe total number of vlans is : 3--------------------------------------------------------------------------------U: Up;         D: Down;         TG: Tagged;         UT: Untagged;MP: Vlan-mapping;               ST: Vlan-stacking;#: ProtocolTransparent-vlan;    *: Management-vlan;--------------------------------------------------------------------------------VID  Type    Ports                                                          --------------------------------------------------------------------------------1    common  UT:GE0/0/1(U)      GE0/0/2(U)      GE0/0/3(D)      GE0/0/4(D)                      GE0/0/5(D)      GE0/0/6(D)      GE0/0/7(D)      GE0/0/8(D)                      GE0/0/9(D)      GE0/0/10(D)     GE0/0/11(D)     GE0/0/12(D)                     GE0/0/13(D)     GE0/0/14(D)     GE0/0/15(D)     GE0/0/16(D)                     GE0/0/17(D)     GE0/0/18(D)     GE0/0/19(D)     GE0/0/20(D)                     GE0/0/21(D)     GE0/0/22(D)     GE0/0/23(D)     GE0/0/24(D)     10   common  20   common  VID  Status  Property      MAC-LRN Statistics Description      --------------------------------------------------------------------------------1    enable  default       enable  disable    VLAN 0001                         10   enable  default       enable  disable    VLAN 0010                         20   enable  default       enable  disable    VLAN 0020   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.进入g0/0/1接口视图，将接口类型设置为access,将该接口划分到VLAN 10</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]int g0/0/1[Huawei-GigabitEthernet0/0/1]port link-type access [Huawei-GigabitEthernet0/0/1]port default vlan 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>6.同样使用display vlan查看配置是否成功，可以看到g0/0/1口已经被划分到vlan10</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]dis vlanThe total number of vlans is : 3--------------------------------------------------------------------------------U: Up;         D: Down;         TG: Tagged;         UT: Untagged;MP: Vlan-mapping;               ST: Vlan-stacking;#: ProtocolTransparent-vlan;    *: Management-vlan;--------------------------------------------------------------------------------VID  Type    Ports                                                          --------------------------------------------------------------------------------1    common  UT:GE0/0/2(U)      GE0/0/3(D)      GE0/0/4(D)      GE0/0/5(D)                      GE0/0/6(D)      GE0/0/7(D)      GE0/0/8(D)      GE0/0/9(D)                      GE0/0/10(D)     GE0/0/11(D)     GE0/0/12(D)     GE0/0/13(D)                     GE0/0/14(D)     GE0/0/15(D)     GE0/0/16(D)     GE0/0/17(D)                     GE0/0/18(D)     GE0/0/19(D)     GE0/0/20(D)     GE0/0/21(D)                     GE0/0/22(D)     GE0/0/23(D)     GE0/0/24(D)                     10   common  UT:GE0/0/1(U)                                                      20   common  VID  Status  Property      MAC-LRN Statistics Description      --------------------------------------------------------------------------------1    enable  default       enable  disable    VLAN 0001                         10   enable  default       enable  disable    VLAN 0010                         20   enable  default       enable  disable    VLAN 0020     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.同样将g0/0/2口放入vlan20</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]int g0/0/2[Huawei-GigabitEthernet0/0/2]port link-type access [Huawei-GigabitEthernet0/0/2]port default vlan 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>8.dis vlan</p><pre class="line-numbers language-none"><code class="language-none">VID  Type    Ports                                                          --------------------------------------------------------------------------------1    common  UT:GE0/0/3(D)      GE0/0/4(D)      GE0/0/5(D)      GE0/0/6(D)                      GE0/0/7(D)      GE0/0/8(D)      GE0/0/9(D)      GE0/0/10(D)                     GE0/0/11(D)     GE0/0/12(D)     GE0/0/13(D)     GE0/0/14(D)                     GE0/0/15(D)     GE0/0/16(D)     GE0/0/17(D)     GE0/0/18(D)                     GE0/0/19(D)     GE0/0/20(D)     GE0/0/21(D)     GE0/0/22(D)                     GE0/0/23(D)     GE0/0/24(D)                                     10   common  UT:GE0/0/1(U)                                                      20   common  UT:GE0/0/2(U)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9.从PC1   Ping    PC2</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 1.1.1.2Ping 1.1.1.2: 32 data bytes, Press Ctrl_C to breakFrom 1.1.1.1: Destination host unreachableFrom 1.1.1.1: Destination host unreachableFrom 1.1.1.1: Destination host unreachableFrom 1.1.1.1: Destination host unreachableFrom 1.1.1.1: Destination host unreachable--- 1.1.1.2 ping statistics ---  5 packet(s) transmitted  0 packet(s) received  100.00% packet loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拓扑图2"><a href="#拓扑图2" class="headerlink" title="拓扑图2"></a>拓扑图2</h3><p><img src="https://img-blog.csdnimg.cn/0ec2ce16bffc42ee80086f1f6f88f7a8.png"></p><h3 id="实验步骤-1"><a href="#实验步骤-1" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>1.将PC3和PC4都划分到vlan10和vlan20中</p><pre class="line-numbers language-none"><code class="language-none">[LSW2]int g0/0/2[LSW2-GigabitEthernet0/0/2]port link-type access [LSW2-GigabitEthernet0/0/2]port default vlan 10[LSW2-GigabitEthernet0/0/2]int g0/0/3[LSW2-GigabitEthernet0/0/3]port link-type access[LSW2-GigabitEthernet0/0/3]port default vlan 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.查看dis vlan，已经成功划分好vlan</p><pre class="line-numbers language-none"><code class="language-none">The total number of vlans is : 3--------------------------------------------------------------------------------U: Up;         D: Down;         TG: Tagged;         UT: Untagged;MP: Vlan-mapping;               ST: Vlan-stacking;#: ProtocolTransparent-vlan;    *: Management-vlan;--------------------------------------------------------------------------------VID  Type    Ports                                                          --------------------------------------------------------------------------------1    common  UT:GE0/0/1(U)      GE0/0/4(D)      GE0/0/5(D)      GE0/0/6(D)                      GE0/0/7(D)      GE0/0/8(D)      GE0/0/9(D)      GE0/0/10(D)                     GE0/0/11(D)     GE0/0/12(D)     GE0/0/13(D)     GE0/0/14(D)                     GE0/0/15(D)     GE0/0/16(D)     GE0/0/17(D)     GE0/0/18(D)                     GE0/0/19(D)     GE0/0/20(D)     GE0/0/21(D)     GE0/0/22(D)                     GE0/0/23(D)     GE0/0/24(D)                                     10   common  UT:GE0/0/2(U)                                                      20   common  UT:GE0/0/3(U)                                                      VID  Status  Property      MAC-LRN Statistics Description      --------------------------------------------------------------------------------1    enable  default       enable  disable    VLAN 0001                         10   enable  default       enable  disable    VLAN 0010                         20   enable  default       enable  disable    VLAN 0020 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.尝试ping不通，是因为交换机之间还没有配置trunk</p><pre class="line-numbers language-none"><code class="language-none">[LSw1]int g0/0/3[LSw1-GigabitEthernet0/0/3]port link-type trunk [LSw1-GigabitEthernet0/0/3]port trunk allow-pass vlan 10[LSw1-GigabitEthernet0/0/3]port trunk allow-pass vlan 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[LSW2]int g0/0/1[LSW2-GigabitEthernet0/0/1]port link-type trunk [LSW2-GigabitEthernet0/0/1]port trunk allow-pass vlan 10[LSW2-GigabitEthernet0/0/1]port trunk allow-pass vlan 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.尝试在相同Vlan和不同VLAN之间Ping</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 1.1.1.3Ping 1.1.1.3: 32 data bytes, Press Ctrl_C to breakFrom 1.1.1.3: bytes=32 seq=1 ttl=128 time=63 msFrom 1.1.1.3: bytes=32 seq=2 ttl=128 time=47 msFrom 1.1.1.3: bytes=32 seq=3 ttl=128 time=78 msFrom 1.1.1.3: bytes=32 seq=4 ttl=128 time=78 msFrom 1.1.1.3: bytes=32 seq=5 ttl=128 time=78 ms--- 1.1.1.3 ping statistics ---  5 packet(s) transmitted  5 packet(s) received  0.00% packet loss  round-trip min/avg/max = 47/68/78 msPC&gt;ping 1.1.1.4Ping 1.1.1.4: 32 data bytes, Press Ctrl_C to breakFrom 1.1.1.1: Destination host unreachableFrom 1.1.1.1: Destination host unreachableFrom 1.1.1.1: Destination host unreachableFrom 1.1.1.1: Destination host unreachableFrom 1.1.1.1: Destination host unreachable--- 1.1.1.4 ping statistics ---  5 packet(s) transmitted  0 packet(s) received  100.00% packet loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VLAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp-静态路由实验</title>
      <link href="/2022-09-15-shi-yan-ensp-jing-tai-lu-you-shi-yan.html"/>
      <url>/2022-09-15-shi-yan-ensp-jing-tai-lu-you-shi-yan.html</url>
      
        <content type="html"><![CDATA[<h1 id="静态路由实验"><a href="#静态路由实验" class="headerlink" title="静态路由实验"></a><center>静态路由实验</center></h1><h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><img src="https://img-blog.csdnimg.cn/43335bd68e2546bfaa65f613e27a465f.png"></p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>1.按照拓扑完成配置</p><p>2.查看R1的路由表,可以看到1.0网段没有和3.0网段的直连路由，无法ping通</p><pre class="line-numbers language-none"><code class="language-none">[RTA]dis ip routing-tableRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations : 6        Routes : 6        Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface      127.0.0.0/8   Direct  0    0           D   127.0.0.1       InLoopBack0      127.0.0.1/32  Direct  0    0           D   127.0.0.1       InLoopBack0    192.168.1.0/24  Direct  0    0           D   192.168.1.10    GigabitEthernet0/0/0   192.168.1.10/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/0    192.168.2.0/24  Direct  0    0           D   192.168.2.1     GigabitEthernet0/0/1    192.168.2.1/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.给R1添加静态路由</p><pre class="line-numbers language-none"><code class="language-none">[RTA]ip route-static 192.168.3.0 24 192.168.2.10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.再次查看路由表</p><pre class="line-numbers language-none"><code class="language-none">[RTA]dis ip routing-tableRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations : 7        Routes : 7        Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface      127.0.0.0/8   Direct  0    0           D   127.0.0.1       InLoopBack0      127.0.0.1/32  Direct  0    0           D   127.0.0.1       InLoopBack0    192.168.1.0/24  Direct  0    0           D   192.168.1.10    GigabitEthernet0/0/0   192.168.1.10/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/0    192.168.2.0/24  Direct  0    0           D   192.168.2.1     GigabitEthernet0/0/1    192.168.2.1/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/1    192.168.3.0/24  Static  60   0          RD   192.168.2.10    GigabitEthernet0/0/1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="#dd0000">在实际工作中可能会遇到成百上千条路由表，这个时候就可以在display ip routing-table命令后加上目标ip，快速查看是否存在该路由。</font></p><pre class="line-numbers language-none"><code class="language-none">[RTA]dis ip routing-table 192.168.3.1Route Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Table : PublicSummary Count : 1Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface    192.168.3.0/24  Static  60   0          RD   192.168.2.10    GigabitEthernet0/0/1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.尝试充主机A去Ping服务器，发现还是无法ping成功；只是因为我们只在R1里配置了数据包发送时的路由，回来的路由还没有配置。所以需要在R2上同样配置静态路由。</p><pre class="line-numbers language-none"><code class="language-none">[RTB]ip route-static 192.168.1.0 24 192.168.2.1[RTB]dis ip routing-tableRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations : 7        Routes : 7        Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface      127.0.0.0/8   Direct  0    0           D   127.0.0.1       InLoopBack0      127.0.0.1/32  Direct  0    0           D   127.0.0.1       InLoopBack0    192.168.1.0/24  Static  60   0          RD   192.168.2.1     GigabitEthernet0/0/0    192.168.2.0/24  Direct  0    0           D   192.168.2.10    GigabitEthernet0/0/0   192.168.2.10/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/0    192.168.3.0/24  Direct  0    0           D   192.168.3.1     GigabitEthernet0/0/1    192.168.3.1/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/1[RTB]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.最后Ping成功</p><p><img src="https://img-blog.csdnimg.cn/68e12daeb0b44c158f25705e118a66e5.png"></p>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp-DHCP以及DNS域名解析配置实验</title>
      <link href="/2022-09-15-shi-yan-ensp-dhcp-yi-ji-dns-yu-ming-jie-xi-pei-zhi-shi-yan.html"/>
      <url>/2022-09-15-shi-yan-ensp-dhcp-yi-ji-dns-yu-ming-jie-xi-pei-zhi-shi-yan.html</url>
      
        <content type="html"><![CDATA[<h1 id="DHCP以及DNS域名解析配置实验"><a href="#DHCP以及DNS域名解析配置实验" class="headerlink" title="DHCP以及DNS域名解析配置实验"></a><center>DHCP以及DNS域名解析配置实验</center></h1><h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><img src="https://img-blog.csdnimg.cn/68b6961dd7ee4398a116d816b6eefb01.png"></p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><h4 id="DHCP配置"><a href="#DHCP配置" class="headerlink" title="DHCP配置"></a><strong>DHCP配置</strong></h4><p>1.为路由器配置IP地址</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;sys[Huawei]sysname RTA[RTA]int g0/0/0[RTA-GigabitEthernet0/0/0]ip address 192.168.1.1 24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.将PC设置为DHCP获取IP</p><p><img src="https://img-blog.csdnimg.cn/ae4c6263fab84e9f8527d30626828389.png"></p><p>3.打开路由器DHCP服务</p><pre class="line-numbers language-none"><code class="language-none">[RTA]dhcp enable[RTA]int g0/0/0[RTA-GigabitEthernet0/0/0]dhcp select interface <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.使用ipconfig查看PC是否被分配ip</p><p><img src="https://img-blog.csdnimg.cn/b9636bec1e824fc8ae3d5c079f8c10d7.png"></p><p>5.查看网络连通性</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping 192.168.1.1Ping 192.168.1.1: 32 data bytes, Press Ctrl_C to breakFrom 192.168.1.1: bytes=32 seq=1 ttl=255 time=78 msFrom 192.168.1.1: bytes=32 seq=2 ttl=255 time=78 msFrom 192.168.1.1: bytes=32 seq=3 ttl=255 time=79 msFrom 192.168.1.1: bytes=32 seq=4 ttl=255 time=46 msFrom 192.168.1.1: bytes=32 seq=5 ttl=255 time=63 ms--- 192.168.1.1 ping statistics ---  5 packet(s) transmitted  5 packet(s) received  0.00% packet loss  round-trip min/avg/max = 46/68/79 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DNS域名解析配置"><a href="#DNS域名解析配置" class="headerlink" title="DNS域名解析配置"></a><strong>DNS域名解析配置</strong></h4><ol><li><em>电脑开机，通过dhcp 获取ip地址</em></li><li><em>电脑输入域名，<a href="http://www.baidu.com/">www.baidu.com</a></em></li><li><em>电脑把<a href="http://www.baidu.com发到自己的dns服务器/">www.baidu.com发到自己的dns服务器</a></em> </li><li><em>dns服务器把域名解析成对应的ip地址</em></li><li><em>电脑向百度服务器发送一个请求</em></li></ol><p>1.在DNS Server内添加域名以及对应的ip地址，通过DNS服务器，实现域名解析，将网址转换为对应的ip地址，添加完IP地址别忘记<strong>启动</strong>DNSServer</p><p><img src="https://img-blog.csdnimg.cn/078435616b2b49c695fd6f76c7f87256.png"></p><p>2.给DNS Server配置IP地址</p><p><img src="https://img-blog.csdnimg.cn/5db7c9bead3448f080f8d50914fa90a5.png"></p><p>3.注意这时候在PC使用ipconfig看到的内容里是没有DNS的</p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ipconfigLink local IPv6 address...........: fe80::5689:98ff:fe65:3b03IPv6 address......................: :: / 128IPv6 gateway......................: ::IPv4 address......................: 192.168.1.252Subnet mask.......................: 255.255.255.0Gateway...........................: 192.168.1.1Physical address..................: 54-89-98-65-3B-03DNS server........................:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.需要再次进入RTA的G0/0/0的接口视图下进行配置</p><pre class="line-numbers language-none"><code class="language-none">[RTA]int g0/0/0[RTA-GigabitEthernet0/0/0]dhcp server dns-list 192.168.1.100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.再次查看ipconfig</p><p><img src="https://img-blog.csdnimg.cn/0bb241955649478fa3b1fde1391db95a.png"></p><p>6.通过ping <a href="http://www.bilibili.com,可以看到域名已经被解析为ip地址且能够ping通/">www.bilibili.com,可以看到域名已经被解析为ip地址且能够ping通</a></p><pre class="line-numbers language-none"><code class="language-none">PC&gt;ping www.bilibili.comPing www.bilibili.com [192.168.1.200]: 32 data bytes, Press Ctrl_C to breakFrom 192.168.1.252: Destination host unreachableFrom 192.168.1.252: Destination host unreachableFrom 192.168.1.252: Destination host unreachableFrom 192.168.1.252: Destination host unreachableFrom 192.168.1.252: Destination host unreachable--- 192.168.1.200 ping statistics ---  5 packet(s) transmitted  0 packet(s) received  100.00% packet loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.网关是该区域网络的出口</p><pre class="line-numbers language-none"><code class="language-none">查看路由表，[RTA]display  ip routing-tableRoute Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Tables: Public         Destinations : 6        Routes : 6        Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface  100.100.100.0/24  Direct  0    0           D   100.100.100.1   Ethernet0/0/0  100.100.100.1/32  Direct  0    0           D   127.0.0.1       Ethernet0/0/0      127.0.0.0/8   Direct  0    0           D   127.0.0.1       InLoopBack0      127.0.0.1/32  Direct  0    0           D   127.0.0.1       InLoopBack0    192.168.1.0/24  Direct  0    0           D   192.168.1.1     GigabitEthernet0/0/0    192.168.1.1/32  Direct  0    0           D   127.0.0.1       GigabitEthernet0/0/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">以及查看对应ip的路由信息[RTA]display ip routing-table 100.100.100.100Route Flags: R - relay, D - download to fib------------------------------------------------------------------------------Routing Table : PublicSummary Count : 1Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface  100.100.100.0/24  Direct  0    0           D   100.100.100.1   Ethernet0/0/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DHCP&amp;DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 05-网络设备调试</title>
      <link href="/2022-08-14-shu-tong-05-wang-luo-she-bei-diao-shi.html"/>
      <url>/2022-08-14-shu-tong-05-wang-luo-she-bei-diao-shi.html</url>
      
        <content type="html"><![CDATA[<h1 id="网络设备调试"><a href="#网络设备调试" class="headerlink" title="网络设备调试"></a><center>网络设备调试</center></h1><h3 id="Ping-ICMP差错检测"><a href="#Ping-ICMP差错检测" class="headerlink" title="Ping(ICMP差错检测)"></a>Ping(ICMP差错检测)</h3><p>ICMP Echo Request和ICMP Echo Reply分别用来查询和响应某些信息，进行差错检测。</p><h3 id="Tracert（越点追踪）"><a href="#Tracert（越点追踪）" class="headerlink" title="Tracert（越点追踪）"></a>Tracert（越点追踪）</h3><p><img src="https://img-blog.csdnimg.cn/eacb2d4116b74351b286221046be086d.png" alt="Tracert"></p><pre class="line-numbers language-none"><code class="language-none">ICMP的另一个典型应用是Tracert， Tracert基于报文头中的TTL值来逐跳很踪报文的转发路径。为了跟综到达某特定目的地址的路径，源端首先将报文的TTL值设置为1，该报文到达第一个节点后，TTL超时，于是该节点向源端发送TTL超时消息，消息中携带时间截。然后源端将报文的TTL值设置为2，报文到达第二个节点后超时，该节点同样返回TTL超时消，息，以此类推，直到报文到达目的地。这样，源端根据返回的报文中的信息可以跟踪到报文经过的每一个节点，并根据时间截信息计算往返时间。Tracert是检测网络丢包及时延的有效手段，同时可以帮助管理员发现网络中的路由环路。Tracert常用的配置参数说明如下：—a source—ip—address指定tracert报文的源地址。—f first—ttl指定初始TTL。缺省值是1。—m max—ttl指定最大TTL，缺省值是30。—name使能显示每一跳的主机名。—P port指定目的主机的UDP端口号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/a412779415bf4a5984b24aa438006813.png" alt="tracert"></p><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><p>定义：对相应的协议所收发的所有报文全部在屏幕上输出显示；用于网络排错</p><p>开启命令：</p><pre class="line-numbers language-none"><code class="language-none">terminal monitorterminal debuggingdebugging  协议类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结束命令：</p><pre class="line-numbers language-none"><code class="language-none">undo debugging all或Ctrl + O（用于在屏幕刷新很快）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>例如debug 路由器之间的ping</p><ul><li><p>在R1（192.168.1.1）上输入</p><pre class="line-numbers language-none"><code class="language-none">terminal monitorterminal debuggingdebugging  ip icmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再R2pingR1可以看到</p><p><img src="https://img-blog.csdnimg.cn/8f4195438385430c9b98ac2015b99169.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验HCL 配置管理实验</title>
      <link href="/2022-08-14-shi-yan-hcl-pei-zhi-guan-li-shi-yan.html"/>
      <url>/2022-08-14-shi-yan-hcl-pei-zhi-guan-li-shi-yan.html</url>
      
        <content type="html"><![CDATA[<h1 id="配置管理实验"><a href="#配置管理实验" class="headerlink" title="配置管理实验"></a><center>配置管理实验</center></h1><p>拓扑图</p><p><img src="https://img-blog.csdnimg.cn/5e5e4f9b64f84d7d8a50a4dcfc98ba60.png"></p><p>实验步骤</p><p>1.配置路由器ip地址</p><pre class="line-numbers language-none"><code class="language-none">&lt;H3C&gt;system-view System View: return to User View with Ctrl+Z.[H3C]sysname R1[R1]int g0/0[R1-GigabitEthernet0/0]ip address 192.168.54.1 24[R1-GigabitEthernet0/0]dis this#interface GigabitEthernet0/0 port link-mode route combo enable copper ip address 192.168.54.1 255.255.255.0#return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.配置FTP服务</p><pre class="line-numbers language-none"><code class="language-none">[R1]ftp server enable [R1]local-user jya class manage[R1-luser-manage-jya]password simple qwer123456[R1-luser-manage-jya]authorization-attribute user-role level-15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.到用户视图dir查看配置文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;R1&gt;dirDirectory of flash: (VFAT)   0 drw-           - Aug 14 2022 00:27:27   diagfile   1 -rw-       43136 Aug 14 2022 00:27:27   licbackup   2 -rw-       43136 Aug 14 2022 00:27:27   licnormal   3 drw-           - Aug 14 2022 00:27:27   logfile   4 -rw-           0 Aug 14 2022 00:27:26   msr36-cmw710-boot-r0424p22.bin   5 -rw-           0 Aug 14 2022 00:27:26   msr36-cmw710-system-r0424p22.bin   6 drw-           - Aug 14 2022 00:27:27   seclog1046512 KB total (1046408 KB free)&lt;R1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.save——Y——回车，保存之前的配置，再dir查看,可以看到多了startup.cfg和mdb两个配置文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;R1&gt;saveThe current configuration will be written to the device. Are you sure? [Y/N]:yPlease input the file name(*.cfg)[flash:/startup.cfg](To leave the existing filename unchanged, press the enter key):Validating file. Please wait...Configuration is saved to device successfully.&lt;R1&gt;dirDirectory of flash: (VFAT)   0 drw-           - Aug 14 2022 00:27:27   diagfile   1 -rw-         252 Aug 14 2022 00:44:04   ifindex.dat   2 -rw-       43136 Aug 14 2022 00:27:27   licbackup   3 -rw-       43136 Aug 14 2022 00:27:27   licnormal   4 drw-           - Aug 14 2022 00:27:27   logfile   5 -rw-           0 Aug 14 2022 00:27:26   msr36-cmw710-boot-r0424p22.bin   6 -rw-           0 Aug 14 2022 00:27:26   msr36-cmw710-system-r0424p22.bin   7 drw-           - Aug 14 2022 00:27:27   seclog   8 -rw-        2621 Aug 14 2022 00:44:04   startup.cfg   9 -rw-       44691 Aug 14 2022 00:44:04   startup.mdb1046512 KB total (1046352 KB free)&lt;R1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    5.打开计算机输入<a href="ftp://192.168.54.1,将文件保存到本地/">ftp://192.168.54.1，将文件保存到本地</a></p><p><img src="C:\Users\Okra\AppData\Roaming\Typora\typora-user-images\image-20220814010433633.png" alt="image-20220814010433633"></p><p>6.重置路由器，reboot——先N——后Y</p><p>7.打开ftp服务，在用户视图下startup saved-configuration startup.cfg</p><p>8.再reboot后发现之前的配置又回来了。</p>]]></content>
      
      
      <categories>
          
          <category> H3CNE实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3CNE实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验HCL Telnet远程登录</title>
      <link href="/2022-08-13-shi-yan-hcl-telnet-yuan-cheng-deng-lu.html"/>
      <url>/2022-08-13-shi-yan-hcl-telnet-yuan-cheng-deng-lu.html</url>
      
        <content type="html"><![CDATA[<h1 id="Telnet远程登录"><a href="#Telnet远程登录" class="headerlink" title="Telnet远程登录"></a><center>Telnet远程登录</center></h1><h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><strong><img src="C:\Users\Okra\AppData\Roaming\Typora\typora-user-images\image-20220813235734581.png" alt="image-20220813235734581"></strong></p><p>一台路由器、本地终端Host_1</p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>1.路由器配置ip地址</p><pre class="line-numbers language-none"><code class="language-none">&lt;H3C&gt;sysSystem View: return to User View with Ctrl+Z.[H3C]sysname R1[R1]ip add[R1]ip addre[R1]int g0/0[R1-GigabitEthernet0/0]ip add[R1-GigabitEthernet0/0]ip address 1.1.1.1 24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.查看配置是否成功</p><pre class="line-numbers language-none"><code class="language-none">[R1]int g0/0[R1-GigabitEthernet0/0]ip add 192.168.54.1 24[R1-GigabitEthernet0/0]dis this#interface GigabitEthernet0/0 port link-mode route combo enable copper ip address 192.168.54.1 255.255.255.0#return[R1-GigabitEthernet0/0]quit[R1]dis ip int b*down: administratively down(s): spoofing  (l): loopbackInterface           Physical Protocol IP address/Mask    VPN instance DescriptionGE0/0               up       up       192.168.54.1/24    --           --GE0/1               down     down     --                 --           --GE0/2               down     down     --                 --           --GE5/0               down     down     --                 --           --GE5/1               down     down     --                 --           --GE6/0               down     down     --                 --           --GE6/1               down     down     --                 --           --Ser1/0              down     down     --                 --           --Ser2/0              down     down     --                 --           --Ser3/0              down     down     --                 --           --Ser4/0              down     down     --                 --           --<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.配置本地终端ip地址</p><p>打开设置——网络和Internet——以太网——更改适配器选项——VirtualBox Host-Only Ethernet Adapter——ipv4</p><p><img src="https://img-blog.csdnimg.cn/cd959232a9e641479b458fc7509dd7a4.png"></p><p>4.尝试在路由器ping 192.168.54.2 失败，原因是未打开防火墙icmp的入站策略</p><p><img src="https://img-blog.csdnimg.cn/98d8f9e10949436baa3ea70a8b94618f.png"></p><p>5.配置telnet服务</p><pre class="line-numbers language-none"><code class="language-none">[R1]telnet ser en[R1]local-user jya class manageNew local user added.[R1-luser-manage-jya]password simple qwer123456[R1-luser-manage-jya]service-type telnet[R1-luser-manage-jya]authorization-attribute user-role level-15[R1-luser-manage-jya]quit[R1]user-interface vty 0 4[R1-line-vty0-4]authentication-mode scheme<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.尝试Telnet远程登录</p><p>打开CRT——选择telnet</p><p><img src="https://img-blog.csdnimg.cn/8dac7b49f3bc47e99e2721e3740d5f10.png"></p><p>输入用户名jya和密码qwer123456，成功</p><p><img src="https://img-blog.csdnimg.cn/d60e2945a40e4b2daccd41afbe22e4b6.png"></p>]]></content>
      
      
      <categories>
          
          <category> H3CNE实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Telnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SecureCRT的使用教程（ 过程非常详细！！值得查看）</title>
      <link href="/2022-08-12-securecrt-de-shi-yong-jiao-cheng-guo-cheng-fei-chang-xiang-xi-zhi-de-cha-kan.html"/>
      <url>/2022-08-12-securecrt-de-shi-yong-jiao-cheng-guo-cheng-fei-chang-xiang-xi-zhi-de-cha-kan.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_39052513/article/details/104692026">(23条消息) SecureCRT的使用教程（ 过程非常详细！！值得查看）_超Ren专属的博客-CSDN博客_securecrt</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SecureCRT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 04-命令行配置基础</title>
      <link href="/2022-08-12-shu-tong-04-ming-ling-xing-pei-zhi-ji-chu.html"/>
      <url>/2022-08-12-shu-tong-04-ming-ling-xing-pei-zhi-ji-chu.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-路由器交换机介绍"><a href="#1-路由器交换机介绍" class="headerlink" title="1.  路由器交换机介绍"></a>1.  路由器交换机介绍</h2><p><strong>路由器的作用</strong></p><ul><li>连接多个不同网段，隔离广播</li><li>对数据报文执行寻路和转发</li><li>交换和维护路由信息</li></ul><p><strong>交换机的作用</strong></p><ul><li><p>连接多个以太网物理段，隔离冲突域</p></li><li><p>对以太网帧进行高速而透明的交换转发</p></li><li><p>自行学习和维护MAC地址信息</p></li></ul><p><strong>路由器交换机发展趋势</strong></p><ul><li>路由和交换的融合（三层交换机）</li></ul><ul><li>多业务功能的融合</li></ul><h2 id="2-配置网络设备的方法"><a href="#2-配置网络设备的方法" class="headerlink" title="2.配置网络设备的方法"></a>2.配置网络设备的方法</h2><h4 id="2-1访问网络设备命令行接口的方法"><a href="#2-1访问网络设备命令行接口的方法" class="headerlink" title="2.1访问网络设备命令行接口的方法"></a>2.1访问网络设备命令行接口的方法</h4><ul><li><strong>通过Console口本地访问</strong><ul><li>协议Serial，接口看设备管理器一般位COM1，波特率9600</li><li>适用于设备初次调试</li></ul></li><li>通过AUX口远程访问</li><li><strong>使用Telnet终端访问</strong><ul><li>适用于设备上架配置好后的维护管理</li></ul></li><li><strong>使用SSH终端访问</strong><ul><li>数据传输过程加密，安全的远程访问</li></ul></li><li>通过异步串口访问</li></ul><h4 id="2-2-命令行基本使用"><a href="#2-2-命令行基本使用" class="headerlink" title="2.2 命令行基本使用"></a>2.2 命令行基本使用</h4><p><img src="https://img-blog.csdnimg.cn/3ab8aa2ffc044767ab04202717c8ab12.png"></p><p><img src="https://img-blog.csdnimg.cn/8c570bfbf87b4256b074fba8d2353bac.png"></p><p><img src="https://img-blog.csdnimg.cn/159ba9fb006e4d109a7a94bba5b4f631.png"></p><h3 id="VRP用户级别"><a href="#VRP用户级别" class="headerlink" title="VRP用户级别"></a>VRP用户级别</h3><p>VRP提供基本的权限控制，可以实现不同级别用户能够执行不同级别的命令，用以限制不同用户对设备的操作。</p><p><img src="https://img-blog.csdnimg.cn/fd6e7f4426234278a7d1d77cb9f79557.png"></p><h3 id="常见文件系统操作命令"><a href="#常见文件系统操作命令" class="headerlink" title="常见文件系统操作命令"></a>常见文件系统操作命令</h3><p>1.查看当前目录</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;pwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.显示当前文件下的目录信息</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;dir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.查看文本文件的具体内容</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;more<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.修改用户当前界面的工作目录</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;cd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.创建新的目录</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;mkdir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.删除目录</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;rmdir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.复制文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;copy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.移动文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;move<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9.重命名文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;rename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10.删除文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;delete<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>11.恢复删除的文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;undelete<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>12.彻底删除回收站的文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;reset recyle-bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="基本配置命令"><a href="#基本配置命令" class="headerlink" title="基本配置命令"></a>基本配置命令</h3><p>1.配置设备名称</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]sysname name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.设置系统时钟</p><pre class="line-numbers language-none"><code class="language-none">display clock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用于查看设备时间</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;clock timezone time-zone-name{add|minus} offset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用来对本地时区信息进行设置</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;clock datatime [utc]HH:MM:SS YYYY-MM-DD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用来设置设备当前或HTC日期和时间</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;clock daylight-saving-time<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用来设置设备的夏令时</p><p>3.配置命令等级</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]command-privilege level {0-15的级别} view {view-name command-key}例如：设置用户级别为5的用户可以执行save命令[Huawei]command-privilege level 5 view save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用来设置指定视图内命令的级别。命令级别分为参观、监控、配置、管理4个级别。</p><p>4.配置用户通过Password方式登录设备</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]user-interface vty 0 4[Huawei-ui-vty0-4]set authentication password cipher information<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.配置用户界面参数</p><pre class="line-numbers language-none"><code class="language-none">[Huawei]idle-timeout minutes [seconds]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用来设置用户界面断开连接的超时时间，缺省情况下，超时时间是10分钟。</p><p>6.查看当前运行的配置文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;display current-configuration<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.配置文件保存</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.查看保存的配置</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;display save-configuration<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9.清除已保存的配置</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;reset saved-configuration<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10.查看系统配置参数</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;display startup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用来查看设备本次及下次启动相关的系统软件、备份系统软件、配置文件….</p><p>11.配置系统下次启动时使用的配置文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;startup saved-configuration 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>12.配置设备重启</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huaawei&gt;reboot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp-配置通过FTP进行文件操作</title>
      <link href="/2022-07-22-shi-yan-ensp-pei-zhi-tong-guo-ftp-jin-xing-wen-jian-cao-zuo.html"/>
      <url>/2022-07-22-shi-yan-ensp-pei-zhi-tong-guo-ftp-jin-xing-wen-jian-cao-zuo.html</url>
      
        <content type="html"><![CDATA[<h1 id="eNSP——配置通过FTP进行文件操作"><a href="#eNSP——配置通过FTP进行文件操作" class="headerlink" title="eNSP——配置通过FTP进行文件操作"></a><a href="https://www.cnblogs.com/qi-yuan/p/11926864.html">eNSP——配置通过FTP进行文件操作</a></h1><p>原理：</p><p>FTP (File Transfer Protocol,文件传输协议)是在TCP/IP网络和Internet.上最早使用的协议之-，在TCP/IP协议族中属于应用层协议，是文件传输的Internet标准。其主要功能是向用户提供本地和远程主机之间的文件传输，尤其是在进行版本升级、日志下载和配置保存等业务操作时。FTP采用C/S (Client/Server) 结构。FTP Server能够提供远程用户端访问和操作的功能，用户可以通过主机或者其他设备上的FTP用户端程序登录到服务器上，进行文件的上传、下载和目录访问等操作。</p><p>例子：</p><p>本实验模拟企业网络。PC-1为FTP用户端设备，需要访问FTP Server,从服务器上下载或上传文件。出于安全角度考虑,为防止服务器被病毒文件感染，不允许用户端直接上传文件到Server。网络管理员在R1.上设置了限制，使员工不能上传文件到Server,但是可以从Server下载文件。R1也需要作为用户端从Server下载更新文件，同时配置R1作为FTP服务器，员工可上传文件到R1上，经过管理员的检测后由R1再上传到FTP Server。</p><p>拓扑图：</p><p><img src="https://img2018.cnblogs.com/i-beta/1838411/201911/1838411-20191125112938521-1179795396.png" alt="img"></p><p> 配置编址</p><p><img src="https://img2018.cnblogs.com/i-beta/1838411/201911/1838411-20191125113000199-1526147243.png" alt="img"></p><p>1.基本配置</p><p>通过上面给的拓扑图和配置编址来配置相应的基本配置。ping通</p><p><img src="https://img2018.cnblogs.com/i-beta/1838411/201911/1838411-20191125114844094-1499105905.png" alt="img"></p><p> 2.配置路由器为FTP Client</p><p>首先我们要建一个文件夹，在文件夹里面再建一个名字为Config的文件夹，在Config里面在放一个text.txt的测试文件</p><p><img src="https://img2018.cnblogs.com/i-beta/1838411/201911/1838411-20191125115109542-1341510886.png" alt="img"></p><p>设置FTP server找到我们刚才建的那个文件，之后启动服务（右键单击FTP点击设置进入）</p><p> 设置完成后，启动FTP Server。</p><p>在R1上使用ftp命令连接FTP服务器。登录时默认需要输入用户名和密码，由于服务器上没有设置用户名和密码，每次在R1上输入时等同于创建该用户名和密码，本次使用用户名qiyuan, 密码123</p><p> <img src="https://img2018.cnblogs.com/i-beta/1838411/201911/1838411-20191125120026339-1656153405.png" alt="img"></p><p>已经进入ftp服务器了，我们看一下文件夹的状态，可以看到有一个Config文件夹</p><p><img src="https://img2018.cnblogs.com/i-beta/1838411/201911/1838411-20191125120109621-931594873.png" alt="img"></p><p>使用cd进入文件夹</p><p><img src="https://img2018.cnblogs.com/i-beta/1838411/201911/1838411-20191125120224079-938262256.png" alt="img"></p><p> 下载test.txt到本地路由器</p><p><img src="https://img2018.cnblogs.com/i-beta/1838411/201911/1838411-20191125120640466-684042585.png" alt="img"></p><p>上传test.txt到FTP服务器，命名为new.txt</p><p> <img src="https://img2018.cnblogs.com/i-beta/1838411/201911/1838411-20191125120852983-1910818448.png" alt="img"></p><p> 3.配置路由器为FTP服务器</p><p> 到这里路由器已经可以从服务器上自由的下载和上传东西了，接下来我们将路由器配置为服务器使用户能够上传和下载文件</p><p>打开R1的ftp服务功能</p><p> <img src="https://img2018.cnblogs.com/i-beta/1838411/201911/1838411-20191125121331950-732988699.png" alt="img"></p><p>创建了一个用户名为ftp密码为123的账户，设置文件夹目录为flash：，配置FTP用户可以访问的目录为flash：，用户优先级为15，服务类型为ftp</p><p><img src="https://img2018.cnblogs.com/i-beta/1838411/201911/1838411-20191125121651495-739432692.png" alt="img"></p><p><img src="https://img2018.cnblogs.com/i-beta/1838411/201911/1838411-20191125121549977-2023985140.png" alt="img"></p><p> <img src="https://img2018.cnblogs.com/i-beta/1838411/201911/1838411-20191125121605852-780981850.png" alt="img"></p><p> <img src="https://img2018.cnblogs.com/i-beta/1838411/201911/1838411-20191125121614339-211099623.png" alt="img"></p><p> <img src="https://img2018.cnblogs.com/i-beta/1838411/201911/1838411-20191125121715823-1786695878.png" alt="img"></p><p>设置完成后我们来到客户端右击打开配置，我们首先登录，然后传一个文件</p><p><img src="https://img2018.cnblogs.com/i-beta/1838411/201911/1838411-20191125122211283-2046329445.png" alt="img"></p><p>这样我们就上传成功了</p><p>去R1看看，发现成功了</p><p> <img src="https://img2018.cnblogs.com/i-beta/1838411/201911/1838411-20191125122329273-1898308708.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验ensp-IP和TCP抓包分析实验</title>
      <link href="/2022-07-22-shi-yan-ensp-ip-he-tcp-zhua-bao-fen-xi-shi-yan.html"/>
      <url>/2022-07-22-shi-yan-ensp-ip-he-tcp-zhua-bao-fen-xi-shi-yan.html</url>
      
        <content type="html"><![CDATA[<h1 id="IP和TCP抓包分析实验"><a href="#IP和TCP抓包分析实验" class="headerlink" title="IP和TCP抓包分析实验"></a><center>IP和TCP抓包分析实验</center></h1><h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><img src="C:\Users\Okra\AppData\Roaming\Typora\typora-user-images\image-20220722133920864.png" alt="image-20220722133920864"></p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>1.通过上面给的拓扑图和配置编址来配置相应的基本配置。ping通</p><pre class="line-numbers language-none"><code class="language-none">&lt;Huawei&gt;&lt;Huawei&gt;sys&lt;Huawei&gt;system-view Enter system view, return user view with Ctrl+Z.[Huawei]sysname R1[R1]inter[R1]interface g0/0/0[R1-GigabitEthernet0/0/0]ip addd[R1-GigabitEthernet0/0/0]ip add[R1-GigabitEthernet0/0/0]ip address 192.168.1.1 24[R1-GigabitEthernet0/0/0]Jul 22 2022 13:04:46-08:00 R1 %%01IFNET/4/LINK_STATE(l)[1]:The line protocol IP on the interface GigabitEthernet0/0/0 has entered the UP state. [R1-GigabitEthernet0/0/0]ping 192.168.1.2  PING 192.168.1.2: 56  data bytes, press CTRL_C to break    Reply from 192.168.1.2: bytes=56 Sequence=1 ttl=255 time=10 ms    Reply from 192.168.1.2: bytes=56 Sequence=2 ttl=255 time=40 ms    Reply from 192.168.1.2: bytes=56 Sequence=3 ttl=255 time=20 ms    Reply from 192.168.1.2: bytes=56 Sequence=4 ttl=255 time=40 ms    Reply from 192.168.1.2: bytes=56 Sequence=5 ttl=255 time=30 ms  --- 192.168.1.2 ping statistics ---    5 packet(s) transmitted    5 packet(s) received    0.00% packet loss    round-trip min/avg/max = 10/28/40 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.启动FTP Server</p><pre class="line-numbers language-none"><code class="language-none">[R2]ftp ser[R2]ftp server en[R2]ftp server enable Info: Succeeded in starting the FTP server[R2]local-[R2]local-u[R2]local-user jya    ^Error: Unrecognized command found at '^' position.[R2]aaa[R2-aaa]local-user ftp passwo[R2-aaa]local-user ftp password cipher 123Info: Add a new user.[R2-aaa]local[R2-aaa]local-user ftp ftp-di[R2-aaa]local-user ftp ftp-directory  flash[R2-aaa]local-user ftp service-type ftp[R2-aaa]local-user ftp privi[R2-aaa]local-user ftp privilege le[R2-aaa]local-user ftp privilege level 15[R2-aaa]loca[R2-aaa]local-user ftp pass[R2-aaa]local-user ftp password c[R2-aaa]local-user ftp password cipher 123[R2-aaa]Jul 22 2022 13:19:34-08:00 R2 %%01MTM/3/LOGIN_FAIL(l)[2]:The user failed to log in. (UserName="jya", IpAddress=192.168.1.1, VpnInstanceName="")[R2-aaa]  Please check whether system data has been changed, and save data in time  Configuration console time out, please press any key to log on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.在R1上使用ftp命令访问FTP服务器</p><pre class="line-numbers language-none"><code class="language-none">&lt;R1&gt;ftp 192.168.1.2Trying 192.168.1.2 ...Press CTRL+K to abortConnected to 192.168.1.2.220 FTP service ready.User(192.168.1.2:(none)):jya331 Password required for jya.Enter password:530 Logged incorrect.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.打开Wireshark，获取已经抓到的包。可以看到TCP头部分装格式和所学的完全一致，且可以看到FTP服务用户名和密码。</p><p><img src="https://img-blog.csdnimg.cn/6c69645f019f462aaec3839cca3779dc.png"></p>]]></content>
      
      
      <categories>
          
          <category> ensp实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 03-TCP和UDP原理</title>
      <link href="/2022-07-20-shu-tong-03-tcp-he-udp-yuan-li.html"/>
      <url>/2022-07-20-shu-tong-03-tcp-he-udp-yuan-li.html</url>
      
        <content type="html"><![CDATA[<h1 id="TCP和UDP原理"><a href="#TCP和UDP原理" class="headerlink" title="TCP和UDP原理"></a><center>TCP和UDP原理</center></h1><h2 id="1-端口"><a href="#1-端口" class="headerlink" title="1.  端口"></a>1.  端口</h2><p>每个应用程序进出网络都需要经过一个唯一端口，通过端口号来识别数据交由哪个应用程序处理</p><p>服务器：固定端口号（TCP 80）</p><p>客户端：1024以上随机端口</p><p>常见知名端口号：</p><pre class="line-numbers language-none"><code class="language-none">TCP80  HTTP  超文本传输协议TCP20 21  FTP  文件传输协议TCP23  TELNET  远程登录TCP25  SMTP  简单邮件传输协议UDP53  DNS  域名解析协议TCP443  HTTPS  HTTP over SSL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/c42dd2caa99b416d82155f60a610bad3.png" alt="tcp"></p><h2 id="2-TCP原理"><a href="#2-TCP原理" class="headerlink" title="2.TCP原理"></a>2.TCP原理</h2><h3 id="TCP的建立连接"><a href="#TCP的建立连接" class="headerlink" title="TCP的建立连接"></a>TCP的建立连接</h3><p>TCP运输连接有以下三个阶段：</p><ul><li><strong>建立TCP连接，也就是通过三报文握手来建立TCP连接。</strong></li><li><strong>数据传送，也就是基于已建立的TCP连接进行可靠的数据传输。</strong></li><li><strong>释放连接，也就是在数据传输结束后，还要通过四报文挥手来释放TCP连接。</strong></li></ul><p>TCP的运输连接管理就是使运输连接的建立和释放都能正常的进行。</p><p><img src="https://img-blog.csdnimg.cn/151effa7cc8b4f7ba2354d40ff950d53.png"></p><h3 id="2-1-TCP头部封装格式"><a href="#2-1-TCP头部封装格式" class="headerlink" title="2.1 TCP头部封装格式"></a>2.1 TCP头部封装格式</h3><p><img src="https://img-blog.csdnimg.cn/c968845dd62847269f83cfd01ef5e08e.png"></p><p><img src="https://img-blog.csdnimg.cn/351a6fd138af4226accc458a72adfa3c.png"></p><p><strong>源端口:</strong> 占16比特，写入源端口号，用来 <strong>标识发送该TCP报文段的应用进程。</strong> <strong>目的端口：</strong> 占16比特，写入目的端口号，用来<strong>标识接收该TCP报文段的应用进程。</strong></p><p><strong>序号:</strong> 占32比特，取值范围[0,2^32-1]，序号增加到最后一个后，下一个序号就又回到0。<strong>指出本TCP报文段数据载荷的第一个字节的序号。</strong></p><p><strong>确认号：</strong> 占32比特，取值范围[0,2^32-1]，确认号增加到最后一个后，下一个确认号就又回到0。指出期望收到对方下一个TCP报文段的数据载荷的第一个字节的序号，同时也是对之前收到的所有数据的确认。若确认号=n，则表明到序号n-1为止的所有数据都已正确接收，期望接收序号为n的数据。</p><p><strong>确认标志位ACK：</strong> 取值为1时确认号字段才有效；取值为0时确认号字段无效。<strong>TCP规定，在连接建立后所有传送的TCP报文段都必须把ACK置1。</strong></p><p><strong>数据偏移:</strong> 占4比特，并以4字节为单位。用来指出TCP报文段的数据载荷部分的起始处距离TCP报文段的起始处有多远。这个字段实际上是指出了TCP报文段的首部长度。</p><p><strong>窗口：</strong> 占16比特，以字节为单位。<strong>指出发送本报文段的一方的接收窗。</strong></p><p><strong>同步标志位SYN：</strong> 在TCP连接建立时用来同步序号。<strong>终止标志位FIN：</strong> 用来释放TCP连接。<strong>复位标志位RST：</strong> 用来复位TCP连接。</p><p><strong>推送标志位PSH：</strong> 接收方的TCP收到该标志位为1的报文段会尽快上交应用进程，而不必等到接收缓存都填满后再向上交付。</p><p><strong>校验和：</strong> 占16比特，检查范围包括TCP报文段的首部和数据载荷两部分。在计算校验和时，要在TCP报文段的前面加上12字节的伪首部。</p><p><strong>紧急指针：</strong> 占16比特，以字节为单位，用来指明紧急数据的长度。</p><p><strong>填充：</strong> 由于选项的长度可变，因此使用填充来 <strong>确保报文段首部能被4整除</strong>，(因为数据偏移字段，也就是首部长度字段，是以4字节为单位的)。</p><h3 id="2-2-TCP可靠性机制"><a href="#2-2-TCP可靠性机制" class="headerlink" title="2.2 TCP可靠性机制"></a>2.2 TCP可靠性机制</h3><h4 id="2-2-1-确认机制"><a href="#2-2-1-确认机制" class="headerlink" title="2.2.1 确认机制"></a>2.2.1 确认机制</h4><pre class="line-numbers language-none"><code class="language-none">Seq = 上一次AckAck = 上一次Seq+length如果没有接到，或接收到是不完整数据，会再次发送Ack请求对方重发<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/f873b11e3d7c489ca3ea77e3bced08ba.png"></p><p><img src="https://img-blog.csdnimg.cn/9379e0e7efc64e8e9b249d88e45ff56e.png"></p><p><img src="https://img-blog.csdnimg.cn/66e4abf2a09b426ba81600bb948f6b42.png"></p><h4 id="2-2-2-三次握手"><a href="#2-2-2-三次握手" class="headerlink" title="2.2.2 三次握手"></a>2.2.2 三次握手</h4><p><img src="https://img-blog.csdnimg.cn/5442b0bc75314cfc9c681de53a335e86.png"></p><p><img src="https://img-blog.csdnimg.cn/46c892eed45e46918fc160d1c4b386c0.png"></p><h4 id="2-2-3-四次挥手"><a href="#2-2-3-四次挥手" class="headerlink" title="2.2.3 四次挥手"></a>2.2.3 四次挥手</h4><p><img src="https://img-blog.csdnimg.cn/172ea1a5659947628f990dc21fc8c89a.png"></p><p> 由于TCP连接是全双工的,断开一个TCP连接,需要客户端与服务器发送四个包来确认连接的断开<br>简述四次挥手的过程:</p><pre><code>1·因为TCP是全双工的,因此,每个方向都要单独关闭2·当一方完成数据发送任务后,发送一个FIN来终止这一方向的连接,收到一个FIN只是意味着3·一方向不会再收到数据了,但是这个TCP连接上仍然能够发送数据,直到这一方也发送了FIN.4·首先进行关闭的一方执行主动关闭,另一方执行被动关闭.第一个关闭的最后等待2MSL</code></pre><p>第一次挥手:</p><pre><code>1·Client将FIN置为1,序号seq=M,发送给Server,进入FIN_WAIT_1状态</code></pre><p>第二次挥手</p><pre><code>1·Server收到后,将ACK置为1,ack=M+1,响应给Client,进入CLOSE_WAIT状态2·Client收到响应后,进入FIN_WAIT_2状态</code></pre><p>第三次挥手</p><pre><code>1·Server在结束所有数据传输后,将Fin置为1,seq=N+1,发送给Client,进入2·LAST_ACK状态</code></pre><p>第四次挥手</p><pre><code>1·Client收到后,将ACK置为1,ack=N+1,响应给Server,进入TIME_WAIT状态,等待2·2MSL后,进入CLOSED状态3·Server收到后,进入CLOSED状态</code></pre><h4 id="2-2-4-RST结束连接"><a href="#2-2-4-RST结束连接" class="headerlink" title="2.2.4 RST结束连接"></a>2.2.4 RST结束连接</h4><p>收到RST置位的包后，立即结束TCP连接。</p><p>发出RST置位的包后，不必等待对方的确认，直接结束TCP连接。</p><h4 id="2-2-5-窗口机制"><a href="#2-2-5-窗口机制" class="headerlink" title="2.2.5 窗口机制"></a>2.2.5 窗口机制</h4><p>滑动窗口 </p><p>​    通过通告对方本机接收能力，来实现流量控制。</p><p><img src="https://img-blog.csdnimg.cn/7750e03a85f845a299bf0682ff566020.png"></p><h4 id="2-2-6-完整性校验"><a href="#2-2-6-完整性校验" class="headerlink" title="2.2.6 完整性校验"></a>2.2.6 完整性校验</h4><p>通过Checksum来检查数据完整性。</p><h3 id="2-3-TCP特征"><a href="#2-3-TCP特征" class="headerlink" title="2.3 TCP特征"></a>2.3 TCP特征</h3><p>优点：传输可靠性高</p><p>缺点：占用带宽高，传输延迟高</p><h3 id="2-4-TCP的适用场景"><a href="#2-4-TCP的适用场景" class="headerlink" title="2.4 TCP的适用场景"></a>2.4 TCP的适用场景</h3><p>对数据完整性要求高，但对传输延迟要求低。</p><h2 id="3-UDP的原理"><a href="#3-UDP的原理" class="headerlink" title="3. UDP的原理"></a>3. UDP的原理</h2><h3 id="3-1-UDP特征"><a href="#3-1-UDP特征" class="headerlink" title="3.1 UDP特征"></a>3.1 UDP特征</h3><p>优点：占用带宽低，传输延迟高</p><p>缺点：没有任何可靠性机制</p><h3 id="3-2-UDP的适用场景"><a href="#3-2-UDP的适用场景" class="headerlink" title="3.2 UDP的适用场景"></a>3.2 UDP的适用场景</h3><p>对传输延迟要求高，但数据完整性要求低</p><p><img src="https://img-blog.csdnimg.cn/cc2ef2ca90174b119453359cfa688f9f.png"></p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP&amp;UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 02-IP基本原理</title>
      <link href="/2022-07-17-shu-tong-02-ip-ji-ben-yuan-li.html"/>
      <url>/2022-07-17-shu-tong-02-ip-ji-ben-yuan-li.html</url>
      
        <content type="html"><![CDATA[<h1 id="IP基本原理"><a href="#IP基本原理" class="headerlink" title="IP基本原理"></a><strong><center>IP基本原理</center></strong></h1><h2 id="1-IP协议概述"><a href="#1-IP协议概述" class="headerlink" title="1. IP协议概述"></a>1. IP协议概述</h2><p>IP协议是目前为止局域网的唯一选择。</p><h3 id="1-1-IP及其相关协议"><a href="#1-1-IP及其相关协议" class="headerlink" title="1.1 IP及其相关协议"></a>1.1 IP及其相关协议</h3><p><img src="https://img-blog.csdnimg.cn/2e152ad3b2f6437282789bbfff30a074.png" alt="IP及其相关协议"></p><h3 id="1-2-IP的主要作用"><a href="#1-2-IP的主要作用" class="headerlink" title="1.2 IP的主要作用"></a>1.2 IP的主要作用</h3><pre class="line-numbers language-none"><code class="language-none">标识节点和链路→用唯一的IP地址标识每一个节点→用唯一的IP网络号标识每一个链路寻址和转发→确定节点所在网络的位置，进而确定节点所在的位置→IP路由器选择适当的路径将IP包转发到目的节点适应各种数据链路→根据链路的MTU对IP包进行分片和重组→为了通过实际的数据链路传递信息，须建立IP地址到数据链路层地址的映射<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-IP网络的结构"><a href="#1-3-IP网络的结构" class="headerlink" title="1.3 IP网络的结构"></a>1.3 IP网络的结构</h3><p><img src="https://img-blog.csdnimg.cn/9fcea5a67e2f433589dda0b3511ca0f3.png" alt="IP网络的结构"></p><h3 id="1-4-IP头格式"><a href="#1-4-IP头格式" class="headerlink" title="1.4 IP头格式"></a>1.4 IP头格式</h3><p><img src="https://img-blog.csdnimg.cn/073e2b11cab34ff2997d614fec733e5f.png" alt="IP头格式"></p><pre class="line-numbers language-none"><code class="language-none">Version:版本（IPv4/IPv6）IHL(IP Header Length):头部长度，描述了数据包头的内容长度Type of Service:服务类型，用于标识DSCP或IP优先级，用于QOS识别Total Length:总长度Identification:标识符用来标识某个分片来自于那个数据包Flags:标志位（0或1）中间的数字标识数据包是否允许分片，1禁止分片，0允许分片。最后一个数字为1代表不是最后一个分片，0则反之。Fragment Offset:分片偏移用于描述分片在数据包中的位置Time to Live:生存时间该数据包允许经过的路由器最大跳数（设置最大跳数目的在于防止环路产生）Protocol:协议用于标识上层协议是TCP/UDP/ICMPHeader Checksum:头部校验序列用于头部信息差错校验Source Address:Destination Address：Options:可选项Padding:填充，当数据包长度不足4的倍数字节时填充<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-MTU"><a href="#1-5-MTU" class="headerlink" title="1.5 MTU"></a>1.5 MTU</h3><ul><li>最大传输单元</li><li>接口收发数据支持的单个包的最大长度</li><li>以太网接口默认MTU500Byte</li><li>PPPoE默认MTU1492Byte</li></ul><h2 id="2-IP地址和地址映射"><a href="#2-IP地址和地址映射" class="headerlink" title="2.IP地址和地址映射"></a>2.IP地址和地址映射</h2><h3 id="2-1-IP地址"><a href="#2-1-IP地址" class="headerlink" title="2.1 IP地址"></a>2.1 IP地址</h3><pre class="line-numbers language-none"><code class="language-none">格式：32位长度，点分十进制，由网络位和主机位组成，网络位长度和数字完全一致的地址属于同一网段。分类：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/1c24222fa0cd4c2184ba12412c3353ce.png" alt="IP地址分类"></p><p><img src="https://img-blog.csdnimg.cn/447f1c3715db4fce94df788b1caeee59.png" alt="特殊地址"></p><p><img src="https://img-blog.csdnimg.cn/deeea3018d604804bedecd52b54bf920.png" alt="公私网地址"></p><h3 id="2-2-ARP协议"><a href="#2-2-ARP协议" class="headerlink" title="2.2 ARP协议"></a>2.2 ARP协议</h3><p>ARP（Address Resolution Protocol）即地址解析协议， 用于实现从 IP 地址到 MAC 地址的映射，即询问目标IP对应的MAC地址。</p><p><strong>广播请求单播回应</strong></p><p><img src="https://img-blog.csdnimg.cn/f37ca6f86819482486c170f64bc2ea51.png" alt="ARP"></p><h3 id="2-3-RARP协议"><a href="#2-3-RARP协议" class="headerlink" title="2.3 RARP协议"></a>2.3 RARP协议</h3><p>逆向地址解析协议</p><p>用于根据本机自己的MAC地址，查询本机自己的IP的地址</p><h3 id="2-4-ICMP协议"><a href="#2-4-ICMP协议" class="headerlink" title="2.4 ICMP协议"></a>2.4 ICMP协议</h3><pre class="line-numbers language-none"><code class="language-none">Ping测试网络连通性Tracert路由跟踪H3C的设备开启路由跟踪功能需要的前置命令ip ttl-expires enableip unreachables enable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-IP数据转发原理"><a href="#2-5-IP数据转发原理" class="headerlink" title="2.5 IP数据转发原理"></a>2.5 IP数据转发原理</h3><p>如果目的IP和本机IP属于同一网段，会直接查询目的IP的Mac地址，并进行封装。</p><p>如果目的IP和本机IP不属于同一网段，会查询网关IP地址的Mac地址，并进行封装。 </p><p>路由器会隔离广播，所以ARP的广播请求不能跨网段请求Mac地址。</p><p><img src="https://img-blog.csdnimg.cn/95d14a2d498646f79c8e56d965dffb30.png"></p><h3 id="2-6-网关（Gateway）"><a href="#2-6-网关（Gateway）" class="headerlink" title="2.6 网关（Gateway）"></a>2.6 网关（Gateway）</h3><p>本网段出口的IP地址</p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数通 01-计算机网络基础</title>
      <link href="/2022-06-25-shu-tong-01-ji-suan-ji-wang-luo-ji-chu.html"/>
      <url>/2022-06-25-shu-tong-01-ji-suan-ji-wang-luo-ji-chu.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络基础"><a href="#计算机网络基础" class="headerlink" title="计算机网络基础"></a><strong><center>计算机网络基础</center></strong></h1><h2 id="1-计算机网络概述"><a href="#1-计算机网络概述" class="headerlink" title="1.计算机网络概述"></a><strong>1.计算机网络概述</strong></h2><h3 id="1-1计算机网络的定义"><a href="#1-1计算机网络的定义" class="headerlink" title="1.1计算机网络的定义"></a>1.1计算机网络的定义</h3><p>​        计算机网络是一组自治计算机互连的集合。（不管它是通过有线、无线还是蓝牙连接）</p><h3 id="1-2计算机网络的基本功能"><a href="#1-2计算机网络的基本功能" class="headerlink" title="1.2计算机网络的基本功能"></a>1.2计算机网络的基本功能</h3><ul><li><p>资源共享</p></li><li><p>分布式处理与负载均衡</p><p>​        分布式处理：把一个人的任务交给三个人处理。</p><p>​        负载均衡：把任务平均的分配给三个人干。</p></li><li><p>综合信息服务</p></li></ul><h3 id="1-3计算机网络的演进"><a href="#1-3计算机网络的演进" class="headerlink" title="1.3计算机网络的演进"></a>1.3计算机网络的演进</h3><p><img src="https://img-blog.csdnimg.cn/d5e1380c6e5e43c18fa485403af01845.png" alt="计算机网络的演进"></p><h3 id="1-4计算机网络的类型"><a href="#1-4计算机网络的类型" class="headerlink" title="1.4计算机网络的类型"></a>1.4计算机网络的类型</h3><p>局域网、城域网、广域网</p><p>广义广域网：局域网之外都是广域网，没有城域网或是城域网包括在广域网内。</p><p>狭义广域网：城域网和广域网分开。</p><pre class="line-numbers language-none"><code class="language-none">局域网LAN(Local Area Network)→通常指几千米以内的，可以通过某种介质互联的计算机、打印机、modem或其他设备的集合(由用户自行组建，由私有地址组建的内部网络。)城域网MAN (Metropolitan Area Network)→MAN覆盖范围为中等规模，介于局域网和广域网之间，通常是在一个城市内的网络连接（距离为10KM左右，由运营商或大规模企业建设，连接城市范围的网络） 广域网WAN(Wide Area Network)→分布距离远，它通过各种类型的串行连接以便在更大的地理区域内实现接入（由运营商建设，连接城域网范围的网络，又称骨干网、核心网、传输网）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5网络拓扑"><a href="#1-5网络拓扑" class="headerlink" title="1.5网络拓扑"></a>1.5网络拓扑</h3><p><strong>定义</strong></p><p>网络设备连接排列方式</p><p><strong>分类</strong></p><p><img src="https://img-blog.csdnimg.cn/3c21d8292dc44fd48c9e296aeccb53c1.png" alt="拓扑图"></p><p><img src="https://img-blog.csdnimg.cn/6f80184ecb234b50bc232cf28d45df06.png" alt="优缺点"></p><h3 id="1-6衡量网络性能的指标"><a href="#1-6衡量网络性能的指标" class="headerlink" title="1.6衡量网络性能的指标"></a>1.6衡量网络性能的指标</h3><ul><li><p><strong>带宽（bandwidth）</strong></p><p>→描述在一定时间范围内能够从一个节点传送到另一个节点的数据量</p><p>→通常以bps为单位</p><p>→例如以太网带宽为10Mbps，快速以太网为100Mbps</p></li><li><p><strong>延迟（delay）</strong></p><p>→描述网络上数据从一个节点传送到另一个节点所经历的时间</p><pre class="line-numbers language-none"><code class="language-none">1Kb=1024b1Mb=1024Kb1Gb=1024MbByte字节，一个数字或字母占用1字节，一个汉子占用2字节bit比特，1Byte=8bit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/57b72e9ca2fd4dfcbcc2a6ff92cd8c2d.png" alt="协议"></p></li></ul><h2 id="2-网络参考模型"><a href="#2-网络参考模型" class="headerlink" title="2.网络参考模型"></a><strong>2.网络参考模型</strong></h2><h3 id="2-1OSI参考模型"><a href="#2-1OSI参考模型" class="headerlink" title="2.1OSI参考模型"></a>2.1OSI参考模型</h3><p><img src="https://img-blog.csdnimg.cn/3bf22c71a03f42cb9e029fe301183559.png" alt="OSI"></p><p><img src="https://img-blog.csdnimg.cn/2377997fd31b440db481785e21428474.png" alt="分层"></p><h3 id="2-2TCP-IP模型"><a href="#2-2TCP-IP模型" class="headerlink" title="2.2TCP/IP模型"></a>2.2TCP/IP模型</h3><p>4层为理论划分 标准、5层为实际使用标准</p><p><img src="https://img-blog.csdnimg.cn/b0994e89d1d64174bb0d07a76eb0b2b5.png" alt="TCP/IP"></p><h3 id="2-3数据封装和解封装过程"><a href="#2-3数据封装和解封装过程" class="headerlink" title="2.3数据封装和解封装过程"></a>2.3数据封装和解封装过程</h3><ul><li>数据发送时，从上至下逐层封装</li><li>数据接收时，从下至上逐层解封装</li><li>只有拆除外层封装，才能看到内层封装</li></ul><h2 id="3-局域网基本原理"><a href="#3-局域网基本原理" class="headerlink" title="3.局域网基本原理"></a>3.局域网基本原理</h2><h3 id="3-1使用的协议及线缆"><a href="#3-1使用的协议及线缆" class="headerlink" title="3.1使用的协议及线缆"></a>3.1使用的协议及线缆</h3><pre class="line-numbers language-none"><code class="language-none">物理层：双绞线、同轴线缆、光纤、无线电数据链路层：以太网唯一事实标准令牌环（淘汰）FDDI 光纤分布式接口 （淘汰）网络层： IP 唯一事实标准IPX （淘汰）Apple talk （淘汰）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2局域网设备"><a href="#3-2局域网设备" class="headerlink" title="3.2局域网设备"></a>3.2局域网设备</h3><pre class="line-numbers language-none"><code class="language-none">集线器：内部为总线型拓扑；任意时间只能由一台主机占用总线，连接的所有设备位于同一个冲突域；工作在物理层，没有寻址能力，所有数据泛洪式转发。交换机：内部的每两个接口都是一个独立的路径，每一个接口都是一个独立的冲突域；工作在数据链路层，给予MAC地址寻址，数据可单点转发。冲突域：设备发送数据会产生冲突的网络范围；集线器的所有接口在同一个冲突域；交换机的每个接口都是一个独立的冲突域CSMA/CD：带冲突检测的载波侦听多路访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3局域网线缆"><a href="#3-3局域网线缆" class="headerlink" title="3.3局域网线缆"></a>3.3局域网线缆</h3><pre class="line-numbers language-none"><code class="language-none">双绞线：线型   直连线  异类直连（一端路由器一端交换机，使用直连线）；两端线序一致（两端都是568A或568B）  交叉线  同类交叉；两端线序不一致线序   T568A (白绿，绿，白橙，蓝，白蓝，橙，白棕，棕)  T568B (白橙，橙，白绿，蓝，白蓝，绿，白棕，棕)    注意：1、2针发射，3、6针接收，4、5针语音；参考EIA/TIA标准协议接口类型RJ-45;RJ-11光纤：多模光纤：纤芯较粗，可以传递多种光源；传输距离短；成本低单模光纤：纤芯较细，只能传递单一光源；传输距离远；成本高<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-广域网基本原理"><a href="#4-广域网基本原理" class="headerlink" title="4.广域网基本原理"></a>4.广域网基本原理</h2><h3 id="4-1广域网的作用"><a href="#4-1广域网的作用" class="headerlink" title="4.1广域网的作用"></a>4.1广域网的作用</h3><ul><li><p>基于电信运营商的通信网络设施建立远程连接</p></li><li><p>在相距遥远的局域网之间建立连接性</p></li></ul><p><img src="https://img-blog.csdnimg.cn/05713e9d1a3d4b2cb2f0dc70878172bd.png" alt="广域网基本原理"></p>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICMP协议</title>
      <link href="/2022-06-25-icmp-xie-yi.html"/>
      <url>/2022-06-25-icmp-xie-yi.html</url>
      
        <content type="html"><![CDATA[<h1 id="ICMP-协议分析"><a href="#ICMP-协议分析" class="headerlink" title="ICMP 协议分析"></a>ICMP 协议分析</h1><h2 id="1-1-本章简介"><a href="#1-1-本章简介" class="headerlink" title="1.1 本章简介"></a>1.1 本章简介</h2><p>Internet控制消息协议ICMP（Internet Control Message Protocol）是网络层的一个重要协议。ICMP协议用来在网 络设备间传递各种差错和控制信息，并对于收集各种网络信息、诊断和排除各种网络故障等方面起着至关重要的作用。使用基于ICMP的应用时，需要对ICMP的工作原理非常熟悉。</p><h2 id="1-2I-CMP协议原理"><a href="#1-2I-CMP协议原理" class="headerlink" title="1.2I CMP协议原理"></a>1.2I CMP协议原理</h2><h3 id="1-2-1-ICMP"><a href="#1-2-1-ICMP" class="headerlink" title="1.2.1 ICMP"></a>1.2.1 ICMP</h3><p><img src="https://img-blog.csdnimg.cn/737c28d495144e82b3af7fe90fdd5cbd.png" alt="ICMP"></p><pre class="line-numbers language-none"><code class="language-none">ICMP是TCP／IP协议簇的核心协议之一，它用于在IP网络设备之间发送控制报文，传递差错、控制、查询等信息。 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-2-ICMP重定向"><a href="#1-2-2-ICMP重定向" class="headerlink" title="1.2.2 ICMP重定向"></a>1.2.2 ICMP重定向</h3><p><img src="https://img-blog.csdnimg.cn/2a7345d8ef7e4d3cad8b2a80d09c8e98.png" alt="ICMP重定向"></p><pre class="line-numbers language-none"><code class="language-none">ICMP Redirect重定向消息用于支持路由功能。如图所示，主机A希望发送报文到服务器A，于是根据配置的默认网关地址向网关RTB发送报文，网关RTB收到报文后，检查报文信息，发现报文应该转发到与源主机在同一网段的另一个网关设备RTA，因为此转发路径是更优的路径，所以RTB会向主机发送一个Redirect消息，通知主机直接向另一个网关RTA发送该报文。主机收到Redirect消息后，会向RTA发送报文，然后RTA会将该报文再转发给服务器A。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-3-ICMP差错检测（Ping）"><a href="#1-2-3-ICMP差错检测（Ping）" class="headerlink" title="1.2.3 ICMP差错检测（Ping）"></a>1.2.3 ICMP差错检测（Ping）</h3><p>ICMP Echo Request和ICMP Echo Reply分别用来查询和响应某些信息，进行差错检测。</p><h3 id="1-2-4-ICMP错误报告"><a href="#1-2-4-ICMP错误报告" class="headerlink" title="1.2.4 ICMP错误报告"></a>1.2.4 ICMP错误报告</h3><p>当网络设备无法访问目标网络十，会自动发送ICMP目的不可达报文到发送端设备。</p><p><img src="https://img-blog.csdnimg.cn/12946fe1c516453dbf38dfde7e16f683.png" alt="ICMP错误报告"></p><pre class="line-numbers language-none"><code class="language-none">ICMP定义了各种错误消息，用于诊断网络连接性问题；根据这些错误消息，源设备可以判断出数据传输失败的原因。比如，如网络中发生了环路，导致报文在网络中循环，且最终TTL超时，这种情况下网络设备会发送TTL超时消息给发送端设备。又比如如果目的地不可达，则中间的网络设备会发送目的不可达消息给发送端设备。目的不可达的情况有多种，如果是网络设备无法找到目的网络，则发送目的网络不可达消息；如果网络设备无法找到目的网络中的目的主机，则发送目的主机不可达消息。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-5-ICMP数据包格式"><a href="#1-2-5-ICMP数据包格式" class="headerlink" title="1.2.5 ICMP数据包格式"></a>1.2.5 ICMP数据包格式</h3><p>Type表示ICMP消息类型，Code表示同一消息类型中的不同消息。</p><p><img src="https://img-blog.csdnimg.cn/9ccf44772f604d96bebd6f35ec4ba146.png" alt="ICMP数据包类型"></p><pre class="line-numbers language-none"><code class="language-none">ICMP消息封装在IP报文中。ICMP消息的格式取决于Type和Code字段，其中Type字段为消息类型，code字段包含该消息类型的具体参数。后面的校验和字段用于检查消息是否完整。消息中包含32比特的可变参数，这个字段一般不使用，通常设置为0。在ICMPRedirect消息中，这个字段用来指定网关IP地址，主机根据这个地址将报文重定向到指定网关。在Echo请求消息中，这个字段包含标识符和序号，源端根据这两个参数将收到的回复消息与本端发送的Echo请求消息进行关联。尤其是当源端向目的端发送了多个Echo请求消息时，需要根据标识符和序号将Echo请求和回复消息进行一一对应。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-6-ICMP消息类型和编码类型"><a href="#1-2-6-ICMP消息类型和编码类型" class="headerlink" title="1.2.6 ICMP消息类型和编码类型"></a>1.2.6 ICMP消息类型和编码类型</h3><p><img src="https://img-blog.csdnimg.cn/ef35ea2c01c34cf39ad3e7345d57dae4.png" alt="IPCM消息类型和编码类型"></p><pre class="line-numbers language-none"><code class="language-none">1．ICMP定义了多种消息类型，并用于不同的场景。有些消息不需要Code字段来描述具体类型参数，仅用Type字段表示消息类型。比如，ICMP Echo回复消息的Type字段设置为0。2．有些ICMP消息使用Type字段定义消息大类，用Code字段表示消息的具体类型。比如，类型为3的消息表示目的不可达，不同的Code值表示不可达的原因，包括目的网络不可达（Code＝0）、目的主机不可达（Code＝1）、协议不可达（Code＝2）、目的TCP／UDP端口不可达（Code＝3）等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="1-3-ICMP的应用"><a href="#1-3-ICMP的应用" class="headerlink" title="1.3 ICMP的应用"></a>1.3 ICMP的应用</h2><h3 id="1-3-1-ICMP应用-Ping"><a href="#1-3-1-ICMP应用-Ping" class="headerlink" title="1.3.1 ICMP应用-Ping"></a>1.3.1 ICMP应用-Ping</h3><p><img src="https://img-blog.csdnimg.cn/29d9e0db38994d4382ae25bf8dcece62.png" alt="Ping"></p><pre class="line-numbers language-none"><code class="language-none">ICMP的一个典型应用是Ping。Ping是检测网络连通性的常用工具，同时也能够收集其他相关信息。用户可以在Ping命令中指定不同参数，如ICMP报文长度、发送的ICMP报文个数、等待回复响应的超时时间等，设备根据配置的参数来构造并发送ICMP报文，进行Ping测试。Ping常用的配置参数说明如下：1．-a source-ip-address指定发送ICMP ECHO-REQUEST报文的源IP地址。如果不指定源IP地址，将采用出接口的IP地址作为ICMP ECHO-REQUEST报文发送的源地址。2．-c count指定发送ICMP ECHO-REQUEST报文次数。缺省情况下发送5个ICMP ECHO-REQUEST报文。 3．-h ttl-value指定TTL的值。缺省值是255。4．-t timeout指定发送完ICMP ECHO-REQUEST后，等待ICMP ECHO-REPLY的超时时间。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-2-ICMP应用-Tracert（越点追踪）"><a href="#1-3-2-ICMP应用-Tracert（越点追踪）" class="headerlink" title="1.3.2 ICMP应用-Tracert（越点追踪）"></a>1.3.2 ICMP应用-Tracert（越点追踪）</h3><p><img src="https://img-blog.csdnimg.cn/eacb2d4116b74351b286221046be086d.png" alt="Tracert"></p><pre class="line-numbers language-none"><code class="language-none">ICMP的另一个典型应用是Tracert， Tracert基于报文头中的TTL值来逐跳很踪报文的转发路径。为了跟综到达某特定目的地址的路径，源端首先将报文的TTL值设置为1，该报文到达第一个节点后，TTL超时，于是该节点向源端发送TTL超时消息，消息中携带时间截。然后源端将报文的TTL值设置为2，报文到达第二个节点后超时，该节点同样返回TTL超时消，息，以此类推，直到报文到达目的地。这样，源端根据返回的报文中的信息可以跟踪到报文经过的每一个节点，并根据时间截信息计算往返时间。Tracert是检测网络丢包及时延的有效手段，同时可以帮助管理员发现网络中的路由环路。Tracert常用的配置参数说明如下：—a source—ip—address指定tracert报文的源地址。—f first—ttl指定初始TTL。缺省值是1。—m max—ttl指定最大TTL，缺省值是30。—name使能显示每一跳的主机名。—P port指定目的主机的UDP端口号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/a412779415bf4a5984b24aa438006813.png" alt="tracert"></p><h4 id="Type表示"><a href="#Type表示" class="headerlink" title="Type表示"></a>Type表示</h4><pre class="line-numbers language-none"><code class="language-none">1．源端（RTA）向目的端（主机B）发送一个UDP报文，TTL值为1，目的UOP端口号是大于30000的一个数，因为在大多数情况下，大于30000的UDP口号是任何一个应用程序都不可能使用的端口号。2．第一跳（RTB）收到源端发出的UOP报文后，判断出报文的目的IP地址不是本机IP地址，将TTL值减1后，判断出TTL值等于e，则丢弃报文并向源端发送一个ICMP超时（Time Exceeded）报文（该报文中含有第一跳的IP地址10.0.0.2），这样源端就得到了RTB的地址。3．源端收到RTB的ICMP超时报文后，再次向目的端发送一个UDP报文，TTL值为2。4．第二跳（RTC）收到源端发出的UDP报文后，回应一个ICMP超时报文，这样源送就得到了RTC的地址（20.0.0.2）。5．以上过程不断进行，直到目的端收到源端发送的UDP报文后，判断出目的IP地址是本机IP地址，则处理此报文，根据报文中的目的UDP端号寻找占用此端口号的上层协议，因目的端没有应用程序使用该UDP端口号，则向源端返回一个ICMP端口不可达（Destination Unreachable）报文。6．源端收到ICMP端口不可达报文后，判断出UDP报文已经到达目的端，则停止Tracert程序，从而得到数据报文从源端到目的端所经历的路径（10.0.0.2：20.0.0.2：30.0.0.2）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h4><pre class="line-numbers language-none"><code class="language-none">1.Ping使用的是哪两类ICMP消息?Ping利用ICMP Echo请求(request)消息（Type值为8）来发起检测目的可达性。目的端收到ICMP Echo请求消息后，根据IP报文头中的源地址向源端发送ICMP Echo回复(replay)消息（Type值为8）。2.当网络设备收到TTL值为e的IP报文时，会如何操作？如果IP数据包在到达目的地之前TTL值已经降为0，则收到IP数据包的网络设备会丢弃该数据包，并向源端发送ICMP消息通知源端TTL超时。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ICMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo优化日志</title>
      <link href="/2022-04-19-hexo-you-hua-ri-zhi.html"/>
      <url>/2022-04-19-hexo-you-hua-ri-zhi.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo优化日志"><a href="#Hexo优化日志" class="headerlink" title="Hexo优化日志"></a>Hexo优化日志</h1><h2 id="Hexo优化——gulp（2022-04-19）"><a href="#Hexo优化——gulp（2022-04-19）" class="headerlink" title="Hexo优化——gulp（2022.04.19）"></a>Hexo优化——gulp（2022.04.19）</h2><p>gulp通过对站点使用的静态资源进行压缩，来优化网站的访问速度。</p><p>参考地址：</p><p><a href="https://www.jianshu.com/p/1123c89c491a">Hexo博客使用gulp压缩静态资源 - 简书 (jianshu.com)</a></p><p>使用命令：</p><pre class="line-numbers language-none"><code class="language-none">hexo cleanhexo ggulphexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Hexo优化——jsdeliver（2022-04-19）"><a href="#Hexo优化——jsdeliver（2022-04-19）" class="headerlink" title="Hexo优化——jsdeliver（2022.04.19）"></a>Hexo优化——jsdeliver（2022.04.19）</h2><p>在网站搭建完后，发现图片加载和网页切换都十分缓慢，在网上找了教程将网站的静态js、css等全部使用jsdeliver+github进行加速。</p><p>将Banner图和其他blog卡片上的图片全部放进了阿里云OSS存储的backet中。</p><p>参考地址：</p><p><a href="https://blog.csdn.net/Calvin_zhou/article/details/108733518">Hexo博客开发之——jsDeliver+Github加速图片访问_PGzxc的博客-CSDN博客</a></p><p>CDN本地推送方法：</p><pre class="line-numbers language-none"><code class="language-none">git add .git commit -m '第一次上传'  #注意如果不敲 -m ，git会默认进入编辑器。 git push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Markdown文档中使用方法：</p><pre class="line-numbers language-none"><code class="language-none">## jsdelivr图片的使用### 一 直接使用仓库的图片![][1]### 二 使用发布版本的图片![][2][1]:https://cdn.jsdelivr.net/gh/uprightokra/CDN/img/IS-IS/01.PNG[2]:https://cdn.jsdelivr.net/gh/uprightokra/CDN@1.0/img/IS-IS/01.PNG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Hexo优化——lazyload图片懒加载（2022-04-19）"><a href="#Hexo优化——lazyload图片懒加载（2022-04-19）" class="headerlink" title="Hexo优化——lazyload图片懒加载（2022.04.19）"></a>Hexo优化——lazyload图片懒加载（2022.04.19）</h2><p>参考地址：</p><p><a href="https://blog.csdn.net/tingqinxiyin/article/details/93494680">hexo图片懒加载方案_tingqinxiyin的博客-CSDN博客</a></p><h2 id="Hexo报错解决——token和ssh秘钥（2022-09-15）"><a href="#Hexo报错解决——token和ssh秘钥（2022-09-15）" class="headerlink" title="Hexo报错解决——token和ssh秘钥（2022.09.15）"></a>Hexo报错解决——token和ssh秘钥（2022.09.15）</h2><p>2022.09.15晚上时隔一个月重新开始往github仓库提交笔记，hexo g -d后弹出窗口提示输入Username以及Password。在正确输入用户名密码后却提示fatal: Authentication failed for  ‘<a href="https://github.com/xxx.git/%E2%80%98">https://github.com/xxx.git/‘</a></p><p>如何生成token和ssh秘钥请参考：<a href="https://blog.csdn.net/weixin_41010198/article/details/119698015">github开发人员在七夕搞事情：remote: Support for password authentication was removed on August 13, 2021._点亮～黑夜的博客-CSDN博客_github开发人员在七夕搞事情</a></p><h2 id="Hexo优化——域名解析（2022-11-14）"><a href="#Hexo优化——域名解析（2022-11-14）" class="headerlink" title="Hexo优化——域名解析（2022.11.14）"></a>Hexo优化——域名解析（2022.11.14）</h2><p>在阿里云里购买了属于自己的域名<a href="http://www.okra2saber.top,考虑到价格的性价比,所以直接买了10年的使用权./">www.okra2saber.top，考虑到价格的性价比，所以直接买了10年的使用权。</a></p><p>参考地址：</p><p><a href="https://blog.csdn.net/miss_bear/article/details/106164293">(34条消息) hexo博客设置域名_missbearC的博客-CSDN博客</a></p><p>原来二级域名转变成现在的域名后，Valine的评论功能出现了如下错误：</p><p><img src="https://img-blog.csdnimg.cn/b2ed6693f271447d995e1c83d23cccc9.png"></p><p>解决方法：在leancloud的评论应用-&gt;设置-&gt;安全中心-&gt;Web安全域名中修改新的域名</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eNSP基础操作</title>
      <link href="/2022-03-21-ensp-ji-chu-cao-zuo.html"/>
      <url>/2022-03-21-ensp-ji-chu-cao-zuo.html</url>
      
        <content type="html"><![CDATA[<h2 id="eNSP命令行使用"><a href="#eNSP命令行使用" class="headerlink" title="eNSP命令行使用"></a>eNSP命令行使用</h2><p><img src="https://img-blog.csdnimg.cn/64066547201545a595eadc756880e4bd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="vrp分层视图"></p><ul><li>为了简化操作，系统提供了快捷键，使用户能够快速执行操作。以上表格中提供了系统定义的快捷键。其他的快捷镇如下：</li><li>CTRL＋B 将光标向左移动一个字符。</li><li>CTRL＋D 删除当前光标所在位置的字符。</li><li>CTRL＋E 将光标移动到当前行的末尾。</li><li>CTRL＋F将光标向右移动一个字符。</li><li>CTRL＋H 删除光标左侧的一个字符。</li><li>CTRL＋N 显示历史命令缓冲区中的后一条命令。</li><li>CTRL＋P 显示历史命令缓冲区中的前一条命令。</li><li>CTRL＋W删除光标左侧的一个字符串。</li><li>CTRL＋X 删除光标左侧所有的字符。</li><li>CTRL＋Y删除光标所在位置及其右侧所有的字符。</li><li>ESC＋B 将光标向左移动一个字符串。</li><li>ESC＋D 删除光标右侧的一个字符串。ESC＋F 将光标向右移动一个字符串。</li></ul><h2 id="设备名称更改"><a href="#设备名称更改" class="headerlink" title="设备名称更改"></a>设备名称更改</h2><pre class="line-numbers language-R" data-language="R"><code class="language-R">&lt;Huawei&gt;system-view Enter system view, return user view with Ctrl+Z.[Huawei]sysname zj-router-001[zj-router-001]#命名规则一般为‘地名-设备-编号’<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="命令等级"><a href="#命令等级" class="headerlink" title="命令等级"></a>命令等级</h2><p><img src="https://img-blog.csdnimg.cn/4f5a818ff3ef4a26944f62f17c34cfba.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="命令等级"></p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token punctuation">[</span>Huawei<span class="token punctuation">]</span>command<span class="token operator">-</span>privilege level <span class="token number">3</span> view user save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>系统将命令进行分级管理，以增加设备的安全性。</li><li>设备管理员可以设置用户级别，一定级别的用户可以使用对应级别的命令行。</li><li>缺省情况下命令级别分为0～3级，用户级别分为0～15级。</li><li>用户e级为访问级别，对应网络诊断工具命令（ping、tracert）、从本设备出发访问外部设备的命令（Telnet客户端）、部分display命令等。</li><li>用户1级为监控级别，对应命令级e、1级，包括用于系统维护的命令以及display等命令。6．用户2级是配置级别，包括向用户提供直接网络服务，包括路由、各个网络层次的命令。</li><li>用户3—15级是管理级别，对应命令3级，该级别主要是用于系统运行的命令，对业务提供支撑作用，包括文件系统、FTP、TFTP下载、文件交换配置、电源供应控制，备份板控制、用户管理、命令级别设置、系统内部参数设置以及用于业务故障诊断的debugging命令。本例展示了如何修改命令级别，在用户视图下执行save命令需要3级的权限。</li><li>在具体使用中，如果我们有多个管理员账号，但只允许某一个管理员保存系统配置，则可以将save命令的级别提高到4级，并定义只有该管理员有4级权限。这样，在不影响其他用户的情况下，可以实现对命令的使用控制。</li></ol><h2 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h2><p><img src="https://img-blog.csdnimg.cn/516a982ce4e24aa28f15947a82ed1c52.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="用户界面"></p><ol><li>系统支持的用户界面包括Console用户界面和VTY用户界面。</li><li>控制口（Console Port）是一种通信串行端口，由设备的主控板提供。</li><li>虚拟类型终端（Virtual Type Terminal）是一种虚拟线路端口，用户通过终端与设备建立Telnet或SSH连接后，也就建立了一条VTY，即用户可以通过VTY方式登录设备。设备一般最多支持15个用户同时通过VTY方式访问。执行user—interface maximum—vty number 命令可以配置同时登录到设备的VTY类型用户界面的最大个数。如果将最大登录用户数设为0，则任何用户都不能通过Telnet或者SSH登录到路由器。display user—interface 命令用来查看用户界面信息。</li><li>不同的设备，或使用不同版本的VRP软件系统，具体可以被使用的VTY接口的最大数量可能不同。VTY 接口最大可配范围为0-14。</li></ol><h2 id="console配置"><a href="#console配置" class="headerlink" title="console配置"></a>console配置</h2><pre class="line-numbers language-none"><code class="language-none">[RTA]user-interface console 0    进入console口管理控制界面[RTA]authentication-mode password开启密码认证模式[RTA]set authentication password cipher forest设置加密密码forest是密码[RTA]idle-timeout 1 30第一个数字代表分，第二个数字代表秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/3170ce2215de42cf80e949c27cbdfd35.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="效果图"></p><h2 id="配置用户界面命令"><a href="#配置用户界面命令" class="headerlink" title="配置用户界面命令"></a>配置用户界面命令</h2><p><img src="https://img-blog.csdnimg.cn/31d2d360f3204fb1af62f991c5a350a7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="配置用户界面命令"></p><p><img src="https://img-blog.csdnimg.cn/71a0c94c42d34a7bb0b7c630aa5bd1fc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16"></p><ol><li>用户可以设置Console界面和VTY界面的属性，以提高系统安全性。如果一个连接上设备的用户一直处于空闲状态而不断开，可能会给系统带来很大风险，所以在等待一个超时时间后，系统会自动中断连接。这个闲置切断时间又称超时时间，默认为10分钟。</li><li>当display命令输出的信息超过一页时，系统会对输出内容进行分页，使用空格键切换下一页。</li><li>如果一页输出的信息过少或过多时，用户可以执行screen—1ength命令修改信息输出时一页的行数。默认行数为24，最大支持512行。不建议将行数设置为0，因为那样将不会显示任何输出内容了。</li><li>每条命令执行过后，执行的记录都保存在历史命令缓存区。用户可以利用（↑），（↓），CTRL＋P，Ctr1＋N这些快捷键调用这些命令。历史命令缓存区中默认能存储10条命令，可以通过运行history—command max—size改变可存储的命令数，最多可存储256条。</li></ol><h2 id="恢复出厂设置"><a href="#恢复出厂设置" class="headerlink" title="恢复出厂设置"></a>恢复出厂设置</h2><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token punctuation">[</span>switch<span class="token punctuation">]</span> erase startuo<span class="token operator">-</span>configure<span class="token punctuation">[</span>switch<span class="token punctuation">]</span> reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="手动关闭端口"><a href="#手动关闭端口" class="headerlink" title="手动关闭端口"></a>手动关闭端口</h2><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token punctuation">[</span>sw1<span class="token punctuation">]</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> int f0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">[</span>sw1<span class="token punctuation">]</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="手动开启端口"><a href="#手动开启端口" class="headerlink" title="手动开启端口"></a>手动开启端口</h2><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token punctuation">[</span>sw1<span class="token punctuation">]</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> int f0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">[</span>sw1<span class="token punctuation">]</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> no shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交换机的基本原理</title>
      <link href="/2022-03-17-jiao-huan-ji-de-ji-ben-yuan-li.html"/>
      <url>/2022-03-17-jiao-huan-ji-de-ji-ben-yuan-li.html</url>
      
        <content type="html"><![CDATA[<h1 id="交换机的基本原理"><a href="#交换机的基本原理" class="headerlink" title="交换机的基本原理"></a>交换机的基本原理</h1><h2 id="小型交换机网络"><a href="#小型交换机网络" class="headerlink" title="小型交换机网络"></a>小型交换机网络</h2><p>交换机工作在数据链路层，对数据帧进行操作。在收到数据帧后，会根据数据帧的头部信息对数据帧进行转发。</p><p>有了交换机，在一定程度上解决了冲突域问题。</p><h2 id="交换机的转发行为"><a href="#交换机的转发行为" class="headerlink" title="交换机的转发行为"></a>交换机的转发行为</h2><p><img src="https://img-blog.csdnimg.cn/2692840d4b6c4b82b32f77d49b92ccdb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="交换机的转发"></p><p>1．泛洪：交换机把从某一端口进来的帧通过所有其它的端口转发出去（注意，“所有其它的端口”是指除了这个帧进入交换机的那个端口以外的所有端口）。</p><p>2．转发：交换机把从某一端口进来的帧通过另一个端口转发出去（注意，“另一个端口”不能是这个帧进入交换机的那个端口）。</p><p>3．丢弃：交换机把从某一端口进来的帧直接丢弃。</p><h2 id="交换机的转发原理"><a href="#交换机的转发原理" class="headerlink" title="交换机的转发原理"></a>交换机的转发原理</h2><h3 id="MAC地址表"><a href="#MAC地址表" class="headerlink" title="MAC地址表"></a>MAC地址表</h3><p><img src="https://img-blog.csdnimg.cn/0d2ea5a703584c9f96980ef9d0e1f6ac.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="MAC地址表"></p><p>1．交换机中有一个MAC地址表，里面存放了MAC地址与交换机端口的映射关系。MAC地址表也称为CAM（ContentAddressable Memory）表。</p><h3 id="MAC地址表与转发行为的关系"><a href="#MAC地址表与转发行为的关系" class="headerlink" title="MAC地址表与转发行为的关系"></a>MAC地址表与转发行为的关系</h3><p>1．如果进入交换机的是一个单播帧，则交换机会去MAC地址表中查找这个帧的目的MAC地址。</p><p>​        1）如果查不到这个MAC地址，则交换机执行泛洪操作。</p><p>​        2）如果查到了这个MAC地址，则比较这个MAC地址在MAC地址表中对应的端口是不是这个帧进入交换机的那个端口。如果不是，则交换机执行转发操作。如果是，则交换机执行丢弃操作。</p><p>2．如果进入交换机的是一个广播帧，则交换机不会去查MAC地址表，而是直接执行泛洪操作。</p><p>3．如果进入交换机的是一个组播帧，则交换机的处理行为比较复杂，超出了这里的学习范围，所以略去不讲。</p><p>4．另外，交换机还具有学习能力。当一个帧进入交换机后，交换机会检查这个帧的源MAC地址，并将该源MAC地址与这个帧进入交换机的那个端口进行映射，然后将这个映射关系存放进MAC地址表。</p><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>作用：已知IP地址解析MAC地址</p><p>ARP协议可以说是tcp/ip协议簇中最不安全的协议，但离开他又不行。</p><h3 id="ARP工作原理"><a href="#ARP工作原理" class="headerlink" title="ARP工作原理"></a>ARP工作原理</h3><ul><li>发送ARP广播：内容是我的IP是XXX，我的MAC是XXX，谁的IP是XXX，你的MAC是？？？</li></ul><p><img src="https://img-blog.csdnimg.cn/66ad12e978354f5f8fb15291b47c46a6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="ARP"></p><ol><li>主机B和主机C接收到此数据帧后，都会查看该ARP数据帧。但是主机B不会回复该帧，主机c会处理该帧并发送ARP回应，此回复数据帧的目的MAC地址为主机A的MAC地址，源MAC地址为主机C的MAC地址。</li><li>SWA收到回复数据帧时，会将该帧的源MAC地址和接口的映射关系添加到MAC地址表中。</li><li>如果此映射关系在MAC地址表已经存在，则会被刷新。然后SWA查询MAC地址表，根据帧的目的MAC地址找到对应的转发端口后，从G0/0/1转发此数据帧。</li></ol><ul><li>目标回应ARP单播，当pc收到ARP单播回应后，在计算机本地生成ARP缓存表</li></ul>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分层思想和网络模型</title>
      <link href="/2022-03-14-fen-ceng-si-xiang-he-wang-luo-mo-xing.html"/>
      <url>/2022-03-14-fen-ceng-si-xiang-he-wang-luo-mo-xing.html</url>
      
        <content type="html"><![CDATA[<h2 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h2><p>OSI参考模型各个层次的基本功能如下：</p><p>1．物理层：在设备之间传输比特流。</p><p>2．数据链路层：将比特组合成字节，再将字节组合成帧，使用链路层地址（以太网使用MAC地址）来访问介质，并进行差错检测。</p><p>3．网络层：提供逻辑地址的寻址，供路由器确定路径。</p><p>4．传输层：提供面向连接或非面向连接的数据传递以及进行重传前的差错检测。</p><p>5．会话层：负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。</p><p>6．表示层：提供各种用于应用层数据的编码和转换功能，确保一个系统的应用层发送的数据能被另一个系统的应用层识别。</p><p>7．应用层：OSI参考模型中最靠近用户的一层，为应用程序提供网络服务。</p><p><img src="https://img-blog.csdnimg.cn/a48cf068da5a467a8e95dd9b34fd9d90.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="OSI"></p><h2 id="TCP-IP参考模型"><a href="#TCP-IP参考模型" class="headerlink" title="TCP/IP参考模型"></a>TCP/IP参考模型</h2><p>TCP/IP参考模型各个层次的基本功能如下：</p><p>1．TCP／P模型同样采用了分层结构，层与层相对独立但是相互之间也具备非常密切的协作关系。</p><p>2．TCP／IP模型将网络分为四（五）层。</p><p>3．TCP／IP模型不关注底层物理介质，主要关注终端之间的逻辑数据流转发。（针对四层模型）</p><p>4．TCP／IP模型的核心是网络层和传输层，网络层解决网络之间的逻辑转发问题，传输层保证源端到目的端之间的可靠传输。</p><p>5．TCP／IP模型将OSI中应用层、表示层、会话层合并为了一层——应用层。最上层的应用层通过各种协议向终端用户提供业务应用。</p><p>6．TCP／IP模型具备了OSI的全部优点并且简化了结构。</p><p><img src="https://img-blog.csdnimg.cn/5f2bfb26d5204f018d0abfb14386be77.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="TCP/IP"></p><p><img src="https://img-blog.csdnimg.cn/2be5cf5cdfbb4cf7aae2759f06530bff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_13,color_FFFFFF,t_70,g_se,x_16" alt="tcp/ip 5层模型"></p><h2 id="设备与层的对应关系"><a href="#设备与层的对应关系" class="headerlink" title="设备与层的对应关系"></a>设备与层的对应关系</h2><p><img src="https://img-blog.csdnimg.cn/f784fa8792e14f2b9e36e91b94cf592a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="设备与层的对应关系"></p><h2 id="封装与解封装"><a href="#封装与解封装" class="headerlink" title="封装与解封装"></a>封装与解封装</h2><h3 id="1．PDU的种类"><a href="#1．PDU的种类" class="headerlink" title="1．PDU的种类"></a>1．PDU的种类</h3><p>PDU协议数据单元：每一层的层协议在其对等层之间交流的信息叫做协议数据单元</p><p>上三层（应用层）：message      高层数据／数据信息</p><p>传输层：segment     段</p><p>网络层：packet    包／报文</p><p>数据链路层：frame    帧 </p><p>物理层：bit     比特</p><h3 id="2．封装与解封装的定义"><a href="#2．封装与解封装的定义" class="headerlink" title="2．封装与解封装的定义"></a>2．封装与解封装的定义</h3><p>封装：当一台主机要通过网络发送数据时，数据要从高层一层一层的向下传输，每一层的协议会把“数据”装到一个I特殊的协议报头中</p><p>解封装：当一台主机收到了“数据”，要从低层一步一步摘掉报头。也就是说解封装时封装的逆向过程</p><p><img src="https://img-blog.csdnimg.cn/732d9369a574443595c47bd5ef7376b1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="封装与解封装"></p><p>封装就是一层一层的添加包头，解封装就是一层一层拆包头。</p><p><img src="https://img-blog.csdnimg.cn/d3304b2b804a46cf82c8fb20f1fb10d1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="各层间通信"></p><h2 id="TCP-IP协议族的组成"><a href="#TCP-IP协议族的组成" class="headerlink" title="TCP/IP协议族的组成"></a>TCP/IP协议族的组成</h2><p><img src="https://img-blog.csdnimg.cn/cc1ec8f5aab740398bb4dc36b316cd44.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="TCP/IP协议族的组成"></p><h2 id="数据链路层（data-link-layer）"><a href="#数据链路层（data-link-layer）" class="headerlink" title="数据链路层（data link layer）"></a>数据链路层（data link layer）</h2><p>数据链路层是OSI参考模型中的第二层，介乎于物理层和网络层之间。数据链路层在物理层提供的服务的基础上向网络层提供服务，其最基本的服务是将源自物理层来的数据可靠地传输到相邻节点的目标机网络层。</p><p>数据链路层的传输单元：帧</p><p>工作在二层的网络设备：交换机</p><h2 id="Ethernet＿II介绍"><a href="#Ethernet＿II介绍" class="headerlink" title="Ethernet＿II介绍"></a>Ethernet＿II介绍</h2><p>1．上世纪80年代初提出的DIX v2格式，即Ethernet II帧格式。</p><p>2．Ethernet II后来被IEEE 802标准接纳，并写进了IEEE 802.3x-1997的3.2.6节。</p><h2 id="IEEE802-3介绍"><a href="#IEEE802-3介绍" class="headerlink" title="IEEE802.3介绍"></a>IEEE802.3介绍</h2><p>1.1983年提出IEEE 802.3格式。</p><p>2．Ethernet＿II 和IEEE802.3两种格式的主要区别在于Ethernet II格式中包含一个Type字段，标识以太帧处理完成之后将被发送到哪个上层协议进行处理，IEEE 802.3格式中，同样的位置是长度字段。</p><p><img src="https://img-blog.csdnimg.cn/660c43995c5b410db337c5e6ec942c13.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="帧格式"></p><pre class="line-numbers language-R" data-language="R"><code class="language-R">D.MAC是目的物理地址(6字节)S.MAC是源物理地址(6字节)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="如何区别Ethermet＿II和IEEE802-3"><a href="#如何区别Ethermet＿II和IEEE802-3" class="headerlink" title="如何区别Ethermet＿II和IEEE802.3"></a>如何区别Ethermet＿II和IEEE802.3</h2><p>1．不同的Type字段值可以用来区别这两种帧的类型。</p><p>2．当Type字段值小于等于1500（或者十六进制的ex05DC）时，帧使用的是IEEE 802.3格式。</p><p>3．当Type字段值大于等于1536（或者十六进制的0x0600）时，帧使用的是Ethernet II格式。</p><p>4．以太网中大多数的数据帧使用的是Ethernet II格式。</p><h3 id="Ethernet＿II介绍-1"><a href="#Ethernet＿II介绍-1" class="headerlink" title="Ethernet＿II介绍"></a>Ethernet＿II介绍</h3><p>1．上世纪80年代初提出的DIX v2格式，即Ethernet II帧格式。</p><p>2．Ethernet II后来被IEEE 802标准接纳，并写进了IEEE 802.3x-1997的3.2.6节。</p><h3 id="IEEE802-3介绍-1"><a href="#IEEE802-3介绍-1" class="headerlink" title="IEEE802.3介绍"></a>IEEE802.3介绍</h3><p>1.1983年提出IEEE 802.3格式。</p><p>2．Ethernet＿II 和IEEE802.3两种格式的主要区别在于Ethernet II格式中包含一个Type字段，标识以太帧处理完成之后将被发送到哪个上层协议进行处理，IEEE 802.3格式中，同样的位置是长度字段。</p><h2 id="帧结构分析"><a href="#帧结构分析" class="headerlink" title="帧结构分析"></a>帧结构分析</h2><h3 id="帧头帧尾"><a href="#帧头帧尾" class="headerlink" title="帧头帧尾"></a>帧头帧尾</h3><p>1．以太帧中还包括源和目的MAC地址，分别代表发送者的MAC和接收者的MAC———（目标MAC源MAC加type字段称之为帧头）</p><p>2．此外还有帧校验序列字段，用于检验传输过程中帧的完整性。———（FCS帧校验序列称之为帧尾）</p><p><img src="https://img-blog.csdnimg.cn/1d699c2dd5904da7aa931899e993d21a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="Ethernet_II帧格式"></p><h3 id="Ethernet＿ll的帧中各字段说明如下："><a href="#Ethernet＿ll的帧中各字段说明如下：" class="headerlink" title="Ethernet＿ll的帧中各字段说明如下："></a>Ethernet＿ll的帧中各字段说明如下：</h3><p>1．DMAC（Destination MAC）是目的MAC地址。DMAC字段长度为6个字节，标识帧的接收者。 </p><p>2．SMAC（Source MAC）是源MAC地址。SMAC字段长度为6个字节，标识帧的发送者。</p><p>3．类型字段（Type）用于标识数据字段中包含的高层协议，该字段长度为2个字节。类型字段取值为0x0800的帧代表IP协议帧；类型字段取值为ex0806的帧代表ARP协议帧。</p><p>4．数据字段（Data）是网络层数据，最小长度必须为46字节以保证帧长至少为64字节，数据字段的最大长度为1500字节。</p><p>5．循环冗余校验字段（FCS）提供了一种错误检测机制。该字段长度为4个字节。</p><p><img src="https://img-blog.csdnimg.cn/f925d85f2b02488fb1a2250cf220234f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="IEEE802.3帧格式"></p><h3 id="IEEE802-3的帧中各字段说明如下："><a href="#IEEE802-3的帧中各字段说明如下：" class="headerlink" title="IEEE802.3的帧中各字段说明如下："></a>IEEE802.3的帧中各字段说明如下：</h3><p>1．IEEE802.3帧格式类似于Ethernet＿II帧，只是Ethernet＿II帧的Type域被802.3帧的Length域取代，并且占用了Data字段的8个字节作为LLC和SNAP字段。</p><p>2．Length字段定义了Data字段包含的字节数。</p><p>3．逻辑链路控制LLC（Logical Link Control）由目的服务访问点D.SAP （Destination Service Access Point）、 源服务访问点S.SAP（Source Service Access Point）和Control字段组成。</p><p>（1）SAP服务访问点，它是一个层次系统的上下层之间进行通信的接口，N层的SAP就是N＋1层可以访问N层服务的地方。</p><p>（2）S.SAP可以理解为来源设备的服务点。（3）D.SAP可以理解为目的设备的服务点。</p><p>4．SNAP （Sub-network Access Protoco1）由机构代码（org Code）和类型（Type）字段组成。org Code三个字节都 为0。Type字段的含义与Ethernet＿II帧中的Type字段相同。</p><h2 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h2><p><img src="https://img-blog.csdnimg.cn/99742657b5704c91af4c48001d93e3d2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><p>1．如同每一个人都有一个名字一样，每一台网络设备都用物理地址来标识自己，这个地址就是MAC地址。</p><p>2．网络设备的MAC地址是全球唯一的。</p><p>3．MAC地址长度为48比特，通常用十六进制表示。</p><p>4．MAC地址包含两部分：前24比特是组织唯一标识符（OUI，organizationally Unique Identifier），由IEEE统一分 配给设备制造商。例如，华为的网络产品的MAC地址前24比特是0x00e0fc。后24位序列号是厂商分配给每个产品的唯一数值，由各个厂商自行分配（这里所说的产品可以是网卡或者其他需要MAC地址的设备）。</p><p><img src="https://img-blog.csdnimg.cn/aa5bac10dae349f0ac2d26c8e864a90e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="MAC组成"></p><p>MAC地址＝厂家标识＋内部编号＝＝＝＝实现了全球唯一！怎么查看自己的MAC地址？</p><p>ipconfig/all</p><h2 id="MTU分析"><a href="#MTU分析" class="headerlink" title="MTU分析"></a>MTU分析</h2><p>​    以太网和802.3对数据帧的长度都有一个限制，其最大值分别是1500字节和1492字节。链路层的这个特性称为MTU，即最大传输单元。不同类型网络的数帧长度大多数都有一个上限。如果IP层有一个数据报要传，而且数据帧的长度比链路层的MTU还大，那么IP层就需要进行分片即把数据报分成干片，这样每一片就都小于MTU</p><p>MTU：（最大传输单元）</p><p>Ethernet＿II帧结构最终效果图如下：</p><p><img src="https://img-blog.csdnimg.cn/179a4a7912e74037bf21362472df9233.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="Ethernet_II帧结构"></p><p>面试官：你描述一下帧结构？</p><p>答：帧是由帧头+上三层数据+帧尾，帧头包括目的MAC、源MAC、类型，帧尾是FCS，MTU：1500字节，最小46字节。</p><h2 id="eNSP实验"><a href="#eNSP实验" class="headerlink" title="eNSP实验"></a>eNSP实验</h2><p>ping抓包查看帧结构</p><p><img src="https://img-blog.csdnimg.cn/0b24b5413ea74e779a60948d9fc132e1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="PC基础配置"><br><img src="https://img-blog.csdnimg.cn/f66849a2806a420299171cab2faae2da.png" alt="拓扑图"><br><img src="https://img-blog.csdnimg.cn/c38a16702eb94474aed2d9785a7898eb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="抓包"></p><h2 id="数据链路层——数据帧的传输"><a href="#数据链路层——数据帧的传输" class="headerlink" title="数据链路层——数据帧的传输"></a>数据链路层——数据帧的传输</h2><p><img src="https://img-blog.csdnimg.cn/b652109a1ee043fca22611f7783b9882.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="数据帧传输"></p><p>1.以太网在二层链路上通过MAC地址来唯一标识网络设备，并且实现局域网上网络设备之间的通信。</p><p>2.发送端使用接收端的MAC地址作为目的地址。</p><p>3.以太帧封装完成后会通过物理层转行成比特流在物理介质上传输。</p><h2 id="单播"><a href="#单播" class="headerlink" title="单播"></a>单播</h2><p><img src="https://img-blog.csdnimg.cn/b975b7c4be034a5d98f4666649a0eccd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="单播"></p><p>单播指从单一源发送到单一目的端。</p><p>在冲突域中，所有主机都能收到源主机发送的单播帧，但是其他主机在收到帧后发现目的地址和本地MAC地址不一致，后会丢弃该帧，只有真正的目的主机才能接受并处理该帧。</p><h2 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h2><p><img src="https://img-blog.csdnimg.cn/bca07efd52e14a0fba8649d24ce4448d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="广播"></p><p>广播，表示帧从单一的源发送到共享以太网上的所有主机。广播帧的目的MAC地址为十六进制的FF:FF:FF:FF:FF:FF，所有接受到该广播帧的主机都要接受并处理这个帧。</p><p>广播会产生大量流量，导致带宽利用率下降，进而影响整个网络性能。</p><h2 id="组播"><a href="#组播" class="headerlink" title="组播"></a>组播</h2><p><img src="https://img-blog.csdnimg.cn/efce9fecdafd43bbbc172cf14c84e73e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="组播"></p><p>组播比广播更加高效。组播转发可以理解为选择性的广播，主机侦听特定组播地址，接收并处理目的MAC地址为该组播MAC地址的帧。</p><p>组播MAC地址和单播MAC地址是通过第一字节中的第8个比特区分的。组播MAC地址的第8个比特为1，而单播MAC地址的第8个比特为0。</p><h2 id="数据帧的发送和接收"><a href="#数据帧的发送和接收" class="headerlink" title="数据帧的发送和接收"></a>数据帧的发送和接收</h2><p>当主机接收到的数据帧所包含的目的MAC地址是自己时会把以太网封装剥掉向上层协议传输。</p><p><img src="https://img-blog.csdnimg.cn/1d70febd1899443697ddb7d26ea41999.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="数据帧的发送和接收"></p><p>1．帧从主机的物理接口发送出来后，通过传输介质传输到目的端。共享网络中，这个帧可能到达多个主机。主机检查帧头中的目的MAC地址，如果目的MAC地址不是本机MAC地址，也不是本机侦听的组播或广播MAC地址，则主机会丢弃收到的帧。</p><p>2．如果目的MAC地址是本机MAC地址，则接收该帧，检查帧校验序列（FCS）字段，并与本机计算的值对比来确定帧在传输过程中是否保持了完整性。如果帧的FCS值与本机计算的值不同，主机会认为帧已被破坏，并会丢弃该帧。如果该帧通过了FCS校验，则主机会根据帧头郎中的Type字段来确定将帧发送给上层哪个协议处理。本例中，Type字段的值为ex0800，表明该帧需要发送到IP协议上处理。在发送给IP协议之前，帧的头部和尾部会被剥掉。</p><p>思考总结</p><ol><li><p>网络设备如何确定以太网数据帧的上层协议？</p><p>以太网帧中包含一个Type字段，表示帧中数据应该发往上层哪个协议处理。IP协议对应Type值为0x0800，ARP协议对应Type值为0x0806。</p></li><li><p>终端设备接收到数据帧，会如何处理？</p><p>主机检查帧头中的目的MAC地址，如果目的MAC地址不是本机MAC地址，也不是本机侦听的组播或广播MAC地址，则主机会丢弃收到的帧。如果目的MAC地址是本机MAC地址，则接收该帧，检查帧校验序列（FCS）字段，并与本机计算的值对比来确定帧在传输过程中是否保持了完整性。如果检查通过，就会剥离帧头和帧尾，然后根据帧头中的Type字段来决定把数据发送到哪个上层协议进行后续处理。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Datacom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库基础操作(六)</title>
      <link href="/2022-03-13-mysql-shu-ju-ku-ji-chu-cao-zuo-liu.html"/>
      <url>/2022-03-13-mysql-shu-ju-ku-ji-chu-cao-zuo-liu.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL函数"><a href="#MySQL函数" class="headerlink" title="MySQL函数"></a>MySQL函数</h1><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>之前学习的聚合函数主要由：count、sum、min、max、avg，这些聚合函数，现在学习另一个函数：group_concat()。</p><p>group_cooncat()函数首先根据group by()指定的列进行分组，并用分隔符分割，将统一分组的值连接起来，返回一个字符串结果。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">group_concat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">distinct</span><span class="token punctuation">]</span> 字段名 <span class="token punctuation">[</span><span class="token keyword">order</span> <span class="token keyword">by</span> 排序字段 <span class="token keyword">asc</span><span class="token operator">/</span><span class="token keyword">desc</span><span class="token punctuation">]</span> separator <span class="token string">'分隔符'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将所有员工的名字合并成一行</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>emp_name<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定排序方式和分隔符</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#指定分隔符</span><span class="token keyword">select</span> department<span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>emp_name separator <span class="token string">';'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> department<span class="token punctuation">;</span><span class="token comment">#指定排序方式和分隔符</span><span class="token keyword">select</span> department<span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>emp_name <span class="token keyword">order</span> <span class="token keyword">by</span> salary <span class="token keyword">desc</span> separator <span class="token string">';'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> department<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库基础操作(五)</title>
      <link href="/2022-03-10-mysql-shu-ju-ku-ji-chu-cao-zuo-wu.html"/>
      <url>/2022-03-10-mysql-shu-ju-ku-ji-chu-cao-zuo-wu.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL的多表操作"><a href="#MySQL的多表操作" class="headerlink" title="MySQL的多表操作"></a>MySQL的多表操作</h1><h2 id="外键约束——一对多"><a href="#外键约束——一对多" class="headerlink" title="外键约束——一对多"></a>外键约束——一对多</h2><h3 id="创建外键约束"><a href="#创建外键约束" class="headerlink" title="创建外键约束"></a>创建外键约束</h3><p>在create table  语句中，通过foreign key 关键字来指定外键，具体语法如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>consaraint <span class="token operator">&lt;</span>外键名<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> 字段名  <span class="token keyword">references</span> <span class="token operator">&lt;</span>主表名<span class="token operator">&gt;</span> 主键列<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> mydb3<span class="token punctuation">;</span><span class="token keyword">use</span> mydb3<span class="token punctuation">;</span><span class="token comment">#创建部门表——主表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> dept<span class="token punctuation">(</span>detpno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>   <span class="token comment">#部门号</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>   <span class="token comment">#部门名字</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#创建员工表——从表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> emp<span class="token punctuation">(</span>eid <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    ename <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span><span class="token punctuation">,</span>    dept_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> emp_fk <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span> refrerences dept <span class="token punctuation">(</span>detpno<span class="token punctuation">)</span>  <span class="token comment">#外键约束</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改表时添加外键约束，前提是：从表中的外键列中的数据必须和主表中的主键列中的数据保持一致或者没有数据。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token operator">&lt;</span>数据表名<span class="token operator">&gt;</span> <span class="token keyword">add</span> <span class="token keyword">constraint</span> <span class="token operator">&lt;</span>外键名<span class="token operator">&gt;</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> （<span class="token operator">&lt;</span>列名<span class="token operator">&gt;</span>） refences <span class="token operator">&lt;</span> 主表名<span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>列名<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#创建部门表——主表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> dept<span class="token punctuation">(</span>detpno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>   <span class="token comment">#部门号</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>   <span class="token comment">#部门名字</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#创建员工表——从表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> emp<span class="token punctuation">(</span>eid <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>  <span class="token comment">#员工编号</span>    ename <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">#员工名字</span>    age <span class="token keyword">int</span><span class="token punctuation">,</span>   <span class="token comment">#员工年龄</span>    dept_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">#员工所属部门</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#创建外键约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> emp2 <span class="token keyword">add</span> <span class="token keyword">constraint</span> dept_id_fk <span class="token keyword">foreign</span><span class="token punctuation">(</span>dpet_id<span class="token punctuation">)</span>  <span class="token keyword">references</span> dept2 <span class="token punctuation">(</span>detpno<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/83243e36a73d498e966180d111e09cc8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="外键约束"></p><h3 id="外键约束——插入数据"><a href="#外键约束——插入数据" class="headerlink" title="外键约束——插入数据"></a>外键约束——插入数据</h3><p>​         数据插入必须先给主表添加数据，注意给从表添加数据时，外键列的值不能随便写，必须依赖主表的主键列。</p><h3 id="外键约束——删除数据"><a href="#外键约束——删除数据" class="headerlink" title="外键约束——删除数据"></a>外键约束——删除数据</h3><p>主表数据被从表依赖时，不能删除，否者可以删除。</p><p>从表的数据可以随便删。</p><h3 id="删除外键约束"><a href="#删除外键约束" class="headerlink" title="删除外键约束"></a>删除外键约束</h3><p>语法格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token keyword">drop</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token operator">&lt;</span>外键约束名<span class="token operator">&gt;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> emp2 <span class="token keyword">drop</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> dept_id_fk<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="外键约束——多对多"><a href="#外键约束——多对多" class="headerlink" title="外键约束——多对多"></a>外键约束——多对多</h2><p>在多对多关系中，A表的一行对应B的多行，B表的一行对应A表的多行，我们要新增一个中间表，来建立多对多的关系。</p><p><img src="https://img-blog.csdnimg.cn/4ec7d432eb34426295fad3da9d3fb5d6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_18,color_FFFFFF,t_70,g_se,x_16" alt="多对多"></p><p>实现：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#创建mydb3数据库</span><span class="token keyword">create</span> <span class="token keyword">database</span> mydb3<span class="token punctuation">;</span><span class="token comment">#使用mydb3</span><span class="token keyword">use</span> mydb3<span class="token punctuation">;</span><span class="token comment">#创建主表1——student</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> student<span class="token punctuation">(</span>sid <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">int</span><span class="token punctuation">,</span>gender <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#创建主表2——course</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> course<span class="token punctuation">(</span>cid <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>cidname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#创建从表——score</span><span class="token keyword">create</span> <span class="token keyword">table</span> score<span class="token punctuation">(</span>sid <span class="token keyword">int</span><span class="token punctuation">,</span>cid <span class="token keyword">int</span><span class="token punctuation">,</span>score <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#添加多对多的外键约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> score <span class="token keyword">add</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>sid<span class="token punctuation">)</span> <span class="token keyword">references</span> student<span class="token punctuation">(</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> score <span class="token keyword">add</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">references</span> course<span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#向表中插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'小龙女'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'杨过'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'路明非'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> course <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'语文'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'数学'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'英语'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> score <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除外键约束需要注意只能先删除从表，不能从主表开始删除，主表和从表之间存在约束关系</p><h2 id="多表联合查询"><a href="#多表联合查询" class="headerlink" title="多表联合查询"></a>多表联合查询</h2><p>多表联合查询就是同时查询两个或两个以上的表，因为有的时候用户在查看数据的的时候，需要显示的数据来自多张表。</p><p>多表查询有以下分类：</p><h3 id="交叉连接查询"><a href="#交叉连接查询" class="headerlink" title="交叉连接查询"></a>交叉连接查询</h3><p>（产生笛卡尔积，了解）</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A<span class="token punctuation">,</span>B<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/ec9e4f442ff14589be500109b30481a6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_11,color_FFFFFF,t_70,g_se,x_16" alt="内连接查询"></p><p>实现：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept3<span class="token punctuation">,</span>emp3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p>内连接查询求的是交集</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#隐式内连接：</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A<span class="token punctuation">,</span>B <span class="token keyword">where</span> 条件<span class="token punctuation">;</span><span class="token comment">#显示内连接：</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A <span class="token keyword">inner</span> <span class="token keyword">join</span> B <span class="token keyword">on</span> 条件<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查询每个部门的所属员工</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#隐式内连接</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept3<span class="token punctuation">,</span>emp3 <span class="token keyword">where</span> dept3<span class="token punctuation">.</span>deptno <span class="token operator">=</span> emp3<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept3 a<span class="token punctuation">,</span>emp3 b <span class="token keyword">where</span> a<span class="token punctuation">.</span>deptno <span class="token operator">=</span> b<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span><span class="token comment">#显示内连接</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept3 <span class="token keyword">inner</span> <span class="token keyword">join</span> emp3 <span class="token keyword">on</span> dept3<span class="token punctuation">.</span>deptno <span class="token operator">=</span> emp3<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept3 a <span class="token keyword">inner</span> <span class="token keyword">join</span> emp3 b <span class="token keyword">on</span> a<span class="token punctuation">.</span>deptno <span class="token operator">=</span> b<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/d577037aadf946e6bf4a6b395ce60113.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_18,color_FFFFFF,t_70,g_se,x_16" alt="11111"></p><p>查询研发部和销售部的所属员工</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept3 a <span class="token keyword">join</span> emp3 b <span class="token keyword">on</span> a<span class="token punctuation">.</span>deptno <span class="token operator">=</span> b<span class="token punctuation">.</span>dept_id <span class="token operator">and</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'研发部'</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'销售部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept3 a <span class="token keyword">join</span> emp3 b <span class="token keyword">on</span> a<span class="token punctuation">.</span>deptno <span class="token operator">=</span> b<span class="token punctuation">.</span>dept_id <span class="token operator">and</span> name <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'研发部'</span> <span class="token punctuation">,</span> <span class="token string">'销售部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查询人数大于等于3的部门，并按照人数降序排序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> a<span class="token punctuation">.</span>deptno<span class="token punctuation">,</span>a<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> total_cnt<span class="token keyword">from</span> dept3 a<span class="token keyword">join</span> emp3 b <span class="token keyword">on</span> a<span class="token punctuation">.</span>dept_no <span class="token operator">=</span> b<span class="token punctuation">.</span>dept_id<span class="token keyword">group</span> <span class="token keyword">by</span> a<span class="token punctuation">.</span>deptno<span class="token punctuation">,</span>a<span class="token punctuation">.</span>name<span class="token keyword">having</span> total_cnt <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token keyword">order</span> <span class="token keyword">by</span>total_cnt <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#左外连接：left outer join</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> B <span class="token keyword">on</span> 条件<span class="token punctuation">;</span><span class="token comment">#右外连接：right outer join</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A <span class="token keyword">right</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> B <span class="token keyword">on</span> 条件<span class="token punctuation">;</span><span class="token comment">#满外连接：full outer join</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A <span class="token keyword">full</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> B <span class="token keyword">on</span> 条件<span class="token punctuation">;</span><span class="token comment">#注意：oracle里面有full join，可是在mysql对full join支持的不友好，可以使用union来达到目的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/f2f6fc8ed31049309ac7f75e0002b75a.png" alt="左连接查询"><br><img src="https://img-blog.csdnimg.cn/bce4a347a34f4a2ea0bdd515ee7eaacd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="右和满连接查询"></p><p>union是将两个查询结果上下拼接，并去重</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> B <span class="token keyword">on</span> 条件<span class="token punctuation">;</span><span class="token keyword">union</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A <span class="token keyword">right</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> B <span class="token keyword">on</span> 条件<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>union all是将两个查询结果上下拼接，不去重</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> B <span class="token keyword">on</span> 条件<span class="token punctuation">;</span><span class="token keyword">union</span> <span class="token keyword">all</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A <span class="token keyword">right</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> B <span class="token keyword">on</span> 条件<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>select的嵌套</p><p><img src="https://img-blog.csdnimg.cn/dcb9933d11ad45ff944709309750c940.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="子查询分类"></p><p>查询年龄最大的员工信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1.</span>查询最大年龄<span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> emp3<span class="token punctuation">;</span><span class="token number">2.</span>让每一个员工的年龄和最大年龄进行比较，相等则满足条件<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp3 <span class="token keyword">where</span> age <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> emp3<span class="token punctuation">)</span><span class="token punctuation">;</span> ——————单行单列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查询研发部和销售部的员工信息，包括员工编号、名字</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#方式一（关联查询）</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept3 a <span class="token keyword">join</span> emp3 b <span class="token keyword">on</span> a<span class="token punctuation">.</span>deptno <span class="token operator">=</span> b<span class="token punctuation">.</span>dept_id <span class="token operator">and</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'研发部'</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'销售部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#方式二（子查询）</span>先查询研发部和销售部的部门编号<span class="token keyword">select</span> deptno <span class="token keyword">from</span> dept3 <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'研发部'</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'销售部'</span><span class="token punctuation">;</span>查询哪个员工的编号是<span class="token number">1001</span>或者<span class="token number">1002</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp3 <span class="token keyword">where</span> dept_id <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> deptno <span class="token keyword">from</span> dept3 <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'研发部'</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'销售部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询研发部年龄小于30岁的员工信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#方式一（关联查询）</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept3 a <span class="token keyword">join</span> emp3 b <span class="token keyword">on</span> a<span class="token punctuation">.</span>deptno <span class="token operator">=</span> b<span class="token punctuation">.</span>dept_id <span class="token operator">and</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'研发部'</span> <span class="token operator">and</span> age <span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#方式二（子查询）</span>先在部门表查询研发部信息<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept3 <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'研发部'</span><span class="token punctuation">;</span>在员工表中查询年龄小于<span class="token number">30</span>岁的员工信息<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp3 <span class="token keyword">where</span> age <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>将前两张表的查询结果当成两张表来进行关联查询<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept3 <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'研发部'</span><span class="token punctuation">)</span> t1 <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp3 <span class="token keyword">where</span> age <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span> t2 <span class="token keyword">on</span> t1<span class="token punctuation">.</span>deptno <span class="token operator">=</span> t2<span class="token punctuation">.</span>dept_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子查询关键字"><a href="#子查询关键字" class="headerlink" title="子查询关键字"></a>子查询关键字</h3><p>ALL——关键字</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> c <span class="token operator">&gt;</span> <span class="token keyword">all</span><span class="token punctuation">(</span>查询语句<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>操作：</p><p>查询年纪大于‘1003’部门所有年龄的员工信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp3 <span class="token keyword">where</span> age <span class="token operator">&gt;</span><span class="token keyword">all</span><span class="token punctuation">(</span><span class="token keyword">select</span> age <span class="token keyword">from</span> dept3 <span class="token keyword">where</span> dept_id<span class="token operator">=</span> <span class="token string">'1003'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ANY和SOME——关键字</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> c <span class="token operator">&gt;</span> <span class="token keyword">any</span><span class="token punctuation">(</span>查询语句<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>IN——关键字</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> c <span class="token operator">in</span><span class="token punctuation">(</span>查询语句<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询研发部和销售部的员工信息，包含员工号、名字</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> eid<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>t<span class="token punctuation">.</span>name <span class="token keyword">from</span> emp3 <span class="token keyword">where</span> dept_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> deptno <span class="token keyword">from</span> dept3 <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'研发部'</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'销售部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>EXISTS——关键字</p><p>这个关键字会根据条件一行一行的数据进行判断，只有exists条件为true才会进行下一步。</p><p>查询公司是否有大于60岁的员工，有则输出</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp3 a <span class="token keyword">where</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp3 <span class="token keyword">where</span> a<span class="token punctuation">.</span>age<span class="token operator">&gt;</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#必须要在外查询的表添加别名，通过外查询来决定条件是否成立。</span><span class="token comment">#确切的说是外层的select是一行一行的执行的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查询有所属部门的员工信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp3 a <span class="token keyword">where</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept3 b <span class="token keyword">where</span> a<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> b<span class="token punctuation">.</span>deptno<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="表自关联"><a href="#表自关联" class="headerlink" title="表自关联"></a>表自关联</h3><p>将一张表当成多张表来用，对表自身进行关联查询，注意自关联时必须给表起别名。</p><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 字段列表 <span class="token keyword">from</span>  表<span class="token number">1</span> a<span class="token punctuation">,</span> 表<span class="token number">1</span> b <span class="token keyword">where</span> 条件<span class="token punctuation">;</span>或者<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 字段列表 <span class="token keyword">from</span>  表<span class="token number">1</span> a <span class="token punctuation">[</span><span class="token keyword">left</span><span class="token punctuation">]</span> <span class="token keyword">join</span> 表<span class="token number">1</span> b <span class="token keyword">on</span> 条件<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>操作：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#创建表，并建立自关联约束</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_sanguo<span class="token punctuation">(</span>eid <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    ename varcahr<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    manager_id <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>manager_id<span class="token punctuation">)</span> <span class="token keyword">references</span> t_sanguo <span class="token punctuation">(</span>eid<span class="token punctuation">)</span><span class="token comment">#添加自关联约束</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#添加数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_sanguo <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'刘协'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_sanguo <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'刘备'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_sanguo <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'关羽'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_sanguo <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'张飞'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_sanguo <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'曹操'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_sanguo <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'许诸'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_sanguo <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'典韦'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_sanguo <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'孙权'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_sanguo <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'周瑜'</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_sanguo <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'鲁肃'</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#查询每一个三国人物及他的上级信息</span><span class="token keyword">select</span> a<span class="token punctuation">.</span>ename <span class="token punctuation">,</span>b<span class="token punctuation">.</span>ename <span class="token keyword">from</span> t_sanguo a<span class="token punctuation">,</span>t_asnguo b <span class="token keyword">where</span> a<span class="token punctuation">.</span>manager_id <span class="token operator">=</span> b<span class="token punctuation">.</span>eid<span class="token punctuation">;</span><span class="token comment">#查询所有人物及上级(左外连接)</span><span class="token keyword">select</span> a<span class="token punctuation">.</span>ename <span class="token punctuation">,</span>b<span class="token punctuation">.</span>ename <span class="token keyword">from</span> t_sanguo a <span class="token keyword">left</span> <span class="token keyword">join</span>  t_asnguo b <span class="token keyword">on</span> a<span class="token punctuation">.</span>manager_id <span class="token operator">=</span> b<span class="token punctuation">.</span>eid<span class="token punctuation">;</span><span class="token comment">#查询所有人物的上级、上上级</span><span class="token keyword">select</span> a<span class="token punctuation">.</span>ename <span class="token punctuation">,</span>b<span class="token punctuation">.</span>ename <span class="token punctuation">,</span>c<span class="token punctuation">.</span>ename<span class="token keyword">from</span> t_sanguo a <span class="token keyword">left</span> <span class="token keyword">join</span>  t_asnguo b <span class="token keyword">on</span> a<span class="token punctuation">.</span>manager_id <span class="token operator">=</span> b<span class="token punctuation">.</span>eid<span class="token keyword">left</span> <span class="token keyword">join</span>  t_asnguo c <span class="token keyword">on</span> b<span class="token punctuation">.</span>manager_id <span class="token operator">=</span> c<span class="token punctuation">.</span>eid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库基础操作(四)</title>
      <link href="/2022-03-09-mysql-shu-ju-ku-ji-chu-cao-zuo-si.html"/>
      <url>/2022-03-09-mysql-shu-ju-ku-ji-chu-cao-zuo-si.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL查询"><a href="#MySQL查询" class="headerlink" title="MySQL查询"></a>MySQL查询</h1><h2 id="一、简单查询"><a href="#一、简单查询" class="headerlink" title="一、简单查询"></a>一、简单查询</h2><p><img src="https://img-blog.csdnimg.cn/8dbb7da9ecfb40fa9dbe4e0f6e46fe06.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="简单查询"></p><p>语法格式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token punctuation">[</span><span class="token keyword">all</span><span class="token operator">|</span><span class="token keyword">distinct</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>目标列的表达式<span class="token number">1</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>别名<span class="token punctuation">]</span><span class="token operator">&lt;</span>目标列的表达式<span class="token number">2</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>别名<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> <span class="token operator">&lt;</span>表名或视图名<span class="token operator">&gt;</span> <span class="token punctuation">[</span>别名<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>表名或视图名<span class="token operator">&gt;</span> <span class="token punctuation">[</span>别名<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">where</span> <span class="token operator">&lt;</span>条件表达式<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token comment">#查询条件</span><span class="token punctuation">[</span><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>列名<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token comment">#分组</span><span class="token punctuation">[</span><span class="token keyword">having</span> <span class="token operator">&lt;</span>条件表达式<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token comment">#对分组之后的结果进行筛选</span><span class="token punctuation">[</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>列名<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token keyword">asc</span><span class="token operator">|</span><span class="token keyword">desc</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#降序或升序</span><span class="token punctuation">[</span><span class="token keyword">limit</span> <span class="token operator">&lt;</span>数字或者列表<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简化语法格式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token operator">|</span> 列名 <span class="token keyword">from</span> 表 <span class="token keyword">where</span> 条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询所有商品</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询商品名和商品价格</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> panme<span class="token punctuation">,</span>price <span class="token keyword">from</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>别名查询(使用关键字as–as可省略)</p><p>表别名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">as</span> p<span class="token punctuation">;</span> <span class="token comment">#或者可以省略as</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product p<span class="token punctuation">;</span><span class="token comment">#当出现多张表时别名可以起到一个区分属性值的作用</span><span class="token keyword">select</span> p<span class="token punctuation">.</span>id<span class="token punctuation">,</span>u<span class="token punctuation">.</span>id <span class="token keyword">from</span> product p<span class="token punctuation">,</span><span class="token keyword">user</span> u<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列别名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> pname <span class="token keyword">as</span> <span class="token string">'商品名'</span><span class="token punctuation">,</span>price <span class="token string">'商品价格'</span> <span class="token keyword">from</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/efa5ec286dbb4d6db0519f5adb51aec6.png" alt="列别名"></p><p>去掉重复值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#关键字distinct</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> price <span class="token keyword">from</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查询结果是表达式(运算查询)：将所有结果加价10元显示</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> pname<span class="token punctuation">,</span>price <span class="token operator">+</span><span class="token number">10</span> new_price <span class="token keyword">from</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/69c3f09bf7934875b282c06e3862dbe5.png" alt="加价查询"></p><h2 id="二、运算符"><a href="#二、运算符" class="headerlink" title="二、运算符"></a>二、运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p><img src="https://img-blog.csdnimg.cn/5fd040b304bb453e9befebbdf6d4ce6b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="算数运算符"></p><p>将每件商品价格上调10</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> pname<span class="token punctuation">,</span>price <span class="token operator">+</span> <span class="token number">10</span> <span class="token keyword">as</span> neew_price <span class="token keyword">from</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将每件商品价格上调10%</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> pname<span class="token punctuation">,</span>price <span class="token operator">*</span> <span class="token number">1.1</span> <span class="token keyword">as</span> new_price <span class="token keyword">from</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p><img src="https://img-blog.csdnimg.cn/3176fb7b3ba04492865ac7886f37b1c0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="比较运算符"></p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><img src="https://img-blog.csdnimg.cn/28eb601d5c2846e6baed02e753061542.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="逻辑运算符"></p><p>查询商品名为“亚瑟士跑鞋”的商品所有信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> pname <span class="token operator">=</span> <span class="token string">'亚瑟士跑鞋'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询价格为500的商品</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> price <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询价格不是800的所有商品</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> price <span class="token operator">!=</span> <span class="token number">800</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> price <span class="token operator">&lt;&gt;</span> <span class="token number">800</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> <span class="token operator">not</span><span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查询商品价格大于60的所有商品</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> price <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询商品价格是50-1000之间的所有商品</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> price <span class="token operator">between</span> <span class="token number">50</span> <span class="token operator">and</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> price <span class="token operator">&gt;=</span> <span class="token number">50</span> <span class="token operator">and</span> price <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> price <span class="token operator">&gt;=</span> <span class="token number">50</span> <span class="token operator">&amp;&amp;</span> price <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查询商品价格是200或者800所有商品</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> price <span class="token operator">between</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> price <span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">or</span> price <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> price <span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">||</span> price <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查询含有‘鞋’字的所有商品</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> pname <span class="token operator">like</span> <span class="token string">'%鞋%'</span><span class="token punctuation">;</span><span class="token comment">#‘%’可以匹配任意字符</span><span class="token comment">#‘_’可以匹配单个字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查询第二个字是‘瑟’的所有商品</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">8</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> pname <span class="token operator">like</span> <span class="token string">'_瑟%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询category_id 为null的商品</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> category_id <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token comment">#查询不为null的商品</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> category_id <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用least求最小值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> least<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">as</span> small_number<span class="token punctuation">;</span><span class="token comment">#如果使用least求最小值或最大值有一个值为null，那结果直接为null。</span><span class="token comment">#使用min和max求最值那门会忽略值为null的那行数据，avg同样会忽略</span>aaa   <span class="token number">6</span>bbb   <span class="token number">3</span>ccc   <span class="token boolean">NULL</span>ddd   <span class="token number">3</span>max<span class="token operator">=</span><span class="token number">5</span> min<span class="token operator">=</span><span class="token number">3</span> avg<span class="token operator">=</span><span class="token number">4</span> least<span class="token operator">=</span><span class="token boolean">null</span><span class="token comment">#要想null不被忽略可以在建表时添加default 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用greatest求最大值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> greatest<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">as</span> small_number<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p><img src="https://img-blog.csdnimg.cn/0aea6b51d32e4d8ea527b1197f4ec9e9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="位运算符"></p><p><img src="https://img-blog.csdnimg.cn/1ca5d196b0c24ddfb4464b832fed6b27.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="01"></p><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><p>语法格式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>字段名<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span> 表名<span class="token keyword">order</span> <span class="token keyword">by</span> 字段名<span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">asc</span><span class="token operator">|</span><span class="token keyword">desc</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 字段名<span class="token number">2</span><span class="token punctuation">[</span><span class="token keyword">asc</span><span class="token operator">|</span><span class="token keyword">desc</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>特点</p><p>1.asc代表升序，desc代表降序，如果不写默认升序</p><p>2.order by用于子句中支持单个字段，多个字段、表达式、函数、别名</p><p>3.order by子句，放在查询语句的最后面。limit子句除外</p><p>使用价格排序（降序）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">order</span> <span class="token keyword">by</span> price <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在价格降序的基础上，以分类排序（降序）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">order</span> <span class="token keyword">by</span> price <span class="token keyword">desc</span><span class="token punctuation">,</span>category_id <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>去重显示商品的价格，并降序排序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> price <span class="token keyword">from</span> product <span class="token keyword">order</span> <span class="token keyword">by</span> price <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、聚合查询"><a href="#三、聚合查询" class="headerlink" title="三、聚合查询"></a>三、聚合查询</h2><p><img src="https://img-blog.csdnimg.cn/951ae271fe6c40fdb6ad2b956a8a5781.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="聚合查询"></p><p>查询商品的总条数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询价格大于200商品的总条数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> price <span class="token operator">&gt;</span> <span class="token number">200</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询分类为‘c001’的商品总和</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> category_id <span class="token operator">=</span> <span class="token string">'c001'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询商品的最大、最小价格</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">from</span> product<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">from</span> product<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> min_price<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> max_price <span class="token keyword">from</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查询分类为‘c002’所有商品的平均价格</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">from</span> product <span class="token keyword">where</span> category_id <span class="token operator">=</span> <span class="token string">'c002'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="聚合查询–NULL值的处理"><a href="#聚合查询–NULL值的处理" class="headerlink" title="聚合查询–NULL值的处理"></a>聚合查询–NULL值的处理</h3><p><img src="https://img-blog.csdnimg.cn/c68e4a106ef0429c9098d632c2b2e9dd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="NULL处理"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#如果使用least求最小值或最大值有一个值为null，那结果直接为null。</span><span class="token comment">#使用min和max求最值那门会忽略值为null的那行数据，avg同样会忽略</span>aaa   <span class="token number">6</span>bbb   <span class="token number">3</span>ccc   <span class="token boolean">NULL</span>ddd   <span class="token number">3</span>max<span class="token operator">=</span><span class="token number">5</span> min<span class="token operator">=</span><span class="token number">3</span> avg<span class="token operator">=</span><span class="token number">4</span> least<span class="token operator">=</span><span class="token boolean">null</span><span class="token comment">#要想null不被忽略可以在建表时添加default 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、分组查询"><a href="#四、分组查询" class="headerlink" title="四、分组查询"></a>四、分组查询</h2><h3 id="分组查询–group-by"><a href="#分组查询–group-by" class="headerlink" title="分组查询–group by"></a>分组查询–group by</h3><p>语法格式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>   字段<span class="token number">1</span>，字段<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> 表名 <span class="token keyword">group</span> <span class="token keyword">by</span> 分组字段<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>统计各个分类商品的个数 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#注意   分组之后   select的后面只可以写分组字段和聚合函数</span><span class="token keyword">select</span> category_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span> <span class="token keyword">from</span> product <span class="token keyword">group</span> <span class="token keyword">by</span> category_id<span class="token punctuation">;</span><span class="token comment">#学号    年龄   名字    省    市     县</span><span class="token comment">#select  from 表名 group by 省，市，县；</span><span class="token comment">#多列分组查询，结果只有全部相同才进行统计</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/80df764945cd4b0ea34d18e16c9a73e9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="分组查询"></p><h3 id="分组之后的条件筛选–having"><a href="#分组之后的条件筛选–having" class="headerlink" title="分组之后的条件筛选–having"></a>分组之后的条件筛选–having</h3><p>语法格式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>   字段<span class="token number">1</span>，字段<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> 表名 <span class="token keyword">group</span> <span class="token keyword">by</span> 分组字段   <span class="token keyword">having</span>   分组条件<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/5af2a4ac04ed4dda896749e140c9c82e.png" alt="having"></p><p>统计各个分类商品的个数，且只显示个数大于4的信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> category_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> product <span class="token keyword">group</span> <span class="token keyword">by</span> category_id <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">#SQL执行顺序：from---&gt;group by---&gt;count(*)---&gt;select---&gt;having---&gt;order by</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="分页查询-limit"><a href="#分页查询-limit" class="headerlink" title="分页查询-limit"></a>分页查询-limit</h2><p>语法格式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#显示前n条</span><span class="token keyword">select</span> 字段<span class="token number">1</span>，字段<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> 表名 <span class="token keyword">limit</span> n<span class="token punctuation">;</span><span class="token comment">#从第4条开始显示，显示5条</span><span class="token keyword">select</span> 字段<span class="token number">1</span>，字段<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> 表名 <span class="token keyword">limit</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token comment">#m:整数，表示从第几条索引开始，计算（当前页-1）*每页显示条数</span><span class="token comment">#n:整数，表示查询多少条数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询product表的前5条记录</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">limit</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询从第4条开始显示，显示5条记录</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">#这里的3是下标，下标从0开始</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>分页显示</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">;</span>   <span class="token comment">#第1页</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">limit</span> <span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">;</span>   <span class="token comment">#第2页</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">limit</span> <span class="token number">120</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">;</span>   <span class="token comment">#第3页</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product <span class="token keyword">limit</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">;</span>   <span class="token comment">#第n页--（当前页-1）*每页显示条数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="INSERT-INTO-SELECT语句-表导入语句"><a href="#INSERT-INTO-SELECT语句-表导入语句" class="headerlink" title="INSERT   INTO   SELECT语句(表导入语句)"></a>INSERT   INTO   SELECT语句(表导入语句)</h2><p>简介</p><p>将一张表的数据导入另一张表中，可以使用insert   into   select语句。</p><p>语法格式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> Table2<span class="token punctuation">(</span>field1<span class="token punctuation">,</span>filed2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">select</span> value1<span class="token punctuation">,</span>value2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> TAble1<span class="token punctuation">;</span>或者<span class="token keyword">insert</span> <span class="token keyword">into</span> Table2 <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Table1<span class="token comment">#要求目标表Table2必须存在，Table1查询的字段在Table2中一定要有相对应的字段</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查询表product中catepory_id字段分类数量导入数据到表product2</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> product2{catepory_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>product_count <span class="token keyword">int</span>}<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> prduct2 <span class="token keyword">select</span> category_id <span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> product <span class="token keyword">group</span> <span class="token keyword">by</span> category_id<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> product2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/552de562e31f4e65b34a93e0a5ef9fb6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_19,color_FFFFFF,t_70,g_se,x_16" alt="insert into select"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库基础操作(三)</title>
      <link href="/2022-03-07-mysql-shu-ju-ku-ji-chu-cao-zuo-san.html"/>
      <url>/2022-03-07-mysql-shu-ju-ku-ji-chu-cao-zuo-san.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL约束"><a href="#MySQL约束" class="headerlink" title="MySQL约束"></a>MySQL约束</h1><h2 id="主键约束（primary-key）"><a href="#主键约束（primary-key）" class="headerlink" title="主键约束（primary key）"></a>主键约束（primary key）</h2><p>主键约束是一列或多列的组合，其值能唯一标识表中每一行，方便在数据库中快速找到某一行。<br>主键约束相当于唯一约束+非空约束的组合。</p><h3 id="添加主键约束"><a href="#添加主键约束" class="headerlink" title="添加主键约束"></a>添加主键约束</h3><p>在create table语句中，通过primary key关键字来指定主键。<br>语法格式：</p><p>方法一：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span><span class="token operator">&lt;</span>字段名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span><span class="token operator">&lt;</span>字段名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字段名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字段名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token keyword">constraint</span> 主键名 <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>字段名<span class="token punctuation">)</span>  <span class="token comment">#constraint 主键名可省略</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多列主键-联合主键"><a href="#多列主键-联合主键" class="headerlink" title="多列主键(联合主键)"></a>多列主键(联合主键)</h2><p>这个主键由一张表中多个字段组成<br>注意：<br>    当这个主键由多个字段组成时，不能直接在字段名后声明主键约束。<br>    一张表只能有一个主键，联合主键也是一个主键<br>语法：   </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>字段名 数据类型，字段名 数据类型，字段名 数据类型，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>字段名，字段名，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 通过修改表结构来添加主键(联合主键同理)<br>​ 语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>    字段名 数据类型，字段名 数据类型，字段名 数据类型<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>字段名<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除表主键"><a href="#删除表主键" class="headerlink" title="删除表主键"></a>删除表主键</h3><p>语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2f3ced9f56b843f8a31453278ff72f12.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="约束思维导图"></p><h2 id="自增长约束"><a href="#自增长约束" class="headerlink" title="自增长约束"></a>自增长约束</h2><p>语法：<br>    字段名 数据类型 primary key auto_increment<br>操作：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_user1<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指定自增长的初始值"><a href="#指定自增长的初始值" class="headerlink" title="指定自增长的初始值"></a>指定自增长的初始值</h3><p>方法一：创建表时指定</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_user2<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>auto<span class="token operator">-</span>increment <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：创建表之后指定</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_user3<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">alter</span> <span class="token keyword">table</span> t_user3 <span class="token keyword">auto_increment</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user3 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#delete和truncate在删除后自增列的变化</span><span class="token comment">#delete数据之后自动增长从断点开始</span><span class="token comment">#truncate数据之后自动增长从默认初始值开始</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h2><h3 id="添加非空约束"><a href="#添加非空约束" class="headerlink" title="添加非空约束"></a>添加非空约束</h3><p>方法一：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span>字段名<span class="token operator">&gt;</span><span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​       方法二：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> 字段名 数据类型 <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除非空约束"><a href="#删除非空约束" class="headerlink" title="删除非空约束"></a>删除非空约束</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> 字段名 数据类型<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h2><h3 id="添加唯一约束"><a href="#添加唯一约束" class="headerlink" title="添加唯一约束"></a>添加唯一约束</h3><p>方法一：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span>字段名<span class="token operator">&gt;</span><span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span> <span class="token keyword">unique</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法二：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">constraint</span> 主键名<span class="token punctuation">(</span>约束<span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">(</span>列<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除唯一约束"><a href="#删除唯一约束" class="headerlink" title="删除唯一约束"></a>删除唯一约束</h3><p>格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span>  <span class="token keyword">drop</span> <span class="token keyword">index</span> <span class="token operator">&lt;</span>唯一约束名<span class="token operator">&gt;</span><span class="token punctuation">;</span><span class="token comment">#如果没有约束名，那么该约束所在列的列名默认是约束名。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/521d64f7f5024ba6b8b1912526399a80.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="约束思维导图"></p><h2 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h2><p>概念：<br>mysql默认值约束用来指定某列的默认值。<br>语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span>字段值<span class="token operator">&gt;</span><span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span> <span class="token keyword">default</span> <span class="token operator">&lt;</span>默认值<span class="token operator">&gt;</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> 列名 类型 <span class="token keyword">default</span> 默认值<span class="token punctuation">;</span>添加默认约束——方法<span class="token number">1</span>：<span class="token keyword">create</span> <span class="token keyword">table</span> t_user10<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'浙江'</span> <span class="token comment">--指定默认约束</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加默认约束——方法2：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_user11<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> t_user11 address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'浙江'</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user11<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除默认约束"><a href="#删除默认约束" class="headerlink" title="删除默认约束"></a>删除默认约束</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span>change <span class="token keyword">column</span> <span class="token operator">&lt;</span>字段名<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>类型<span class="token operator">&gt;</span> <span class="token keyword">default</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> t_user11 change <span class="token keyword">column</span> address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/75a761c2107747a0880efbbeaf166849.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="约束思维导图"></p><h2 id="零填充约束-zerofill"><a href="#零填充约束-zerofill" class="headerlink" title="零填充约束(zerofill)"></a>零填充约束(zerofill)</h2><p>概念：<br>1.插入数据时，当该字段的值的长度时，会在该值的前面补上相应的0<br>2.zerofill默认为int(10)<br>3.当使用zerofill时，默认会自动加unsigned（无符号）属性，使用unsigned属性后，数值范围是原值的2倍，例如，有符号为-128<del>+127，无符号为0</del>256<br>操作：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_user12<span class="token punctuation">(</span>id <span class="token keyword">int</span> zerofill<span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>删除：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> t_user12 <span class="token keyword">modify</span> id <span class="token keyword">int</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库基础操作(二)</title>
      <link href="/2022-03-07-mysql-shu-ju-ku-ji-chu-cao-zuo-er.html"/>
      <url>/2022-03-07-mysql-shu-ju-ku-ji-chu-cao-zuo-er.html</url>
      
        <content type="html"><![CDATA[<h1 id="MYSQL数据库基本操作——DML"><a href="#MYSQL数据库基本操作——DML" class="headerlink" title="MYSQL数据库基本操作——DML"></a>MYSQL数据库基本操作——DML</h1><p>​    DML是指数据操作语言，用来对数据库数据记录进行更新（增删改）。</p><p><img src="https://img-blog.csdnimg.cn/ed20035f00d345b18ba7dfbac56bb198.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_55u056eL6JG1,size_20,color_FFFFFF,t_70,g_se,x_16" alt="DML思维导图"></p><h2 id="数据的插入"><a href="#数据的插入" class="headerlink" title="数据的插入"></a>数据的插入</h2><p>语法格式：<br>//向表中插入某些列<br>insert into 表(列名1，列名2，列名3…) values (值1，值2，值3);<br>//向表中插入所有列<br>insert into 表 values (值1，值2，值3…);</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">例子：<span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span>sid<span class="token punctuation">,</span>name<span class="token punctuation">,</span>address<span class="token punctuation">,</span>age<span class="token punctuation">,</span>score<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span>姜宇昂<span class="token punctuation">,</span>浙江<span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="数据的修改"><a href="#数据的修改" class="headerlink" title="数据的修改"></a>数据的修改</h2><p>语法格式：<br>update 表名 set 字段名=值,字段名=值…;<br>update 表名 set 字段名=值,字段名=值…where 条件;</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">例子：<span class="token keyword">update</span> student <span class="token keyword">set</span> address<span class="token operator">=</span><span class="token string">'重庆'</span> <span class="token keyword">where</span> sid <span class="token operator">=</span> <span class="token number">1007</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="数据的删除"><a href="#数据的删除" class="headerlink" title="数据的删除"></a>数据的删除</h2><p>语法格式：<br>delete from 表名 [where 条件];<br>truncate table 表名 或者truncate 表名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">例子：<span class="token comment">#删除sid为1004的学生数据</span><span class="token keyword">delete</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> sid <span class="token operator">=</span> <span class="token number">1004</span><span class="token punctuation">;</span><span class="token comment">#删除表所有数据</span><span class="token keyword">delete</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token comment">#清空表数据</span><span class="token keyword">truncate</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span><span class="token keyword">truncate</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：delete和truncate原理不同，delete只删除内容，而truncate类似于drop table，可以理解为将整个表删除然后在创建该表。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库基础操作(一)</title>
      <link href="/2022-03-07-mysql-shu-ju-ku-ji-chu-cao-zuo-yi.html"/>
      <url>/2022-03-07-mysql-shu-ju-ku-ji-chu-cao-zuo-yi.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据库基本操作——DDL"><a href="#MySQL数据库基本操作——DDL" class="headerlink" title="MySQL数据库基本操作——DDL"></a>MySQL数据库基本操作——DDL</h1><h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> mydb1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> student<span class="token punctuation">(</span>sid <span class="token keyword">int</span> <span class="token keyword">unsigned</span><span class="token punctuation">,</span><span class="token comment">#无符号标记</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>gender <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>score <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看当前数据库的所有表名称"><a href="#查看当前数据库的所有表名称" class="headerlink" title="查看当前数据库的所有表名称"></a>查看当前数据库的所有表名称</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查看指定某个表的创建语句"><a href="#查看指定某个表的创建语句" class="headerlink" title="查看指定某个表的创建语句"></a>查看指定某个表的创建语句</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>表名<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">desc</span> student<span class="token punctuation">(</span>表名<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>表名<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h2><p>-添加列<br>alter table 表名 add 列名 类型(长度) [约束];</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">例子：<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> dept <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        -修改列名和类型<br>​        alter table 表名 change 旧列名 新列名 类型(长度) 约束；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">例子：<span class="token keyword">alter</span> <span class="token keyword">table</span> student change dept department varchanr<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h2><p>alter table 表名 drop 列名;</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">例子：<span class="token comment">#删除student表中department这列</span><span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">drop</span> department<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h2><p>rename table 表名 to 新表名;</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">例子：<span class="token comment">#将表student改名成stu</span><span class="token keyword">rename</span> <span class="token keyword">table</span> student <span class="token keyword">to</span> stu<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
